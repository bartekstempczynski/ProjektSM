
L10_FIR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a14  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08006be4  08006be4  00016be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d6c  08006d6c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006d6c  08006d6c  00016d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d74  08006d74  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d74  08006d74  00016d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d78  08006d78  00016d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  200001dc  08006f58  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000860  08006f58  00020860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018faa  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000362b  00000000  00000000  000391b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001498  00000000  00000000  0003c7e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c0  00000000  00000000  0003dc80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000264e3  00000000  00000000  0003ef40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012e77  00000000  00000000  00065423  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eec6e  00000000  00000000  0007829a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00166f08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a0  00000000  00000000  00166f84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006bcc 	.word	0x08006bcc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08006bcc 	.word	0x08006bcc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	ed93 7a06 	vldr	s14, [r3, #24]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	edd3 7a07 	vldr	s15, [r3, #28]
 80005c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	edd3 7a08 	vldr	s15, [r3, #32]
 80005d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80005e0:	eeb1 7a67 	vneg.f32	s14, s15
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	edd3 7a08 	vldr	s15, [r3, #32]
 80005ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80005ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6a1a      	ldr	r2, [r3, #32]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d006      	beq.n	8000614 <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	330c      	adds	r3, #12
 800060a:	220c      	movs	r2, #12
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f005 fe18 	bl	8006244 <memset>
  }

}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000620:	2003      	movs	r0, #3
 8000622:	f000 f94b 	bl	80008bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000626:	2000      	movs	r0, #0
 8000628:	f000 f806 	bl	8000638 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800062c:	f005 fa1e 	bl	8005a6c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_InitTick+0x54>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_InitTick+0x58>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4619      	mov	r1, r3
 800064a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000652:	fbb2 f3f3 	udiv	r3, r2, r3
 8000656:	4618      	mov	r0, r3
 8000658:	f000 f965 	bl	8000926 <HAL_SYSTICK_Config>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	e00e      	b.n	8000684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d80a      	bhi.n	8000682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800066c:	2200      	movs	r2, #0
 800066e:	6879      	ldr	r1, [r7, #4]
 8000670:	f04f 30ff 	mov.w	r0, #4294967295
 8000674:	f000 f92d 	bl	80008d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <HAL_InitTick+0x5c>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800067e:	2300      	movs	r3, #0
 8000680:	e000      	b.n	8000684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000682:	2301      	movs	r3, #1
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000008 	.word	0x20000008
 8000690:	20000004 	.word	0x20000004
 8000694:	20000000 	.word	0x20000000

08000698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_IncTick+0x20>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_IncTick+0x24>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4413      	add	r3, r2
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <HAL_IncTick+0x24>)
 80006aa:	6013      	str	r3, [r2, #0]
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000004 	.word	0x20000004
 80006bc:	20000208 	.word	0x20000208

080006c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return uwTick;
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <HAL_GetTick+0x14>)
 80006c6:	681b      	ldr	r3, [r3, #0]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	20000208 	.word	0x20000208

080006d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e0:	f7ff ffee 	bl	80006c0 <HAL_GetTick>
 80006e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f0:	d005      	beq.n	80006fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_Delay+0x40>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006fe:	bf00      	nop
 8000700:	f7ff ffde 	bl	80006c0 <HAL_GetTick>
 8000704:	4602      	mov	r2, r0
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	429a      	cmp	r2, r3
 800070e:	d8f7      	bhi.n	8000700 <HAL_Delay+0x28>
  {
  }
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000004 	.word	0x20000004

0800071c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <__NVIC_SetPriorityGrouping+0x40>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 8000746:	4313      	orrs	r3, r2
 8000748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074a:	4a04      	ldr	r2, [pc, #16]	; (800075c <__NVIC_SetPriorityGrouping+0x40>)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	60d3      	str	r3, [r2, #12]
}
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000ed00 	.word	0xe000ed00
 8000760:	05fa0000 	.word	0x05fa0000

08000764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <__NVIC_GetPriorityGrouping+0x18>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	f003 0307 	and.w	r3, r3, #7
}
 8000772:	4618      	mov	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	2b00      	cmp	r3, #0
 8000790:	db0b      	blt.n	80007aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	f003 021f 	and.w	r2, r3, #31
 8000798:	4907      	ldr	r1, [pc, #28]	; (80007b8 <__NVIC_EnableIRQ+0x38>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	095b      	lsrs	r3, r3, #5
 80007a0:	2001      	movs	r0, #1
 80007a2:	fa00 f202 	lsl.w	r2, r0, r2
 80007a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000e100 	.word	0xe000e100

080007bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	6039      	str	r1, [r7, #0]
 80007c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	db0a      	blt.n	80007e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	490c      	ldr	r1, [pc, #48]	; (8000808 <__NVIC_SetPriority+0x4c>)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	0112      	lsls	r2, r2, #4
 80007dc:	b2d2      	uxtb	r2, r2
 80007de:	440b      	add	r3, r1
 80007e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e4:	e00a      	b.n	80007fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4908      	ldr	r1, [pc, #32]	; (800080c <__NVIC_SetPriority+0x50>)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	f003 030f 	and.w	r3, r3, #15
 80007f2:	3b04      	subs	r3, #4
 80007f4:	0112      	lsls	r2, r2, #4
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	440b      	add	r3, r1
 80007fa:	761a      	strb	r2, [r3, #24]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000e100 	.word	0xe000e100
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000810:	b480      	push	{r7}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	f1c3 0307 	rsb	r3, r3, #7
 800082a:	2b04      	cmp	r3, #4
 800082c:	bf28      	it	cs
 800082e:	2304      	movcs	r3, #4
 8000830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	3304      	adds	r3, #4
 8000836:	2b06      	cmp	r3, #6
 8000838:	d902      	bls.n	8000840 <NVIC_EncodePriority+0x30>
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	3b03      	subs	r3, #3
 800083e:	e000      	b.n	8000842 <NVIC_EncodePriority+0x32>
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	f04f 32ff 	mov.w	r2, #4294967295
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	43da      	mvns	r2, r3
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	401a      	ands	r2, r3
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000858:	f04f 31ff 	mov.w	r1, #4294967295
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	fa01 f303 	lsl.w	r3, r1, r3
 8000862:	43d9      	mvns	r1, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000868:	4313      	orrs	r3, r2
         );
}
 800086a:	4618      	mov	r0, r3
 800086c:	3724      	adds	r7, #36	; 0x24
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
	...

08000878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3b01      	subs	r3, #1
 8000884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000888:	d301      	bcc.n	800088e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800088a:	2301      	movs	r3, #1
 800088c:	e00f      	b.n	80008ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <SysTick_Config+0x40>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3b01      	subs	r3, #1
 8000894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000896:	210f      	movs	r1, #15
 8000898:	f04f 30ff 	mov.w	r0, #4294967295
 800089c:	f7ff ff8e 	bl	80007bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <SysTick_Config+0x40>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a6:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <SysTick_Config+0x40>)
 80008a8:	2207      	movs	r2, #7
 80008aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	e000e010 	.word	0xe000e010

080008bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff ff29 	bl	800071c <__NVIC_SetPriorityGrouping>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b086      	sub	sp, #24
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	4603      	mov	r3, r0
 80008da:	60b9      	str	r1, [r7, #8]
 80008dc:	607a      	str	r2, [r7, #4]
 80008de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e4:	f7ff ff3e 	bl	8000764 <__NVIC_GetPriorityGrouping>
 80008e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	68b9      	ldr	r1, [r7, #8]
 80008ee:	6978      	ldr	r0, [r7, #20]
 80008f0:	f7ff ff8e 	bl	8000810 <NVIC_EncodePriority>
 80008f4:	4602      	mov	r2, r0
 80008f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ff5d 	bl	80007bc <__NVIC_SetPriority>
}
 8000902:	bf00      	nop
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff31 	bl	8000780 <__NVIC_EnableIRQ>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff ffa2 	bl	8000878 <SysTick_Config>
 8000934:	4603      	mov	r3, r0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800093e:	b480      	push	{r7}
 8000940:	b083      	sub	sp, #12
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800094c:	b2db      	uxtb	r3, r3
 800094e:	2b02      	cmp	r3, #2
 8000950:	d004      	beq.n	800095c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2280      	movs	r2, #128	; 0x80
 8000956:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000958:	2301      	movs	r3, #1
 800095a:	e00c      	b.n	8000976 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2205      	movs	r2, #5
 8000960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f022 0201 	bic.w	r2, r2, #1
 8000972:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000984:	b480      	push	{r7}
 8000986:	b089      	sub	sp, #36	; 0x24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
 80009a2:	e175      	b.n	8000c90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80009a4:	2201      	movs	r2, #1
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	4013      	ands	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	429a      	cmp	r2, r3
 80009be:	f040 8164 	bne.w	8000c8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d003      	beq.n	80009d2 <HAL_GPIO_Init+0x4e>
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	2b12      	cmp	r3, #18
 80009d0:	d123      	bne.n	8000a1a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	08da      	lsrs	r2, r3, #3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3208      	adds	r2, #8
 80009da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	220f      	movs	r2, #15
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	4013      	ands	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	691a      	ldr	r2, [r3, #16]
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	f003 0307 	and.w	r3, r3, #7
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	69ba      	ldr	r2, [r7, #24]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	08da      	lsrs	r2, r3, #3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3208      	adds	r2, #8
 8000a14:	69b9      	ldr	r1, [r7, #24]
 8000a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	2203      	movs	r2, #3
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f003 0203 	and.w	r2, r3, #3
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d00b      	beq.n	8000a6e <HAL_GPIO_Init+0xea>
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d007      	beq.n	8000a6e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a62:	2b11      	cmp	r3, #17
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2b12      	cmp	r3, #18
 8000a6c:	d130      	bne.n	8000ad0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	2203      	movs	r2, #3
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	4013      	ands	r3, r2
 8000a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	68da      	ldr	r2, [r3, #12]
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	69ba      	ldr	r2, [r7, #24]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	091b      	lsrs	r3, r3, #4
 8000aba:	f003 0201 	and.w	r2, r3, #1
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	2203      	movs	r2, #3
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	689a      	ldr	r2, [r3, #8]
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	f000 80be 	beq.w	8000c8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b65      	ldr	r3, [pc, #404]	; (8000ca4 <HAL_GPIO_Init+0x320>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a64      	ldr	r2, [pc, #400]	; (8000ca4 <HAL_GPIO_Init+0x320>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b62      	ldr	r3, [pc, #392]	; (8000ca4 <HAL_GPIO_Init+0x320>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000b26:	4a60      	ldr	r2, [pc, #384]	; (8000ca8 <HAL_GPIO_Init+0x324>)
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	089b      	lsrs	r3, r3, #2
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f003 0303 	and.w	r3, r3, #3
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	220f      	movs	r2, #15
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	4013      	ands	r3, r2
 8000b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a57      	ldr	r2, [pc, #348]	; (8000cac <HAL_GPIO_Init+0x328>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d037      	beq.n	8000bc2 <HAL_GPIO_Init+0x23e>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a56      	ldr	r2, [pc, #344]	; (8000cb0 <HAL_GPIO_Init+0x32c>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d031      	beq.n	8000bbe <HAL_GPIO_Init+0x23a>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a55      	ldr	r2, [pc, #340]	; (8000cb4 <HAL_GPIO_Init+0x330>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d02b      	beq.n	8000bba <HAL_GPIO_Init+0x236>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a54      	ldr	r2, [pc, #336]	; (8000cb8 <HAL_GPIO_Init+0x334>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d025      	beq.n	8000bb6 <HAL_GPIO_Init+0x232>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a53      	ldr	r2, [pc, #332]	; (8000cbc <HAL_GPIO_Init+0x338>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d01f      	beq.n	8000bb2 <HAL_GPIO_Init+0x22e>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a52      	ldr	r2, [pc, #328]	; (8000cc0 <HAL_GPIO_Init+0x33c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d019      	beq.n	8000bae <HAL_GPIO_Init+0x22a>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a51      	ldr	r2, [pc, #324]	; (8000cc4 <HAL_GPIO_Init+0x340>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d013      	beq.n	8000baa <HAL_GPIO_Init+0x226>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a50      	ldr	r2, [pc, #320]	; (8000cc8 <HAL_GPIO_Init+0x344>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d00d      	beq.n	8000ba6 <HAL_GPIO_Init+0x222>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a4f      	ldr	r2, [pc, #316]	; (8000ccc <HAL_GPIO_Init+0x348>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d007      	beq.n	8000ba2 <HAL_GPIO_Init+0x21e>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a4e      	ldr	r2, [pc, #312]	; (8000cd0 <HAL_GPIO_Init+0x34c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d101      	bne.n	8000b9e <HAL_GPIO_Init+0x21a>
 8000b9a:	2309      	movs	r3, #9
 8000b9c:	e012      	b.n	8000bc4 <HAL_GPIO_Init+0x240>
 8000b9e:	230a      	movs	r3, #10
 8000ba0:	e010      	b.n	8000bc4 <HAL_GPIO_Init+0x240>
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	e00e      	b.n	8000bc4 <HAL_GPIO_Init+0x240>
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	e00c      	b.n	8000bc4 <HAL_GPIO_Init+0x240>
 8000baa:	2306      	movs	r3, #6
 8000bac:	e00a      	b.n	8000bc4 <HAL_GPIO_Init+0x240>
 8000bae:	2305      	movs	r3, #5
 8000bb0:	e008      	b.n	8000bc4 <HAL_GPIO_Init+0x240>
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	e006      	b.n	8000bc4 <HAL_GPIO_Init+0x240>
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e004      	b.n	8000bc4 <HAL_GPIO_Init+0x240>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	e002      	b.n	8000bc4 <HAL_GPIO_Init+0x240>
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e000      	b.n	8000bc4 <HAL_GPIO_Init+0x240>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	69fa      	ldr	r2, [r7, #28]
 8000bc6:	f002 0203 	and.w	r2, r2, #3
 8000bca:	0092      	lsls	r2, r2, #2
 8000bcc:	4093      	lsls	r3, r2
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000bd4:	4934      	ldr	r1, [pc, #208]	; (8000ca8 <HAL_GPIO_Init+0x324>)
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	089b      	lsrs	r3, r3, #2
 8000bda:	3302      	adds	r3, #2
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000be2:	4b3c      	ldr	r3, [pc, #240]	; (8000cd4 <HAL_GPIO_Init+0x350>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	43db      	mvns	r3, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d003      	beq.n	8000c06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c06:	4a33      	ldr	r2, [pc, #204]	; (8000cd4 <HAL_GPIO_Init+0x350>)
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c0c:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <HAL_GPIO_Init+0x350>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	43db      	mvns	r3, r3
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d003      	beq.n	8000c30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c30:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <HAL_GPIO_Init+0x350>)
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c36:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <HAL_GPIO_Init+0x350>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4013      	ands	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d003      	beq.n	8000c5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c5a:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <HAL_GPIO_Init+0x350>)
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c60:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <HAL_GPIO_Init+0x350>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c84:	4a13      	ldr	r2, [pc, #76]	; (8000cd4 <HAL_GPIO_Init+0x350>)
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	61fb      	str	r3, [r7, #28]
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	2b0f      	cmp	r3, #15
 8000c94:	f67f ae86 	bls.w	80009a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000c98:	bf00      	nop
 8000c9a:	3724      	adds	r7, #36	; 0x24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40013800 	.word	0x40013800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020400 	.word	0x40020400
 8000cb4:	40020800 	.word	0x40020800
 8000cb8:	40020c00 	.word	0x40020c00
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40021400 	.word	0x40021400
 8000cc4:	40021800 	.word	0x40021800
 8000cc8:	40021c00 	.word	0x40021c00
 8000ccc:	40022000 	.word	0x40022000
 8000cd0:	40022400 	.word	0x40022400
 8000cd4:	40013c00 	.word	0x40013c00

08000cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	807b      	strh	r3, [r7, #2]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ce8:	787b      	ldrb	r3, [r7, #1]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cee:	887a      	ldrh	r2, [r7, #2]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000cf4:	e003      	b.n	8000cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000cf6:	887b      	ldrh	r3, [r7, #2]
 8000cf8:	041a      	lsls	r2, r3, #16
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	619a      	str	r2, [r3, #24]
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	460b      	mov	r3, r1
 8000d14:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	695a      	ldr	r2, [r3, #20]
 8000d1a:	887b      	ldrh	r3, [r7, #2]
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	887b      	ldrh	r3, [r7, #2]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d104      	bne.n	8000d2e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	041a      	lsls	r2, r3, #16
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000d2c:	e002      	b.n	8000d34 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000d2e:	887a      	ldrh	r2, [r7, #2]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	619a      	str	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d4c:	695a      	ldr	r2, [r3, #20]
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	4013      	ands	r3, r2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d006      	beq.n	8000d64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f004 fe5a 	bl	8005a18 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40013c00 	.word	0x40013c00

08000d70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d101      	bne.n	8000d82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e07f      	b.n	8000e82 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d106      	bne.n	8000d9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f004 fca0 	bl	80056dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2224      	movs	r2, #36	; 0x24
 8000da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 0201 	bic.w	r2, r2, #1
 8000db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000dc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000dd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d107      	bne.n	8000dea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	e006      	b.n	8000df8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000df6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d104      	bne.n	8000e0a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6859      	ldr	r1, [r3, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <HAL_I2C_Init+0x11c>)
 8000e16:	430b      	orrs	r3, r1
 8000e18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	68da      	ldr	r2, [r3, #12]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	691a      	ldr	r2, [r3, #16]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	ea42 0103 	orr.w	r1, r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	021a      	lsls	r2, r3, #8
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	430a      	orrs	r2, r1
 8000e42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69d9      	ldr	r1, [r3, #28]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6a1a      	ldr	r2, [r3, #32]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	430a      	orrs	r2, r1
 8000e52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f042 0201 	orr.w	r2, r2, #1
 8000e62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2220      	movs	r2, #32
 8000e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	02008000 	.word	0x02008000

08000e90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af02      	add	r7, sp, #8
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	817b      	strh	r3, [r7, #10]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b20      	cmp	r3, #32
 8000eae:	f040 80da 	bne.w	8001066 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d101      	bne.n	8000ec0 <HAL_I2C_Master_Transmit+0x30>
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	e0d3      	b.n	8001068 <HAL_I2C_Master_Transmit+0x1d8>
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000ec8:	f7ff fbfa 	bl	80006c0 <HAL_GetTick>
 8000ecc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2319      	movs	r3, #25
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f000 f9e6 	bl	80012ac <I2C_WaitOnFlagUntilTimeout>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e0be      	b.n	8001068 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2221      	movs	r2, #33	; 0x21
 8000eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2210      	movs	r2, #16
 8000ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2200      	movs	r2, #0
 8000efe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	893a      	ldrh	r2, [r7, #8]
 8000f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	2bff      	cmp	r3, #255	; 0xff
 8000f1a:	d90e      	bls.n	8000f3a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	22ff      	movs	r2, #255	; 0xff
 8000f20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	8979      	ldrh	r1, [r7, #10]
 8000f2a:	4b51      	ldr	r3, [pc, #324]	; (8001070 <HAL_I2C_Master_Transmit+0x1e0>)
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f32:	68f8      	ldr	r0, [r7, #12]
 8000f34:	f000 fb48 	bl	80015c8 <I2C_TransferConfig>
 8000f38:	e06c      	b.n	8001014 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	8979      	ldrh	r1, [r7, #10]
 8000f4c:	4b48      	ldr	r3, [pc, #288]	; (8001070 <HAL_I2C_Master_Transmit+0x1e0>)
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	f000 fb37 	bl	80015c8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000f5a:	e05b      	b.n	8001014 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	6a39      	ldr	r1, [r7, #32]
 8000f60:	68f8      	ldr	r0, [r7, #12]
 8000f62:	f000 f9e3 	bl	800132c <I2C_WaitOnTXISFlagUntilTimeout>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e07b      	b.n	8001068 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f74:	781a      	ldrb	r2, [r3, #0]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d034      	beq.n	8001014 <HAL_I2C_Master_Transmit+0x184>
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d130      	bne.n	8001014 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2180      	movs	r1, #128	; 0x80
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f000 f975 	bl	80012ac <I2C_WaitOnFlagUntilTimeout>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e04d      	b.n	8001068 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	2bff      	cmp	r3, #255	; 0xff
 8000fd4:	d90e      	bls.n	8000ff4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	22ff      	movs	r2, #255	; 0xff
 8000fda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	8979      	ldrh	r1, [r7, #10]
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fec:	68f8      	ldr	r0, [r7, #12]
 8000fee:	f000 faeb 	bl	80015c8 <I2C_TransferConfig>
 8000ff2:	e00f      	b.n	8001014 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001002:	b2da      	uxtb	r2, r3
 8001004:	8979      	ldrh	r1, [r7, #10]
 8001006:	2300      	movs	r3, #0
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f000 fada 	bl	80015c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001018:	b29b      	uxth	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d19e      	bne.n	8000f5c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	6a39      	ldr	r1, [r7, #32]
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f000 f9c2 	bl	80013ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e01a      	b.n	8001068 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2220      	movs	r2, #32
 8001038:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6859      	ldr	r1, [r3, #4]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_I2C_Master_Transmit+0x1e4>)
 8001046:	400b      	ands	r3, r1
 8001048:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2220      	movs	r2, #32
 800104e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001066:	2302      	movs	r3, #2
  }
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	80002000 	.word	0x80002000
 8001074:	fe00e800 	.word	0xfe00e800

08001078 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af02      	add	r7, sp, #8
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	461a      	mov	r2, r3
 8001084:	460b      	mov	r3, r1
 8001086:	817b      	strh	r3, [r7, #10]
 8001088:	4613      	mov	r3, r2
 800108a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b20      	cmp	r3, #32
 8001096:	f040 80db 	bne.w	8001250 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d101      	bne.n	80010a8 <HAL_I2C_Master_Receive+0x30>
 80010a4:	2302      	movs	r3, #2
 80010a6:	e0d4      	b.n	8001252 <HAL_I2C_Master_Receive+0x1da>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2201      	movs	r2, #1
 80010ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80010b0:	f7ff fb06 	bl	80006c0 <HAL_GetTick>
 80010b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2319      	movs	r3, #25
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f000 f8f2 	bl	80012ac <I2C_WaitOnFlagUntilTimeout>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e0bf      	b.n	8001252 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2222      	movs	r2, #34	; 0x22
 80010d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2210      	movs	r2, #16
 80010de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	893a      	ldrh	r2, [r7, #8]
 80010f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2200      	movs	r2, #0
 80010f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010fe:	b29b      	uxth	r3, r3
 8001100:	2bff      	cmp	r3, #255	; 0xff
 8001102:	d90e      	bls.n	8001122 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800110e:	b2da      	uxtb	r2, r3
 8001110:	8979      	ldrh	r1, [r7, #10]
 8001112:	4b52      	ldr	r3, [pc, #328]	; (800125c <HAL_I2C_Master_Receive+0x1e4>)
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f000 fa54 	bl	80015c8 <I2C_TransferConfig>
 8001120:	e06d      	b.n	80011fe <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001126:	b29a      	uxth	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001130:	b2da      	uxtb	r2, r3
 8001132:	8979      	ldrh	r1, [r7, #10]
 8001134:	4b49      	ldr	r3, [pc, #292]	; (800125c <HAL_I2C_Master_Receive+0x1e4>)
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f000 fa43 	bl	80015c8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001142:	e05c      	b.n	80011fe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	6a39      	ldr	r1, [r7, #32]
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f000 f96b 	bl	8001424 <I2C_WaitOnRXNEFlagUntilTimeout>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e07c      	b.n	8001252 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001174:	3b01      	subs	r3, #1
 8001176:	b29a      	uxth	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001180:	b29b      	uxth	r3, r3
 8001182:	3b01      	subs	r3, #1
 8001184:	b29a      	uxth	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800118e:	b29b      	uxth	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d034      	beq.n	80011fe <HAL_I2C_Master_Receive+0x186>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001198:	2b00      	cmp	r3, #0
 800119a:	d130      	bne.n	80011fe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	2200      	movs	r2, #0
 80011a4:	2180      	movs	r1, #128	; 0x80
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f000 f880 	bl	80012ac <I2C_WaitOnFlagUntilTimeout>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e04d      	b.n	8001252 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	2bff      	cmp	r3, #255	; 0xff
 80011be:	d90e      	bls.n	80011de <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	22ff      	movs	r2, #255	; 0xff
 80011c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	8979      	ldrh	r1, [r7, #10]
 80011ce:	2300      	movs	r3, #0
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f000 f9f6 	bl	80015c8 <I2C_TransferConfig>
 80011dc:	e00f      	b.n	80011fe <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	8979      	ldrh	r1, [r7, #10]
 80011f0:	2300      	movs	r3, #0
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f000 f9e5 	bl	80015c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001202:	b29b      	uxth	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d19d      	bne.n	8001144 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	6a39      	ldr	r1, [r7, #32]
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f000 f8cd 	bl	80013ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e01a      	b.n	8001252 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2220      	movs	r2, #32
 8001222:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6859      	ldr	r1, [r3, #4]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_I2C_Master_Receive+0x1e8>)
 8001230:	400b      	ands	r3, r1
 8001232:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2220      	movs	r2, #32
 8001238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	e000      	b.n	8001252 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001250:	2302      	movs	r3, #2
  }
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	80002400 	.word	0x80002400
 8001260:	fe00e800 	.word	0xfe00e800

08001264 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b02      	cmp	r3, #2
 8001278:	d103      	bne.n	8001282 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2200      	movs	r2, #0
 8001280:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	2b01      	cmp	r3, #1
 800128e:	d007      	beq.n	80012a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	699a      	ldr	r2, [r3, #24]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 0201 	orr.w	r2, r2, #1
 800129e:	619a      	str	r2, [r3, #24]
  }
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	4613      	mov	r3, r2
 80012ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012bc:	e022      	b.n	8001304 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c4:	d01e      	beq.n	8001304 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012c6:	f7ff f9fb 	bl	80006c0 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d302      	bcc.n	80012dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d113      	bne.n	8001304 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e0:	f043 0220 	orr.w	r2, r3, #32
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2220      	movs	r2, #32
 80012ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e00f      	b.n	8001324 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	699a      	ldr	r2, [r3, #24]
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	4013      	ands	r3, r2
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	429a      	cmp	r2, r3
 8001312:	bf0c      	ite	eq
 8001314:	2301      	moveq	r3, #1
 8001316:	2300      	movne	r3, #0
 8001318:	b2db      	uxtb	r3, r3
 800131a:	461a      	mov	r2, r3
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	429a      	cmp	r2, r3
 8001320:	d0cd      	beq.n	80012be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001338:	e02c      	b.n	8001394 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f000 f8dc 	bl	80014fc <I2C_IsAcknowledgeFailed>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e02a      	b.n	80013a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001354:	d01e      	beq.n	8001394 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001356:	f7ff f9b3 	bl	80006c0 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	429a      	cmp	r2, r3
 8001364:	d302      	bcc.n	800136c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d113      	bne.n	8001394 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001370:	f043 0220 	orr.w	r2, r3, #32
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2220      	movs	r2, #32
 800137c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e007      	b.n	80013a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d1cb      	bne.n	800133a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013b8:	e028      	b.n	800140c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f000 f89c 	bl	80014fc <I2C_IsAcknowledgeFailed>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e026      	b.n	800141c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013ce:	f7ff f977 	bl	80006c0 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d302      	bcc.n	80013e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d113      	bne.n	800140c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e8:	f043 0220 	orr.w	r2, r3, #32
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2220      	movs	r2, #32
 80013f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e007      	b.n	800141c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f003 0320 	and.w	r3, r3, #32
 8001416:	2b20      	cmp	r3, #32
 8001418:	d1cf      	bne.n	80013ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001430:	e055      	b.n	80014de <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f000 f860 	bl	80014fc <I2C_IsAcknowledgeFailed>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e053      	b.n	80014ee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0320 	and.w	r3, r3, #32
 8001450:	2b20      	cmp	r3, #32
 8001452:	d129      	bne.n	80014a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	2b04      	cmp	r3, #4
 8001460:	d105      	bne.n	800146e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	e03f      	b.n	80014ee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2220      	movs	r2, #32
 8001474:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6859      	ldr	r1, [r3, #4]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001482:	400b      	ands	r3, r1
 8001484:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2200      	movs	r2, #0
 800148a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2220      	movs	r2, #32
 8001490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e022      	b.n	80014ee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014a8:	f7ff f90a 	bl	80006c0 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d302      	bcc.n	80014be <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10f      	bne.n	80014de <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	f043 0220 	orr.w	r2, r3, #32
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2220      	movs	r2, #32
 80014ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e007      	b.n	80014ee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d1a2      	bne.n	8001432 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	fe00e800 	.word	0xfe00e800

080014fc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f003 0310 	and.w	r3, r3, #16
 8001512:	2b10      	cmp	r3, #16
 8001514:	d151      	bne.n	80015ba <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001516:	e022      	b.n	800155e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151e:	d01e      	beq.n	800155e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001520:	f7ff f8ce 	bl	80006c0 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	429a      	cmp	r2, r3
 800152e:	d302      	bcc.n	8001536 <I2C_IsAcknowledgeFailed+0x3a>
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d113      	bne.n	800155e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f043 0220 	orr.w	r2, r3, #32
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2220      	movs	r2, #32
 8001546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e02e      	b.n	80015bc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0320 	and.w	r3, r3, #32
 8001568:	2b20      	cmp	r3, #32
 800156a:	d1d5      	bne.n	8001518 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2210      	movs	r2, #16
 8001572:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2220      	movs	r2, #32
 800157a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f7ff fe71 	bl	8001264 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <I2C_IsAcknowledgeFailed+0xc8>)
 800158e:	400b      	ands	r3, r1
 8001590:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	f043 0204 	orr.w	r2, r3, #4
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2220      	movs	r2, #32
 80015a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	fe00e800 	.word	0xfe00e800

080015c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	817b      	strh	r3, [r7, #10]
 80015d6:	4613      	mov	r3, r2
 80015d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	0d5b      	lsrs	r3, r3, #21
 80015e4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80015e8:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <I2C_TransferConfig+0x58>)
 80015ea:	430b      	orrs	r3, r1
 80015ec:	43db      	mvns	r3, r3
 80015ee:	ea02 0103 	and.w	r1, r2, r3
 80015f2:	897b      	ldrh	r3, [r7, #10]
 80015f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015f8:	7a7b      	ldrb	r3, [r7, #9]
 80015fa:	041b      	lsls	r3, r3, #16
 80015fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	431a      	orrs	r2, r3
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	431a      	orrs	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001612:	bf00      	nop
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	03ff63ff 	.word	0x03ff63ff

08001624 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b20      	cmp	r3, #32
 8001638:	d138      	bne.n	80016ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001644:	2302      	movs	r3, #2
 8001646:	e032      	b.n	80016ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2224      	movs	r2, #36	; 0x24
 8001654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0201 	bic.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001676:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6819      	ldr	r1, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0201 	orr.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2220      	movs	r2, #32
 800169c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	e000      	b.n	80016ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016ac:	2302      	movs	r3, #2
  }
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b085      	sub	sp, #20
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b20      	cmp	r3, #32
 80016ce:	d139      	bne.n	8001744 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016da:	2302      	movs	r3, #2
 80016dc:	e033      	b.n	8001746 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2224      	movs	r2, #36	; 0x24
 80016ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0201 	bic.w	r2, r2, #1
 80016fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800170c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	4313      	orrs	r3, r2
 8001716:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2220      	movs	r2, #32
 8001734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	e000      	b.n	8001746 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001744:	2302      	movs	r3, #2
  }
}
 8001746:	4618      	mov	r0, r3
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001752:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001754:	b08f      	sub	sp, #60	; 0x3c
 8001756:	af0a      	add	r7, sp, #40	; 0x28
 8001758:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e10a      	b.n	800197a <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d106      	bne.n	800177e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f004 fcaf 	bl	80060dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2203      	movs	r2, #3
 8001782:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f003 f8cc 	bl	8004928 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	687e      	ldr	r6, [r7, #4]
 8001798:	466d      	mov	r5, sp
 800179a:	f106 0410 	add.w	r4, r6, #16
 800179e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80017ae:	1d33      	adds	r3, r6, #4
 80017b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b2:	6838      	ldr	r0, [r7, #0]
 80017b4:	f003 f860 	bl	8004878 <USB_CoreInit>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d005      	beq.n	80017ca <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2202      	movs	r2, #2
 80017c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0d7      	b.n	800197a <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2100      	movs	r1, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f003 f8ba 	bl	800494a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	73fb      	strb	r3, [r7, #15]
 80017da:	e04a      	b.n	8001872 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017dc:	7bfa      	ldrb	r2, [r7, #15]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	1a9b      	subs	r3, r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	333d      	adds	r3, #61	; 0x3d
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017f0:	7bfa      	ldrb	r2, [r7, #15]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	1a9b      	subs	r3, r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	333c      	adds	r3, #60	; 0x3c
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	b298      	uxth	r0, r3
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	1a9b      	subs	r3, r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	3342      	adds	r3, #66	; 0x42
 8001818:	4602      	mov	r2, r0
 800181a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800181c:	7bfa      	ldrb	r2, [r7, #15]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	1a9b      	subs	r3, r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	333f      	adds	r3, #63	; 0x3f
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001830:	7bfa      	ldrb	r2, [r7, #15]
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	1a9b      	subs	r3, r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	3344      	adds	r3, #68	; 0x44
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001844:	7bfa      	ldrb	r2, [r7, #15]
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	1a9b      	subs	r3, r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	3348      	adds	r3, #72	; 0x48
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	1a9b      	subs	r3, r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	3350      	adds	r3, #80	; 0x50
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	3301      	adds	r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	429a      	cmp	r2, r3
 800187a:	d3af      	bcc.n	80017dc <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]
 8001880:	e044      	b.n	800190c <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001882:	7bfa      	ldrb	r2, [r7, #15]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001898:	7bfa      	ldrb	r2, [r7, #15]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	1a9b      	subs	r3, r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80018aa:	7bfa      	ldrb	r2, [r7, #15]
 80018ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	1a9b      	subs	r3, r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018c4:	7bfa      	ldrb	r2, [r7, #15]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	1a9b      	subs	r3, r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018da:	7bfa      	ldrb	r2, [r7, #15]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	1a9b      	subs	r3, r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018f0:	7bfa      	ldrb	r2, [r7, #15]
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	1a9b      	subs	r3, r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	3301      	adds	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	7bfa      	ldrb	r2, [r7, #15]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	429a      	cmp	r2, r3
 8001914:	d3b5      	bcc.n	8001882 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	687e      	ldr	r6, [r7, #4]
 800191e:	466d      	mov	r5, sp
 8001920:	f106 0410 	add.w	r4, r6, #16
 8001924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800192a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800192c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001930:	e885 0003 	stmia.w	r5, {r0, r1}
 8001934:	1d33      	adds	r3, r6, #4
 8001936:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001938:	6838      	ldr	r0, [r7, #0]
 800193a:	f003 f831 	bl	80049a0 <USB_DevInit>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e014      	b.n	800197a <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	2b01      	cmp	r3, #1
 8001966:	d102      	bne.n	800196e <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f80b 	bl	8001984 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f003 f9f1 	bl	8004d5a <USB_DevDisconnect>

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001984 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	10000003 	.word	0x10000003

080019cc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40007000 	.word	0x40007000

080019ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e25c      	b.n	8001ebc <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8087 	beq.w	8001b1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a10:	4b96      	ldr	r3, [pc, #600]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d00c      	beq.n	8001a36 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a1c:	4b93      	ldr	r3, [pc, #588]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d112      	bne.n	8001a4e <HAL_RCC_OscConfig+0x62>
 8001a28:	4b90      	ldr	r3, [pc, #576]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a34:	d10b      	bne.n	8001a4e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a36:	4b8d      	ldr	r3, [pc, #564]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d06c      	beq.n	8001b1c <HAL_RCC_OscConfig+0x130>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d168      	bne.n	8001b1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e236      	b.n	8001ebc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a56:	d106      	bne.n	8001a66 <HAL_RCC_OscConfig+0x7a>
 8001a58:	4b84      	ldr	r3, [pc, #528]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a83      	ldr	r2, [pc, #524]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	e02e      	b.n	8001ac4 <HAL_RCC_OscConfig+0xd8>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x9c>
 8001a6e:	4b7f      	ldr	r3, [pc, #508]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a7e      	ldr	r2, [pc, #504]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b7c      	ldr	r3, [pc, #496]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a7b      	ldr	r2, [pc, #492]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001a80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e01d      	b.n	8001ac4 <HAL_RCC_OscConfig+0xd8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a90:	d10c      	bne.n	8001aac <HAL_RCC_OscConfig+0xc0>
 8001a92:	4b76      	ldr	r3, [pc, #472]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a75      	ldr	r2, [pc, #468]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	4b73      	ldr	r3, [pc, #460]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a72      	ldr	r2, [pc, #456]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	e00b      	b.n	8001ac4 <HAL_RCC_OscConfig+0xd8>
 8001aac:	4b6f      	ldr	r3, [pc, #444]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a6e      	ldr	r2, [pc, #440]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b6c      	ldr	r3, [pc, #432]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a6b      	ldr	r2, [pc, #428]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d013      	beq.n	8001af4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001acc:	f7fe fdf8 	bl	80006c0 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad4:	f7fe fdf4 	bl	80006c0 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b64      	cmp	r3, #100	; 0x64
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e1ea      	b.n	8001ebc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	4b61      	ldr	r3, [pc, #388]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0xe8>
 8001af2:	e014      	b.n	8001b1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af4:	f7fe fde4 	bl	80006c0 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001afc:	f7fe fde0 	bl	80006c0 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	; 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e1d6      	b.n	8001ebc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0e:	4b57      	ldr	r3, [pc, #348]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x110>
 8001b1a:	e000      	b.n	8001b1e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d069      	beq.n	8001bfe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b2a:	4b50      	ldr	r3, [pc, #320]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00b      	beq.n	8001b4e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b36:	4b4d      	ldr	r3, [pc, #308]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d11c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x190>
 8001b42:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d116      	bne.n	8001b7c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d005      	beq.n	8001b66 <HAL_RCC_OscConfig+0x17a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d001      	beq.n	8001b66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e1aa      	b.n	8001ebc <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b66:	4b41      	ldr	r3, [pc, #260]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	493d      	ldr	r1, [pc, #244]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7a:	e040      	b.n	8001bfe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d023      	beq.n	8001bcc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b84:	4b39      	ldr	r3, [pc, #228]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a38      	ldr	r2, [pc, #224]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7fe fd96 	bl	80006c0 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b98:	f7fe fd92 	bl	80006c0 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e188      	b.n	8001ebc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001baa:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4929      	ldr	r1, [pc, #164]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]
 8001bca:	e018      	b.n	8001bfe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bcc:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a26      	ldr	r2, [pc, #152]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001bd2:	f023 0301 	bic.w	r3, r3, #1
 8001bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7fe fd72 	bl	80006c0 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be0:	f7fe fd6e 	bl	80006c0 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e164      	b.n	8001ebc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d038      	beq.n	8001c7c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d019      	beq.n	8001c46 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c12:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c16:	4a15      	ldr	r2, [pc, #84]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1e:	f7fe fd4f 	bl	80006c0 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c26:	f7fe fd4b 	bl	80006c0 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e141      	b.n	8001ebc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x23a>
 8001c44:	e01a      	b.n	8001c7c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c4a:	4a08      	ldr	r2, [pc, #32]	; (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001c4c:	f023 0301 	bic.w	r3, r3, #1
 8001c50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c52:	f7fe fd35 	bl	80006c0 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c5a:	f7fe fd31 	bl	80006c0 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d903      	bls.n	8001c70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e127      	b.n	8001ebc <HAL_RCC_OscConfig+0x4d0>
 8001c6c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c70:	4b94      	ldr	r3, [pc, #592]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1ee      	bne.n	8001c5a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80a4 	beq.w	8001dd2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8a:	4b8e      	ldr	r3, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10d      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	4b8b      	ldr	r3, [pc, #556]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca2:	4b88      	ldr	r3, [pc, #544]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb2:	4b85      	ldr	r3, [pc, #532]	; (8001ec8 <HAL_RCC_OscConfig+0x4dc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d118      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001cbe:	4b82      	ldr	r3, [pc, #520]	; (8001ec8 <HAL_RCC_OscConfig+0x4dc>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a81      	ldr	r2, [pc, #516]	; (8001ec8 <HAL_RCC_OscConfig+0x4dc>)
 8001cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cca:	f7fe fcf9 	bl	80006c0 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001cd2:	f7fe fcf5 	bl	80006c0 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b64      	cmp	r3, #100	; 0x64
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e0eb      	b.n	8001ebc <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce4:	4b78      	ldr	r3, [pc, #480]	; (8001ec8 <HAL_RCC_OscConfig+0x4dc>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d106      	bne.n	8001d06 <HAL_RCC_OscConfig+0x31a>
 8001cf8:	4b72      	ldr	r3, [pc, #456]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfc:	4a71      	ldr	r2, [pc, #452]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6713      	str	r3, [r2, #112]	; 0x70
 8001d04:	e02d      	b.n	8001d62 <HAL_RCC_OscConfig+0x376>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x33c>
 8001d0e:	4b6d      	ldr	r3, [pc, #436]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d12:	4a6c      	ldr	r2, [pc, #432]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1a:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1e:	4a69      	ldr	r2, [pc, #420]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d20:	f023 0304 	bic.w	r3, r3, #4
 8001d24:	6713      	str	r3, [r2, #112]	; 0x70
 8001d26:	e01c      	b.n	8001d62 <HAL_RCC_OscConfig+0x376>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b05      	cmp	r3, #5
 8001d2e:	d10c      	bne.n	8001d4a <HAL_RCC_OscConfig+0x35e>
 8001d30:	4b64      	ldr	r3, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d34:	4a63      	ldr	r2, [pc, #396]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d3c:	4b61      	ldr	r3, [pc, #388]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d40:	4a60      	ldr	r2, [pc, #384]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6713      	str	r3, [r2, #112]	; 0x70
 8001d48:	e00b      	b.n	8001d62 <HAL_RCC_OscConfig+0x376>
 8001d4a:	4b5e      	ldr	r3, [pc, #376]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4e:	4a5d      	ldr	r2, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	6713      	str	r3, [r2, #112]	; 0x70
 8001d56:	4b5b      	ldr	r3, [pc, #364]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5a:	4a5a      	ldr	r2, [pc, #360]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d5c:	f023 0304 	bic.w	r3, r3, #4
 8001d60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d015      	beq.n	8001d96 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6a:	f7fe fca9 	bl	80006c0 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d70:	e00a      	b.n	8001d88 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d72:	f7fe fca5 	bl	80006c0 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e099      	b.n	8001ebc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d88:	4b4e      	ldr	r3, [pc, #312]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0ee      	beq.n	8001d72 <HAL_RCC_OscConfig+0x386>
 8001d94:	e014      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7fe fc93 	bl	80006c0 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f7fe fc8f 	bl	80006c0 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e083      	b.n	8001ebc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db4:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1ee      	bne.n	8001d9e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dc0:	7dfb      	ldrb	r3, [r7, #23]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d105      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc6:	4b3f      	ldr	r3, [pc, #252]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	4a3e      	ldr	r2, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d06f      	beq.n	8001eba <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dda:	4b3a      	ldr	r3, [pc, #232]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d067      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d149      	bne.n	8001e82 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dee:	4b35      	ldr	r3, [pc, #212]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a34      	ldr	r2, [pc, #208]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001df4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfa:	f7fe fc61 	bl	80006c0 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e02:	f7fe fc5d 	bl	80006c0 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e053      	b.n	8001ebc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e14:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f0      	bne.n	8001e02 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69da      	ldr	r2, [r3, #28]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	019b      	lsls	r3, r3, #6
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e36:	085b      	lsrs	r3, r3, #1
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	041b      	lsls	r3, r3, #16
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	061b      	lsls	r3, r3, #24
 8001e44:	4313      	orrs	r3, r2
 8001e46:	4a1f      	ldr	r2, [pc, #124]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001e48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e4c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a1c      	ldr	r2, [pc, #112]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001e54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5a:	f7fe fc31 	bl	80006c0 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e62:	f7fe fc2d 	bl	80006c0 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e023      	b.n	8001ebc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x476>
 8001e80:	e01b      	b.n	8001eba <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a0f      	ldr	r2, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001e88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7fe fc17 	bl	80006c0 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e96:	f7fe fc13 	bl	80006c0 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e009      	b.n	8001ebc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f0      	bne.n	8001e96 <HAL_RCC_OscConfig+0x4aa>
 8001eb4:	e001      	b.n	8001eba <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40007000 	.word	0x40007000

08001ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0ce      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee4:	4b69      	ldr	r3, [pc, #420]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d910      	bls.n	8001f14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef2:	4b66      	ldr	r3, [pc, #408]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 020f 	bic.w	r2, r3, #15
 8001efa:	4964      	ldr	r1, [pc, #400]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b62      	ldr	r3, [pc, #392]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0b6      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d020      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f2c:	4b58      	ldr	r3, [pc, #352]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	4a57      	ldr	r2, [pc, #348]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f44:	4b52      	ldr	r3, [pc, #328]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a51      	ldr	r2, [pc, #324]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f50:	4b4f      	ldr	r3, [pc, #316]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	494c      	ldr	r1, [pc, #304]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d040      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	4b46      	ldr	r3, [pc, #280]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d115      	bne.n	8001fae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e07d      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8e:	4b40      	ldr	r3, [pc, #256]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e071      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9e:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e069      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fae:	4b38      	ldr	r3, [pc, #224]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f023 0203 	bic.w	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4935      	ldr	r1, [pc, #212]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fc0:	f7fe fb7e 	bl	80006c0 <HAL_GetTick>
 8001fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc8:	f7fe fb7a 	bl	80006c0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e051      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	4b2c      	ldr	r3, [pc, #176]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 020c 	and.w	r2, r3, #12
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d1eb      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b26      	ldr	r3, [pc, #152]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d210      	bcs.n	8002020 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b23      	ldr	r3, [pc, #140]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 020f 	bic.w	r2, r3, #15
 8002006:	4921      	ldr	r1, [pc, #132]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b1f      	ldr	r3, [pc, #124]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e030      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800202c:	4b18      	ldr	r3, [pc, #96]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4915      	ldr	r1, [pc, #84]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	4313      	orrs	r3, r2
 800203c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d009      	beq.n	800205e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	490d      	ldr	r1, [pc, #52]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800205e:	f000 f81d 	bl	800209c <HAL_RCC_GetSysClockFreq>
 8002062:	4601      	mov	r1, r0
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	4a09      	ldr	r2, [pc, #36]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8002070:	5cd3      	ldrb	r3, [r2, r3]
 8002072:	fa21 f303 	lsr.w	r3, r1, r3
 8002076:	4a08      	ldr	r2, [pc, #32]	; (8002098 <HAL_RCC_ClockConfig+0x1cc>)
 8002078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800207a:	2000      	movs	r0, #0
 800207c:	f7fe fadc 	bl	8000638 <HAL_InitTick>

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023c00 	.word	0x40023c00
 8002090:	40023800 	.word	0x40023800
 8002094:	08006c14 	.word	0x08006c14
 8002098:	20000008 	.word	0x20000008

0800209c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	2300      	movs	r3, #0
 80020ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020b2:	4b63      	ldr	r3, [pc, #396]	; (8002240 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d007      	beq.n	80020ce <HAL_RCC_GetSysClockFreq+0x32>
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d008      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0x38>
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f040 80b4 	bne.w	8002230 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020c8:	4b5e      	ldr	r3, [pc, #376]	; (8002244 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80020ca:	60bb      	str	r3, [r7, #8]
       break;
 80020cc:	e0b3      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020ce:	4b5e      	ldr	r3, [pc, #376]	; (8002248 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80020d0:	60bb      	str	r3, [r7, #8]
      break;
 80020d2:	e0b0      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020d4:	4b5a      	ldr	r3, [pc, #360]	; (8002240 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020dc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80020de:	4b58      	ldr	r3, [pc, #352]	; (8002240 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d04a      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ea:	4b55      	ldr	r3, [pc, #340]	; (8002240 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	099b      	lsrs	r3, r3, #6
 80020f0:	f04f 0400 	mov.w	r4, #0
 80020f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	ea03 0501 	and.w	r5, r3, r1
 8002100:	ea04 0602 	and.w	r6, r4, r2
 8002104:	4629      	mov	r1, r5
 8002106:	4632      	mov	r2, r6
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	f04f 0400 	mov.w	r4, #0
 8002110:	0154      	lsls	r4, r2, #5
 8002112:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002116:	014b      	lsls	r3, r1, #5
 8002118:	4619      	mov	r1, r3
 800211a:	4622      	mov	r2, r4
 800211c:	1b49      	subs	r1, r1, r5
 800211e:	eb62 0206 	sbc.w	r2, r2, r6
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	f04f 0400 	mov.w	r4, #0
 800212a:	0194      	lsls	r4, r2, #6
 800212c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002130:	018b      	lsls	r3, r1, #6
 8002132:	1a5b      	subs	r3, r3, r1
 8002134:	eb64 0402 	sbc.w	r4, r4, r2
 8002138:	f04f 0100 	mov.w	r1, #0
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	00e2      	lsls	r2, r4, #3
 8002142:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002146:	00d9      	lsls	r1, r3, #3
 8002148:	460b      	mov	r3, r1
 800214a:	4614      	mov	r4, r2
 800214c:	195b      	adds	r3, r3, r5
 800214e:	eb44 0406 	adc.w	r4, r4, r6
 8002152:	f04f 0100 	mov.w	r1, #0
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	0262      	lsls	r2, r4, #9
 800215c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002160:	0259      	lsls	r1, r3, #9
 8002162:	460b      	mov	r3, r1
 8002164:	4614      	mov	r4, r2
 8002166:	4618      	mov	r0, r3
 8002168:	4621      	mov	r1, r4
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f04f 0400 	mov.w	r4, #0
 8002170:	461a      	mov	r2, r3
 8002172:	4623      	mov	r3, r4
 8002174:	f7fe f89c 	bl	80002b0 <__aeabi_uldivmod>
 8002178:	4603      	mov	r3, r0
 800217a:	460c      	mov	r4, r1
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	e049      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002180:	4b2f      	ldr	r3, [pc, #188]	; (8002240 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	099b      	lsrs	r3, r3, #6
 8002186:	f04f 0400 	mov.w	r4, #0
 800218a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	ea03 0501 	and.w	r5, r3, r1
 8002196:	ea04 0602 	and.w	r6, r4, r2
 800219a:	4629      	mov	r1, r5
 800219c:	4632      	mov	r2, r6
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	f04f 0400 	mov.w	r4, #0
 80021a6:	0154      	lsls	r4, r2, #5
 80021a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021ac:	014b      	lsls	r3, r1, #5
 80021ae:	4619      	mov	r1, r3
 80021b0:	4622      	mov	r2, r4
 80021b2:	1b49      	subs	r1, r1, r5
 80021b4:	eb62 0206 	sbc.w	r2, r2, r6
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	f04f 0400 	mov.w	r4, #0
 80021c0:	0194      	lsls	r4, r2, #6
 80021c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021c6:	018b      	lsls	r3, r1, #6
 80021c8:	1a5b      	subs	r3, r3, r1
 80021ca:	eb64 0402 	sbc.w	r4, r4, r2
 80021ce:	f04f 0100 	mov.w	r1, #0
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	00e2      	lsls	r2, r4, #3
 80021d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021dc:	00d9      	lsls	r1, r3, #3
 80021de:	460b      	mov	r3, r1
 80021e0:	4614      	mov	r4, r2
 80021e2:	195b      	adds	r3, r3, r5
 80021e4:	eb44 0406 	adc.w	r4, r4, r6
 80021e8:	f04f 0100 	mov.w	r1, #0
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	02a2      	lsls	r2, r4, #10
 80021f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80021f6:	0299      	lsls	r1, r3, #10
 80021f8:	460b      	mov	r3, r1
 80021fa:	4614      	mov	r4, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	4621      	mov	r1, r4
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f04f 0400 	mov.w	r4, #0
 8002206:	461a      	mov	r2, r3
 8002208:	4623      	mov	r3, r4
 800220a:	f7fe f851 	bl	80002b0 <__aeabi_uldivmod>
 800220e:	4603      	mov	r3, r0
 8002210:	460c      	mov	r4, r1
 8002212:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002214:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	0c1b      	lsrs	r3, r3, #16
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	3301      	adds	r3, #1
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	fbb2 f3f3 	udiv	r3, r2, r3
 800222c:	60bb      	str	r3, [r7, #8]
      break;
 800222e:	e002      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002232:	60bb      	str	r3, [r7, #8]
      break;
 8002234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002236:	68bb      	ldr	r3, [r7, #8]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002240:	40023800 	.word	0x40023800
 8002244:	00f42400 	.word	0x00f42400
 8002248:	007a1200 	.word	0x007a1200

0800224c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <HAL_RCC_GetHCLKFreq+0x14>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000008 	.word	0x20000008

08002264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002268:	f7ff fff0 	bl	800224c <HAL_RCC_GetHCLKFreq>
 800226c:	4601      	mov	r1, r0
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	0a9b      	lsrs	r3, r3, #10
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4a03      	ldr	r2, [pc, #12]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800227a:	5cd3      	ldrb	r3, [r2, r3]
 800227c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40023800 	.word	0x40023800
 8002288:	08006c24 	.word	0x08006c24

0800228c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002290:	f7ff ffdc 	bl	800224c <HAL_RCC_GetHCLKFreq>
 8002294:	4601      	mov	r1, r0
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	0b5b      	lsrs	r3, r3, #13
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	4a03      	ldr	r2, [pc, #12]	; (80022b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022a2:	5cd3      	ldrb	r3, [r2, r3]
 80022a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40023800 	.word	0x40023800
 80022b0:	08006c24 	.word	0x08006c24

080022b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d012      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022dc:	4b69      	ldr	r3, [pc, #420]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	4a68      	ldr	r2, [pc, #416]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022e6:	6093      	str	r3, [r2, #8]
 80022e8:	4b66      	ldr	r3, [pc, #408]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f0:	4964      	ldr	r1, [pc, #400]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80022fe:	2301      	movs	r3, #1
 8002300:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d017      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800230e:	4b5d      	ldr	r3, [pc, #372]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002314:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231c:	4959      	ldr	r1, [pc, #356]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800232c:	d101      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800232e:	2301      	movs	r3, #1
 8002330:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800233a:	2301      	movs	r3, #1
 800233c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d017      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800234a:	4b4e      	ldr	r3, [pc, #312]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800234c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002350:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	494a      	ldr	r1, [pc, #296]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002368:	d101      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800236a:	2301      	movs	r3, #1
 800236c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002376:	2301      	movs	r3, #1
 8002378:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002386:	2301      	movs	r3, #1
 8002388:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0320 	and.w	r3, r3, #32
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 808b 	beq.w	80024ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002398:	4b3a      	ldr	r3, [pc, #232]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	4a39      	ldr	r2, [pc, #228]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a2:	6413      	str	r3, [r2, #64]	; 0x40
 80023a4:	4b37      	ldr	r3, [pc, #220]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023b0:	4b35      	ldr	r3, [pc, #212]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a34      	ldr	r2, [pc, #208]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023bc:	f7fe f980 	bl	80006c0 <HAL_GetTick>
 80023c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c4:	f7fe f97c 	bl	80006c0 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	; 0x64
 80023d0:	d901      	bls.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e355      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023d6:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023e2:	4b28      	ldr	r3, [pc, #160]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d035      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d02e      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002400:	4b20      	ldr	r3, [pc, #128]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002408:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800240a:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240e:	4a1d      	ldr	r2, [pc, #116]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002414:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241a:	4a1a      	ldr	r2, [pc, #104]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002420:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002422:	4a18      	ldr	r2, [pc, #96]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002428:	4b16      	ldr	r3, [pc, #88]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b01      	cmp	r3, #1
 8002432:	d114      	bne.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7fe f944 	bl	80006c0 <HAL_GetTick>
 8002438:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243a:	e00a      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7fe f940 	bl	80006c0 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e317      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0ee      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800246a:	d111      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800247a:	400b      	ands	r3, r1
 800247c:	4901      	ldr	r1, [pc, #4]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
 8002482:	e00b      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002484:	40023800 	.word	0x40023800
 8002488:	40007000 	.word	0x40007000
 800248c:	0ffffcff 	.word	0x0ffffcff
 8002490:	4bb0      	ldr	r3, [pc, #704]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4aaf      	ldr	r2, [pc, #700]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002496:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800249a:	6093      	str	r3, [r2, #8]
 800249c:	4bad      	ldr	r3, [pc, #692]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800249e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a8:	49aa      	ldr	r1, [pc, #680]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d010      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024ba:	4ba6      	ldr	r3, [pc, #664]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024c0:	4aa4      	ldr	r2, [pc, #656]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024ca:	4ba2      	ldr	r3, [pc, #648]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d4:	499f      	ldr	r1, [pc, #636]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024e8:	4b9a      	ldr	r3, [pc, #616]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024f6:	4997      	ldr	r1, [pc, #604]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800250a:	4b92      	ldr	r3, [pc, #584]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800250c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002510:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002518:	498e      	ldr	r1, [pc, #568]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800252c:	4b89      	ldr	r3, [pc, #548]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800252e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002532:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800253a:	4986      	ldr	r1, [pc, #536]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800254e:	4b81      	ldr	r3, [pc, #516]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002554:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255c:	497d      	ldr	r1, [pc, #500]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002570:	4b78      	ldr	r3, [pc, #480]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	f023 0203 	bic.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	4975      	ldr	r1, [pc, #468]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002592:	4b70      	ldr	r3, [pc, #448]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002598:	f023 020c 	bic.w	r2, r3, #12
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a0:	496c      	ldr	r1, [pc, #432]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025b4:	4b67      	ldr	r3, [pc, #412]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	4964      	ldr	r1, [pc, #400]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025d6:	4b5f      	ldr	r3, [pc, #380]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025dc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e4:	495b      	ldr	r1, [pc, #364]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00a      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025f8:	4b56      	ldr	r3, [pc, #344]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	4953      	ldr	r1, [pc, #332]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800261a:	4b4e      	ldr	r3, [pc, #312]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800261c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002620:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	494a      	ldr	r1, [pc, #296]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800263c:	4b45      	ldr	r3, [pc, #276]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002642:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264a:	4942      	ldr	r1, [pc, #264]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800265e:	4b3d      	ldr	r3, [pc, #244]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002664:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266c:	4939      	ldr	r1, [pc, #228]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00a      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002680:	4b34      	ldr	r3, [pc, #208]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002686:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800268e:	4931      	ldr	r1, [pc, #196]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d011      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026a2:	4b2c      	ldr	r3, [pc, #176]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026b0:	4928      	ldr	r1, [pc, #160]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c0:	d101      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80026c2:	2301      	movs	r3, #1
 80026c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026e2:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f0:	4918      	ldr	r1, [pc, #96]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00b      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002704:	4b13      	ldr	r3, [pc, #76]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002714:	490f      	ldr	r1, [pc, #60]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d005      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800272a:	f040 80d8 	bne.w	80028de <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a08      	ldr	r2, [pc, #32]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002734:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800273a:	f7fd ffc1 	bl	80006c0 <HAL_GetTick>
 800273e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002740:	e00a      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002742:	f7fd ffbd 	bl	80006c0 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b64      	cmp	r3, #100	; 0x64
 800274e:	d903      	bls.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e196      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002754:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002758:	4b6c      	ldr	r3, [pc, #432]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1ee      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d021      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002774:	2b00      	cmp	r3, #0
 8002776:	d11d      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002778:	4b64      	ldr	r3, [pc, #400]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800277a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800277e:	0c1b      	lsrs	r3, r3, #16
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002786:	4b61      	ldr	r3, [pc, #388]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800278c:	0e1b      	lsrs	r3, r3, #24
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	019a      	lsls	r2, r3, #6
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	041b      	lsls	r3, r3, #16
 800279e:	431a      	orrs	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	061b      	lsls	r3, r3, #24
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	071b      	lsls	r3, r3, #28
 80027ac:	4957      	ldr	r1, [pc, #348]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d004      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x516>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d02e      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027de:	d129      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027e0:	4b4a      	ldr	r3, [pc, #296]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80027e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027e6:	0c1b      	lsrs	r3, r3, #16
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027ee:	4b47      	ldr	r3, [pc, #284]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80027f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f4:	0f1b      	lsrs	r3, r3, #28
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	019a      	lsls	r2, r3, #6
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	041b      	lsls	r3, r3, #16
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	061b      	lsls	r3, r3, #24
 800280e:	431a      	orrs	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	071b      	lsls	r3, r3, #28
 8002814:	493d      	ldr	r1, [pc, #244]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800281c:	4b3b      	ldr	r3, [pc, #236]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800281e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002822:	f023 021f 	bic.w	r2, r3, #31
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	3b01      	subs	r3, #1
 800282c:	4937      	ldr	r1, [pc, #220]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d01d      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002840:	4b32      	ldr	r3, [pc, #200]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002846:	0e1b      	lsrs	r3, r3, #24
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800284e:	4b2f      	ldr	r3, [pc, #188]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002854:	0f1b      	lsrs	r3, r3, #28
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	019a      	lsls	r2, r3, #6
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	041b      	lsls	r3, r3, #16
 8002868:	431a      	orrs	r2, r3
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	061b      	lsls	r3, r3, #24
 800286e:	431a      	orrs	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	071b      	lsls	r3, r3, #28
 8002874:	4925      	ldr	r1, [pc, #148]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d011      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	019a      	lsls	r2, r3, #6
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	041b      	lsls	r3, r3, #16
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	061b      	lsls	r3, r3, #24
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	071b      	lsls	r3, r3, #28
 80028a4:	4919      	ldr	r1, [pc, #100]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028ac:	4b17      	ldr	r3, [pc, #92]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a16      	ldr	r2, [pc, #88]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b8:	f7fd ff02 	bl	80006c0 <HAL_GetTick>
 80028bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028c0:	f7fd fefe 	bl	80006c0 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e0d7      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	f040 80cd 	bne.w	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a08      	ldr	r2, [pc, #32]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f2:	f7fd fee5 	bl	80006c0 <HAL_GetTick>
 80028f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028f8:	e00a      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028fa:	f7fd fee1 	bl	80006c0 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b64      	cmp	r3, #100	; 0x64
 8002906:	d903      	bls.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e0ba      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800290c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002910:	4b5e      	ldr	r3, [pc, #376]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800291c:	d0ed      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800293a:	2b00      	cmp	r3, #0
 800293c:	d02e      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d12a      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002946:	4b51      	ldr	r3, [pc, #324]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	0c1b      	lsrs	r3, r3, #16
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002954:	4b4d      	ldr	r3, [pc, #308]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295a:	0f1b      	lsrs	r3, r3, #28
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	019a      	lsls	r2, r3, #6
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	041b      	lsls	r3, r3, #16
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	061b      	lsls	r3, r3, #24
 8002974:	431a      	orrs	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	071b      	lsls	r3, r3, #28
 800297a:	4944      	ldr	r1, [pc, #272]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002982:	4b42      	ldr	r3, [pc, #264]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002988:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	3b01      	subs	r3, #1
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	493d      	ldr	r1, [pc, #244]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d022      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029b0:	d11d      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029b2:	4b36      	ldr	r3, [pc, #216]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b8:	0e1b      	lsrs	r3, r3, #24
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029c0:	4b32      	ldr	r3, [pc, #200]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	0f1b      	lsrs	r3, r3, #28
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	019a      	lsls	r2, r3, #6
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	041b      	lsls	r3, r3, #16
 80029da:	431a      	orrs	r2, r3
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	061b      	lsls	r3, r3, #24
 80029e0:	431a      	orrs	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	071b      	lsls	r3, r3, #28
 80029e6:	4929      	ldr	r1, [pc, #164]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d028      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029fa:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80029fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a00:	0e1b      	lsrs	r3, r3, #24
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a08:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	0c1b      	lsrs	r3, r3, #16
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	019a      	lsls	r2, r3, #6
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	041b      	lsls	r3, r3, #16
 8002a20:	431a      	orrs	r2, r3
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	061b      	lsls	r3, r3, #24
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	071b      	lsls	r3, r3, #28
 8002a2e:	4917      	ldr	r1, [pc, #92]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	4911      	ldr	r1, [pc, #68]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0e      	ldr	r2, [pc, #56]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a58:	f7fd fe32 	bl	80006c0 <HAL_GetTick>
 8002a5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a60:	f7fd fe2e 	bl	80006c0 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	; 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e007      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a7e:	d1ef      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3720      	adds	r7, #32
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800

08002a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e01d      	b.n	8002ade <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f003 f98c 	bl	8005dd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3304      	adds	r3, #4
 8002acc:	4619      	mov	r1, r3
 8002ace:	4610      	mov	r0, r2
 8002ad0:	f000 fbc8 	bl	8003264 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <HAL_TIM_Base_Start_IT+0x50>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d00b      	beq.n	8002b2a <HAL_TIM_Base_Start_IT+0x42>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b18:	d007      	beq.n	8002b2a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0201 	orr.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	00010007 	.word	0x00010007

08002b3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e01d      	b.n	8002b8a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f815 	bl	8002b92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3304      	adds	r3, #4
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	f000 fb72 	bl	8003264 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	6839      	ldr	r1, [r7, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 feea 	bl	8003994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <HAL_TIM_PWM_Start+0x7c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d004      	beq.n	8002bd4 <HAL_TIM_PWM_Start+0x2c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a16      	ldr	r2, [pc, #88]	; (8002c28 <HAL_TIM_PWM_Start+0x80>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d101      	bne.n	8002bd8 <HAL_TIM_PWM_Start+0x30>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <HAL_TIM_PWM_Start+0x32>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <HAL_TIM_PWM_Start+0x84>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b06      	cmp	r3, #6
 8002bfe:	d00b      	beq.n	8002c18 <HAL_TIM_PWM_Start+0x70>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c06:	d007      	beq.n	8002c18 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40010000 	.word	0x40010000
 8002c28:	40010400 	.word	0x40010400
 8002c2c:	00010007 	.word	0x00010007

08002c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d122      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d11b      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0202 	mvn.w	r2, #2
 8002c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fad8 	bl	8003228 <HAL_TIM_IC_CaptureCallback>
 8002c78:	e005      	b.n	8002c86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 faca 	bl	8003214 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fadb 	bl	800323c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d122      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d11b      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0204 	mvn.w	r2, #4
 8002cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 faae 	bl	8003228 <HAL_TIM_IC_CaptureCallback>
 8002ccc:	e005      	b.n	8002cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 faa0 	bl	8003214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fab1 	bl	800323c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d122      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d11b      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0208 	mvn.w	r2, #8
 8002d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2204      	movs	r2, #4
 8002d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fa84 	bl	8003228 <HAL_TIM_IC_CaptureCallback>
 8002d20:	e005      	b.n	8002d2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fa76 	bl	8003214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fa87 	bl	800323c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	2b10      	cmp	r3, #16
 8002d40:	d122      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	d11b      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0210 	mvn.w	r2, #16
 8002d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fa5a 	bl	8003228 <HAL_TIM_IC_CaptureCallback>
 8002d74:	e005      	b.n	8002d82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fa4c 	bl	8003214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fa5d 	bl	800323c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d10e      	bne.n	8002db4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d107      	bne.n	8002db4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0201 	mvn.w	r2, #1
 8002dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f002 fdfc 	bl	80059ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbe:	2b80      	cmp	r3, #128	; 0x80
 8002dc0:	d10e      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	2b80      	cmp	r3, #128	; 0x80
 8002dce:	d107      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fe66 	bl	8003aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dee:	d10e      	bne.n	8002e0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfa:	2b80      	cmp	r3, #128	; 0x80
 8002dfc:	d107      	bne.n	8002e0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fe59 	bl	8003ac0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e18:	2b40      	cmp	r3, #64	; 0x40
 8002e1a:	d10e      	bne.n	8002e3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	d107      	bne.n	8002e3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 fa0b 	bl	8003250 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	d10e      	bne.n	8002e66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	d107      	bne.n	8002e66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f06f 0220 	mvn.w	r2, #32
 8002e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fe19 	bl	8003a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e105      	b.n	8003096 <HAL_TIM_PWM_ConfigChannel+0x226>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2202      	movs	r2, #2
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b14      	cmp	r3, #20
 8002e9e:	f200 80f0 	bhi.w	8003082 <HAL_TIM_PWM_ConfigChannel+0x212>
 8002ea2:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea8:	08002efd 	.word	0x08002efd
 8002eac:	08003083 	.word	0x08003083
 8002eb0:	08003083 	.word	0x08003083
 8002eb4:	08003083 	.word	0x08003083
 8002eb8:	08002f3d 	.word	0x08002f3d
 8002ebc:	08003083 	.word	0x08003083
 8002ec0:	08003083 	.word	0x08003083
 8002ec4:	08003083 	.word	0x08003083
 8002ec8:	08002f7f 	.word	0x08002f7f
 8002ecc:	08003083 	.word	0x08003083
 8002ed0:	08003083 	.word	0x08003083
 8002ed4:	08003083 	.word	0x08003083
 8002ed8:	08002fbf 	.word	0x08002fbf
 8002edc:	08003083 	.word	0x08003083
 8002ee0:	08003083 	.word	0x08003083
 8002ee4:	08003083 	.word	0x08003083
 8002ee8:	08003001 	.word	0x08003001
 8002eec:	08003083 	.word	0x08003083
 8002ef0:	08003083 	.word	0x08003083
 8002ef4:	08003083 	.word	0x08003083
 8002ef8:	08003041 	.word	0x08003041
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68b9      	ldr	r1, [r7, #8]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fa4e 	bl	80033a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699a      	ldr	r2, [r3, #24]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0208 	orr.w	r2, r2, #8
 8002f16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699a      	ldr	r2, [r3, #24]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0204 	bic.w	r2, r2, #4
 8002f26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6999      	ldr	r1, [r3, #24]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	691a      	ldr	r2, [r3, #16]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	619a      	str	r2, [r3, #24]
      break;
 8002f3a:	e0a3      	b.n	8003084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 faa0 	bl	8003488 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6999      	ldr	r1, [r3, #24]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	021a      	lsls	r2, r3, #8
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	619a      	str	r2, [r3, #24]
      break;
 8002f7c:	e082      	b.n	8003084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68b9      	ldr	r1, [r7, #8]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 faf7 	bl	8003578 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69da      	ldr	r2, [r3, #28]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0208 	orr.w	r2, r2, #8
 8002f98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0204 	bic.w	r2, r2, #4
 8002fa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69d9      	ldr	r1, [r3, #28]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	61da      	str	r2, [r3, #28]
      break;
 8002fbc:	e062      	b.n	8003084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fb4d 	bl	8003664 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	69da      	ldr	r2, [r3, #28]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69da      	ldr	r2, [r3, #28]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69d9      	ldr	r1, [r3, #28]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	021a      	lsls	r2, r3, #8
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	61da      	str	r2, [r3, #28]
      break;
 8002ffe:	e041      	b.n	8003084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fb84 	bl	8003714 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0208 	orr.w	r2, r2, #8
 800301a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0204 	bic.w	r2, r2, #4
 800302a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800303e:	e021      	b.n	8003084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68b9      	ldr	r1, [r7, #8]
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fbb6 	bl	80037b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800305a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800306a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	021a      	lsls	r2, r3, #8
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003080:	e000      	b.n	8003084 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003082:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop

080030a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_TIM_ConfigClockSource+0x18>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e0a6      	b.n	8003206 <HAL_TIM_ConfigClockSource+0x166>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4b4f      	ldr	r3, [pc, #316]	; (8003210 <HAL_TIM_ConfigClockSource+0x170>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b40      	cmp	r3, #64	; 0x40
 80030ee:	d067      	beq.n	80031c0 <HAL_TIM_ConfigClockSource+0x120>
 80030f0:	2b40      	cmp	r3, #64	; 0x40
 80030f2:	d80b      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x6c>
 80030f4:	2b10      	cmp	r3, #16
 80030f6:	d073      	beq.n	80031e0 <HAL_TIM_ConfigClockSource+0x140>
 80030f8:	2b10      	cmp	r3, #16
 80030fa:	d802      	bhi.n	8003102 <HAL_TIM_ConfigClockSource+0x62>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d06f      	beq.n	80031e0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003100:	e078      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003102:	2b20      	cmp	r3, #32
 8003104:	d06c      	beq.n	80031e0 <HAL_TIM_ConfigClockSource+0x140>
 8003106:	2b30      	cmp	r3, #48	; 0x30
 8003108:	d06a      	beq.n	80031e0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800310a:	e073      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800310c:	2b70      	cmp	r3, #112	; 0x70
 800310e:	d00d      	beq.n	800312c <HAL_TIM_ConfigClockSource+0x8c>
 8003110:	2b70      	cmp	r3, #112	; 0x70
 8003112:	d804      	bhi.n	800311e <HAL_TIM_ConfigClockSource+0x7e>
 8003114:	2b50      	cmp	r3, #80	; 0x50
 8003116:	d033      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0xe0>
 8003118:	2b60      	cmp	r3, #96	; 0x60
 800311a:	d041      	beq.n	80031a0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800311c:	e06a      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003122:	d066      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x152>
 8003124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003128:	d017      	beq.n	800315a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800312a:	e063      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6899      	ldr	r1, [r3, #8]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f000 fc0a 	bl	8003954 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800314e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	609a      	str	r2, [r3, #8]
      break;
 8003158:	e04c      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6899      	ldr	r1, [r3, #8]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f000 fbf3 	bl	8003954 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800317c:	609a      	str	r2, [r3, #8]
      break;
 800317e:	e039      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	461a      	mov	r2, r3
 800318e:	f000 fb67 	bl	8003860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2150      	movs	r1, #80	; 0x50
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fbc0 	bl	800391e <TIM_ITRx_SetConfig>
      break;
 800319e:	e029      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	461a      	mov	r2, r3
 80031ae:	f000 fb86 	bl	80038be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2160      	movs	r1, #96	; 0x60
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fbb0 	bl	800391e <TIM_ITRx_SetConfig>
      break;
 80031be:	e019      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	461a      	mov	r2, r3
 80031ce:	f000 fb47 	bl	8003860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2140      	movs	r1, #64	; 0x40
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fba0 	bl	800391e <TIM_ITRx_SetConfig>
      break;
 80031de:	e009      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4619      	mov	r1, r3
 80031ea:	4610      	mov	r0, r2
 80031ec:	f000 fb97 	bl	800391e <TIM_ITRx_SetConfig>
      break;
 80031f0:	e000      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80031f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	fffeff88 	.word	0xfffeff88

08003214 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a40      	ldr	r2, [pc, #256]	; (8003378 <TIM_Base_SetConfig+0x114>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d013      	beq.n	80032a4 <TIM_Base_SetConfig+0x40>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003282:	d00f      	beq.n	80032a4 <TIM_Base_SetConfig+0x40>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a3d      	ldr	r2, [pc, #244]	; (800337c <TIM_Base_SetConfig+0x118>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00b      	beq.n	80032a4 <TIM_Base_SetConfig+0x40>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a3c      	ldr	r2, [pc, #240]	; (8003380 <TIM_Base_SetConfig+0x11c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d007      	beq.n	80032a4 <TIM_Base_SetConfig+0x40>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a3b      	ldr	r2, [pc, #236]	; (8003384 <TIM_Base_SetConfig+0x120>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d003      	beq.n	80032a4 <TIM_Base_SetConfig+0x40>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a3a      	ldr	r2, [pc, #232]	; (8003388 <TIM_Base_SetConfig+0x124>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d108      	bne.n	80032b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a2f      	ldr	r2, [pc, #188]	; (8003378 <TIM_Base_SetConfig+0x114>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d02b      	beq.n	8003316 <TIM_Base_SetConfig+0xb2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c4:	d027      	beq.n	8003316 <TIM_Base_SetConfig+0xb2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a2c      	ldr	r2, [pc, #176]	; (800337c <TIM_Base_SetConfig+0x118>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d023      	beq.n	8003316 <TIM_Base_SetConfig+0xb2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a2b      	ldr	r2, [pc, #172]	; (8003380 <TIM_Base_SetConfig+0x11c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01f      	beq.n	8003316 <TIM_Base_SetConfig+0xb2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a2a      	ldr	r2, [pc, #168]	; (8003384 <TIM_Base_SetConfig+0x120>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01b      	beq.n	8003316 <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a29      	ldr	r2, [pc, #164]	; (8003388 <TIM_Base_SetConfig+0x124>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d017      	beq.n	8003316 <TIM_Base_SetConfig+0xb2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a28      	ldr	r2, [pc, #160]	; (800338c <TIM_Base_SetConfig+0x128>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d013      	beq.n	8003316 <TIM_Base_SetConfig+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a27      	ldr	r2, [pc, #156]	; (8003390 <TIM_Base_SetConfig+0x12c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00f      	beq.n	8003316 <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a26      	ldr	r2, [pc, #152]	; (8003394 <TIM_Base_SetConfig+0x130>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00b      	beq.n	8003316 <TIM_Base_SetConfig+0xb2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a25      	ldr	r2, [pc, #148]	; (8003398 <TIM_Base_SetConfig+0x134>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d007      	beq.n	8003316 <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a24      	ldr	r2, [pc, #144]	; (800339c <TIM_Base_SetConfig+0x138>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d003      	beq.n	8003316 <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a23      	ldr	r2, [pc, #140]	; (80033a0 <TIM_Base_SetConfig+0x13c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d108      	bne.n	8003328 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <TIM_Base_SetConfig+0x114>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d003      	beq.n	800335c <TIM_Base_SetConfig+0xf8>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a0c      	ldr	r2, [pc, #48]	; (8003388 <TIM_Base_SetConfig+0x124>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d103      	bne.n	8003364 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	615a      	str	r2, [r3, #20]
}
 800336a:	bf00      	nop
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40010000 	.word	0x40010000
 800337c:	40000400 	.word	0x40000400
 8003380:	40000800 	.word	0x40000800
 8003384:	40000c00 	.word	0x40000c00
 8003388:	40010400 	.word	0x40010400
 800338c:	40014000 	.word	0x40014000
 8003390:	40014400 	.word	0x40014400
 8003394:	40014800 	.word	0x40014800
 8003398:	40001800 	.word	0x40001800
 800339c:	40001c00 	.word	0x40001c00
 80033a0:	40002000 	.word	0x40002000

080033a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	f023 0201 	bic.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4b2b      	ldr	r3, [pc, #172]	; (800347c <TIM_OC1_SetConfig+0xd8>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0303 	bic.w	r3, r3, #3
 80033da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f023 0302 	bic.w	r3, r3, #2
 80033ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a21      	ldr	r2, [pc, #132]	; (8003480 <TIM_OC1_SetConfig+0xdc>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d003      	beq.n	8003408 <TIM_OC1_SetConfig+0x64>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a20      	ldr	r2, [pc, #128]	; (8003484 <TIM_OC1_SetConfig+0xe0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d10c      	bne.n	8003422 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f023 0308 	bic.w	r3, r3, #8
 800340e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f023 0304 	bic.w	r3, r3, #4
 8003420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a16      	ldr	r2, [pc, #88]	; (8003480 <TIM_OC1_SetConfig+0xdc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d003      	beq.n	8003432 <TIM_OC1_SetConfig+0x8e>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a15      	ldr	r2, [pc, #84]	; (8003484 <TIM_OC1_SetConfig+0xe0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d111      	bne.n	8003456 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	621a      	str	r2, [r3, #32]
}
 8003470:	bf00      	nop
 8003472:	371c      	adds	r7, #28
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	fffeff8f 	.word	0xfffeff8f
 8003480:	40010000 	.word	0x40010000
 8003484:	40010400 	.word	0x40010400

08003488 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	f023 0210 	bic.w	r2, r3, #16
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4b2e      	ldr	r3, [pc, #184]	; (800356c <TIM_OC2_SetConfig+0xe4>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f023 0320 	bic.w	r3, r3, #32
 80034d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a23      	ldr	r2, [pc, #140]	; (8003570 <TIM_OC2_SetConfig+0xe8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d003      	beq.n	80034f0 <TIM_OC2_SetConfig+0x68>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a22      	ldr	r2, [pc, #136]	; (8003574 <TIM_OC2_SetConfig+0xec>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d10d      	bne.n	800350c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4313      	orrs	r3, r2
 8003502:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800350a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a18      	ldr	r2, [pc, #96]	; (8003570 <TIM_OC2_SetConfig+0xe8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d003      	beq.n	800351c <TIM_OC2_SetConfig+0x94>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a17      	ldr	r2, [pc, #92]	; (8003574 <TIM_OC2_SetConfig+0xec>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d113      	bne.n	8003544 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003522:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800352a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	621a      	str	r2, [r3, #32]
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	feff8fff 	.word	0xfeff8fff
 8003570:	40010000 	.word	0x40010000
 8003574:	40010400 	.word	0x40010400

08003578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4b2d      	ldr	r3, [pc, #180]	; (8003658 <TIM_OC3_SetConfig+0xe0>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0303 	bic.w	r3, r3, #3
 80035ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a22      	ldr	r2, [pc, #136]	; (800365c <TIM_OC3_SetConfig+0xe4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d003      	beq.n	80035de <TIM_OC3_SetConfig+0x66>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a21      	ldr	r2, [pc, #132]	; (8003660 <TIM_OC3_SetConfig+0xe8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d10d      	bne.n	80035fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a17      	ldr	r2, [pc, #92]	; (800365c <TIM_OC3_SetConfig+0xe4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d003      	beq.n	800360a <TIM_OC3_SetConfig+0x92>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a16      	ldr	r2, [pc, #88]	; (8003660 <TIM_OC3_SetConfig+0xe8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d113      	bne.n	8003632 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	621a      	str	r2, [r3, #32]
}
 800364c:	bf00      	nop
 800364e:	371c      	adds	r7, #28
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	fffeff8f 	.word	0xfffeff8f
 800365c:	40010000 	.word	0x40010000
 8003660:	40010400 	.word	0x40010400

08003664 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4b1e      	ldr	r3, [pc, #120]	; (8003708 <TIM_OC4_SetConfig+0xa4>)
 8003690:	4013      	ands	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	031b      	lsls	r3, r3, #12
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a13      	ldr	r2, [pc, #76]	; (800370c <TIM_OC4_SetConfig+0xa8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d003      	beq.n	80036cc <TIM_OC4_SetConfig+0x68>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a12      	ldr	r2, [pc, #72]	; (8003710 <TIM_OC4_SetConfig+0xac>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d109      	bne.n	80036e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	019b      	lsls	r3, r3, #6
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	621a      	str	r2, [r3, #32]
}
 80036fa:	bf00      	nop
 80036fc:	371c      	adds	r7, #28
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	feff8fff 	.word	0xfeff8fff
 800370c:	40010000 	.word	0x40010000
 8003710:	40010400 	.word	0x40010400

08003714 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4b1b      	ldr	r3, [pc, #108]	; (80037ac <TIM_OC5_SetConfig+0x98>)
 8003740:	4013      	ands	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003754:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	041b      	lsls	r3, r3, #16
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a12      	ldr	r2, [pc, #72]	; (80037b0 <TIM_OC5_SetConfig+0x9c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d003      	beq.n	8003772 <TIM_OC5_SetConfig+0x5e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a11      	ldr	r2, [pc, #68]	; (80037b4 <TIM_OC5_SetConfig+0xa0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d109      	bne.n	8003786 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003778:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	021b      	lsls	r3, r3, #8
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	621a      	str	r2, [r3, #32]
}
 80037a0:	bf00      	nop
 80037a2:	371c      	adds	r7, #28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	fffeff8f 	.word	0xfffeff8f
 80037b0:	40010000 	.word	0x40010000
 80037b4:	40010400 	.word	0x40010400

080037b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4b1c      	ldr	r3, [pc, #112]	; (8003854 <TIM_OC6_SetConfig+0x9c>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	051b      	lsls	r3, r3, #20
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a13      	ldr	r2, [pc, #76]	; (8003858 <TIM_OC6_SetConfig+0xa0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <TIM_OC6_SetConfig+0x60>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a12      	ldr	r2, [pc, #72]	; (800385c <TIM_OC6_SetConfig+0xa4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d109      	bne.n	800382c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800381e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	029b      	lsls	r3, r3, #10
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	621a      	str	r2, [r3, #32]
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	feff8fff 	.word	0xfeff8fff
 8003858:	40010000 	.word	0x40010000
 800385c:	40010400 	.word	0x40010400

08003860 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	f023 0201 	bic.w	r2, r3, #1
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800388a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f023 030a 	bic.w	r3, r3, #10
 800389c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	621a      	str	r2, [r3, #32]
}
 80038b2:	bf00      	nop
 80038b4:	371c      	adds	r7, #28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038be:	b480      	push	{r7}
 80038c0:	b087      	sub	sp, #28
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	f023 0210 	bic.w	r2, r3, #16
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	031b      	lsls	r3, r3, #12
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	621a      	str	r2, [r3, #32]
}
 8003912:	bf00      	nop
 8003914:	371c      	adds	r7, #28
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800391e:	b480      	push	{r7}
 8003920:	b085      	sub	sp, #20
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4313      	orrs	r3, r2
 800393c:	f043 0307 	orr.w	r3, r3, #7
 8003940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	609a      	str	r2, [r3, #8]
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800396e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	021a      	lsls	r2, r3, #8
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	431a      	orrs	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4313      	orrs	r3, r2
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	609a      	str	r2, [r3, #8]
}
 8003988:	bf00      	nop
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 031f 	and.w	r3, r3, #31
 80039a6:	2201      	movs	r2, #1
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a1a      	ldr	r2, [r3, #32]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	401a      	ands	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a1a      	ldr	r2, [r3, #32]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f003 031f 	and.w	r3, r3, #31
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	fa01 f303 	lsl.w	r3, r1, r3
 80039cc:	431a      	orrs	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	621a      	str	r2, [r3, #32]
}
 80039d2:	bf00      	nop
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
	...

080039e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e045      	b.n	8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1c      	ldr	r2, [pc, #112]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d004      	beq.n	8003a2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1b      	ldr	r2, [pc, #108]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d108      	bne.n	8003a3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a56:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	40010000 	.word	0x40010000
 8003a94:	40010400 	.word	0x40010400

08003a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e040      	b.n	8003b68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f002 fa46 	bl	8005f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2224      	movs	r2, #36	; 0x24
 8003b00:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0201 	bic.w	r2, r2, #1
 8003b10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f9fe 	bl	8003f14 <UART_SetConfig>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e022      	b.n	8003b68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fc96 	bl	800445c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b4e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fd1d 	bl	80045a0 <UART_CheckIdleState>
 8003b66:	4603      	mov	r3, r0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b82:	2b20      	cmp	r3, #32
 8003b84:	f040 808a 	bne.w	8003c9c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_UART_Receive_IT+0x24>
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e082      	b.n	8003c9e <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_UART_Receive_IT+0x36>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e07b      	b.n	8003c9e <HAL_UART_Receive_IT+0x12e>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	88fa      	ldrh	r2, [r7, #6]
 8003bb8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	88fa      	ldrh	r2, [r7, #6]
 8003bc0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd2:	d10e      	bne.n	8003bf2 <HAL_UART_Receive_IT+0x82>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d105      	bne.n	8003be8 <HAL_UART_Receive_IT+0x78>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003be2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003be6:	e02d      	b.n	8003c44 <HAL_UART_Receive_IT+0xd4>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	22ff      	movs	r2, #255	; 0xff
 8003bec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bf0:	e028      	b.n	8003c44 <HAL_UART_Receive_IT+0xd4>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10d      	bne.n	8003c16 <HAL_UART_Receive_IT+0xa6>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d104      	bne.n	8003c0c <HAL_UART_Receive_IT+0x9c>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	22ff      	movs	r2, #255	; 0xff
 8003c06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c0a:	e01b      	b.n	8003c44 <HAL_UART_Receive_IT+0xd4>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	227f      	movs	r2, #127	; 0x7f
 8003c10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c14:	e016      	b.n	8003c44 <HAL_UART_Receive_IT+0xd4>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c1e:	d10d      	bne.n	8003c3c <HAL_UART_Receive_IT+0xcc>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d104      	bne.n	8003c32 <HAL_UART_Receive_IT+0xc2>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	227f      	movs	r2, #127	; 0x7f
 8003c2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c30:	e008      	b.n	8003c44 <HAL_UART_Receive_IT+0xd4>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	223f      	movs	r2, #63	; 0x3f
 8003c36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c3a:	e003      	b.n	8003c44 <HAL_UART_Receive_IT+0xd4>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2222      	movs	r2, #34	; 0x22
 8003c4e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c68:	d107      	bne.n	8003c7a <HAL_UART_Receive_IT+0x10a>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d103      	bne.n	8003c7a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4a0d      	ldr	r2, [pc, #52]	; (8003cac <HAL_UART_Receive_IT+0x13c>)
 8003c76:	661a      	str	r2, [r3, #96]	; 0x60
 8003c78:	e002      	b.n	8003c80 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4a0c      	ldr	r2, [pc, #48]	; (8003cb0 <HAL_UART_Receive_IT+0x140>)
 8003c7e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003c96:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e000      	b.n	8003c9e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003c9c:	2302      	movs	r3, #2
  }
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	080047d3 	.word	0x080047d3
 8003cb0:	0800472d 	.word	0x0800472d

08003cb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d113      	bne.n	8003d0a <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00e      	beq.n	8003d0a <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80eb 	beq.w	8003ed6 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	4798      	blx	r3
      }
      return;
 8003d08:	e0e5      	b.n	8003ed6 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80c0 	beq.w	8003e92 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d105      	bne.n	8003d28 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 80b5 	beq.w	8003e92 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00e      	beq.n	8003d50 <HAL_UART_IRQHandler+0x9c>
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d009      	beq.n	8003d50 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2201      	movs	r2, #1
 8003d42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d48:	f043 0201 	orr.w	r2, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00e      	beq.n	8003d78 <HAL_UART_IRQHandler+0xc4>
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d009      	beq.n	8003d78 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d70:	f043 0204 	orr.w	r2, r3, #4
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00e      	beq.n	8003da0 <HAL_UART_IRQHandler+0xec>
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d009      	beq.n	8003da0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2204      	movs	r2, #4
 8003d92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d98:	f043 0202 	orr.w	r2, r3, #2
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d013      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d104      	bne.n	8003dbe <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d009      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2208      	movs	r2, #8
 8003dc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dca:	f043 0208 	orr.w	r2, r3, #8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d07f      	beq.n	8003eda <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00c      	beq.n	8003dfe <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d007      	beq.n	8003dfe <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e02:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0e:	2b40      	cmp	r3, #64	; 0x40
 8003e10:	d004      	beq.n	8003e1c <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d031      	beq.n	8003e80 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fc36 	bl	800468e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2c:	2b40      	cmp	r3, #64	; 0x40
 8003e2e:	d123      	bne.n	8003e78 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e3e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d013      	beq.n	8003e70 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e4c:	4a26      	ldr	r2, [pc, #152]	; (8003ee8 <HAL_UART_IRQHandler+0x234>)
 8003e4e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fc fd72 	bl	800093e <HAL_DMA_Abort_IT>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d016      	beq.n	8003e8e <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6e:	e00e      	b.n	8003e8e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f845 	bl	8003f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e76:	e00a      	b.n	8003e8e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f841 	bl	8003f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e7e:	e006      	b.n	8003e8e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f83d 	bl	8003f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003e8c:	e025      	b.n	8003eda <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e8e:	bf00      	nop
    return;
 8003e90:	e023      	b.n	8003eda <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00d      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d008      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d017      	beq.n	8003ede <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	4798      	blx	r3
    }
    return;
 8003eb6:	e012      	b.n	8003ede <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00e      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x22c>
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d009      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fc14 	bl	80046fa <UART_EndTransmit_IT>
    return;
 8003ed2:	bf00      	nop
 8003ed4:	e004      	b.n	8003ee0 <HAL_UART_IRQHandler+0x22c>
      return;
 8003ed6:	bf00      	nop
 8003ed8:	e002      	b.n	8003ee0 <HAL_UART_IRQHandler+0x22c>
    return;
 8003eda:	bf00      	nop
 8003edc:	e000      	b.n	8003ee0 <HAL_UART_IRQHandler+0x22c>
    return;
 8003ede:	bf00      	nop
  }

}
 8003ee0:	3720      	adds	r7, #32
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	080046cf 	.word	0x080046cf

08003eec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4bb1      	ldr	r3, [pc, #708]	; (8004208 <UART_SetConfig+0x2f4>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6812      	ldr	r2, [r2, #0]
 8003f4a:	6939      	ldr	r1, [r7, #16]
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a9f      	ldr	r2, [pc, #636]	; (800420c <UART_SetConfig+0x2f8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d121      	bne.n	8003fd8 <UART_SetConfig+0xc4>
 8003f94:	4b9e      	ldr	r3, [pc, #632]	; (8004210 <UART_SetConfig+0x2fc>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d816      	bhi.n	8003fd0 <UART_SetConfig+0xbc>
 8003fa2:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <UART_SetConfig+0x94>)
 8003fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa8:	08003fb9 	.word	0x08003fb9
 8003fac:	08003fc5 	.word	0x08003fc5
 8003fb0:	08003fbf 	.word	0x08003fbf
 8003fb4:	08003fcb 	.word	0x08003fcb
 8003fb8:	2301      	movs	r3, #1
 8003fba:	77fb      	strb	r3, [r7, #31]
 8003fbc:	e151      	b.n	8004262 <UART_SetConfig+0x34e>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	77fb      	strb	r3, [r7, #31]
 8003fc2:	e14e      	b.n	8004262 <UART_SetConfig+0x34e>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	77fb      	strb	r3, [r7, #31]
 8003fc8:	e14b      	b.n	8004262 <UART_SetConfig+0x34e>
 8003fca:	2308      	movs	r3, #8
 8003fcc:	77fb      	strb	r3, [r7, #31]
 8003fce:	e148      	b.n	8004262 <UART_SetConfig+0x34e>
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	77fb      	strb	r3, [r7, #31]
 8003fd4:	bf00      	nop
 8003fd6:	e144      	b.n	8004262 <UART_SetConfig+0x34e>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a8d      	ldr	r2, [pc, #564]	; (8004214 <UART_SetConfig+0x300>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d134      	bne.n	800404c <UART_SetConfig+0x138>
 8003fe2:	4b8b      	ldr	r3, [pc, #556]	; (8004210 <UART_SetConfig+0x2fc>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe8:	f003 030c 	and.w	r3, r3, #12
 8003fec:	2b0c      	cmp	r3, #12
 8003fee:	d829      	bhi.n	8004044 <UART_SetConfig+0x130>
 8003ff0:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <UART_SetConfig+0xe4>)
 8003ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff6:	bf00      	nop
 8003ff8:	0800402d 	.word	0x0800402d
 8003ffc:	08004045 	.word	0x08004045
 8004000:	08004045 	.word	0x08004045
 8004004:	08004045 	.word	0x08004045
 8004008:	08004039 	.word	0x08004039
 800400c:	08004045 	.word	0x08004045
 8004010:	08004045 	.word	0x08004045
 8004014:	08004045 	.word	0x08004045
 8004018:	08004033 	.word	0x08004033
 800401c:	08004045 	.word	0x08004045
 8004020:	08004045 	.word	0x08004045
 8004024:	08004045 	.word	0x08004045
 8004028:	0800403f 	.word	0x0800403f
 800402c:	2300      	movs	r3, #0
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e117      	b.n	8004262 <UART_SetConfig+0x34e>
 8004032:	2302      	movs	r3, #2
 8004034:	77fb      	strb	r3, [r7, #31]
 8004036:	e114      	b.n	8004262 <UART_SetConfig+0x34e>
 8004038:	2304      	movs	r3, #4
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	e111      	b.n	8004262 <UART_SetConfig+0x34e>
 800403e:	2308      	movs	r3, #8
 8004040:	77fb      	strb	r3, [r7, #31]
 8004042:	e10e      	b.n	8004262 <UART_SetConfig+0x34e>
 8004044:	2310      	movs	r3, #16
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	bf00      	nop
 800404a:	e10a      	b.n	8004262 <UART_SetConfig+0x34e>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a71      	ldr	r2, [pc, #452]	; (8004218 <UART_SetConfig+0x304>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d120      	bne.n	8004098 <UART_SetConfig+0x184>
 8004056:	4b6e      	ldr	r3, [pc, #440]	; (8004210 <UART_SetConfig+0x2fc>)
 8004058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004060:	2b10      	cmp	r3, #16
 8004062:	d00f      	beq.n	8004084 <UART_SetConfig+0x170>
 8004064:	2b10      	cmp	r3, #16
 8004066:	d802      	bhi.n	800406e <UART_SetConfig+0x15a>
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <UART_SetConfig+0x164>
 800406c:	e010      	b.n	8004090 <UART_SetConfig+0x17c>
 800406e:	2b20      	cmp	r3, #32
 8004070:	d005      	beq.n	800407e <UART_SetConfig+0x16a>
 8004072:	2b30      	cmp	r3, #48	; 0x30
 8004074:	d009      	beq.n	800408a <UART_SetConfig+0x176>
 8004076:	e00b      	b.n	8004090 <UART_SetConfig+0x17c>
 8004078:	2300      	movs	r3, #0
 800407a:	77fb      	strb	r3, [r7, #31]
 800407c:	e0f1      	b.n	8004262 <UART_SetConfig+0x34e>
 800407e:	2302      	movs	r3, #2
 8004080:	77fb      	strb	r3, [r7, #31]
 8004082:	e0ee      	b.n	8004262 <UART_SetConfig+0x34e>
 8004084:	2304      	movs	r3, #4
 8004086:	77fb      	strb	r3, [r7, #31]
 8004088:	e0eb      	b.n	8004262 <UART_SetConfig+0x34e>
 800408a:	2308      	movs	r3, #8
 800408c:	77fb      	strb	r3, [r7, #31]
 800408e:	e0e8      	b.n	8004262 <UART_SetConfig+0x34e>
 8004090:	2310      	movs	r3, #16
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	bf00      	nop
 8004096:	e0e4      	b.n	8004262 <UART_SetConfig+0x34e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a5f      	ldr	r2, [pc, #380]	; (800421c <UART_SetConfig+0x308>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d120      	bne.n	80040e4 <UART_SetConfig+0x1d0>
 80040a2:	4b5b      	ldr	r3, [pc, #364]	; (8004210 <UART_SetConfig+0x2fc>)
 80040a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d00f      	beq.n	80040d0 <UART_SetConfig+0x1bc>
 80040b0:	2b40      	cmp	r3, #64	; 0x40
 80040b2:	d802      	bhi.n	80040ba <UART_SetConfig+0x1a6>
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <UART_SetConfig+0x1b0>
 80040b8:	e010      	b.n	80040dc <UART_SetConfig+0x1c8>
 80040ba:	2b80      	cmp	r3, #128	; 0x80
 80040bc:	d005      	beq.n	80040ca <UART_SetConfig+0x1b6>
 80040be:	2bc0      	cmp	r3, #192	; 0xc0
 80040c0:	d009      	beq.n	80040d6 <UART_SetConfig+0x1c2>
 80040c2:	e00b      	b.n	80040dc <UART_SetConfig+0x1c8>
 80040c4:	2300      	movs	r3, #0
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	e0cb      	b.n	8004262 <UART_SetConfig+0x34e>
 80040ca:	2302      	movs	r3, #2
 80040cc:	77fb      	strb	r3, [r7, #31]
 80040ce:	e0c8      	b.n	8004262 <UART_SetConfig+0x34e>
 80040d0:	2304      	movs	r3, #4
 80040d2:	77fb      	strb	r3, [r7, #31]
 80040d4:	e0c5      	b.n	8004262 <UART_SetConfig+0x34e>
 80040d6:	2308      	movs	r3, #8
 80040d8:	77fb      	strb	r3, [r7, #31]
 80040da:	e0c2      	b.n	8004262 <UART_SetConfig+0x34e>
 80040dc:	2310      	movs	r3, #16
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	bf00      	nop
 80040e2:	e0be      	b.n	8004262 <UART_SetConfig+0x34e>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a4d      	ldr	r2, [pc, #308]	; (8004220 <UART_SetConfig+0x30c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d124      	bne.n	8004138 <UART_SetConfig+0x224>
 80040ee:	4b48      	ldr	r3, [pc, #288]	; (8004210 <UART_SetConfig+0x2fc>)
 80040f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040fc:	d012      	beq.n	8004124 <UART_SetConfig+0x210>
 80040fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004102:	d802      	bhi.n	800410a <UART_SetConfig+0x1f6>
 8004104:	2b00      	cmp	r3, #0
 8004106:	d007      	beq.n	8004118 <UART_SetConfig+0x204>
 8004108:	e012      	b.n	8004130 <UART_SetConfig+0x21c>
 800410a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800410e:	d006      	beq.n	800411e <UART_SetConfig+0x20a>
 8004110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004114:	d009      	beq.n	800412a <UART_SetConfig+0x216>
 8004116:	e00b      	b.n	8004130 <UART_SetConfig+0x21c>
 8004118:	2300      	movs	r3, #0
 800411a:	77fb      	strb	r3, [r7, #31]
 800411c:	e0a1      	b.n	8004262 <UART_SetConfig+0x34e>
 800411e:	2302      	movs	r3, #2
 8004120:	77fb      	strb	r3, [r7, #31]
 8004122:	e09e      	b.n	8004262 <UART_SetConfig+0x34e>
 8004124:	2304      	movs	r3, #4
 8004126:	77fb      	strb	r3, [r7, #31]
 8004128:	e09b      	b.n	8004262 <UART_SetConfig+0x34e>
 800412a:	2308      	movs	r3, #8
 800412c:	77fb      	strb	r3, [r7, #31]
 800412e:	e098      	b.n	8004262 <UART_SetConfig+0x34e>
 8004130:	2310      	movs	r3, #16
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	bf00      	nop
 8004136:	e094      	b.n	8004262 <UART_SetConfig+0x34e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a39      	ldr	r2, [pc, #228]	; (8004224 <UART_SetConfig+0x310>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d124      	bne.n	800418c <UART_SetConfig+0x278>
 8004142:	4b33      	ldr	r3, [pc, #204]	; (8004210 <UART_SetConfig+0x2fc>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004148:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800414c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004150:	d012      	beq.n	8004178 <UART_SetConfig+0x264>
 8004152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004156:	d802      	bhi.n	800415e <UART_SetConfig+0x24a>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d007      	beq.n	800416c <UART_SetConfig+0x258>
 800415c:	e012      	b.n	8004184 <UART_SetConfig+0x270>
 800415e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004162:	d006      	beq.n	8004172 <UART_SetConfig+0x25e>
 8004164:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004168:	d009      	beq.n	800417e <UART_SetConfig+0x26a>
 800416a:	e00b      	b.n	8004184 <UART_SetConfig+0x270>
 800416c:	2301      	movs	r3, #1
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	e077      	b.n	8004262 <UART_SetConfig+0x34e>
 8004172:	2302      	movs	r3, #2
 8004174:	77fb      	strb	r3, [r7, #31]
 8004176:	e074      	b.n	8004262 <UART_SetConfig+0x34e>
 8004178:	2304      	movs	r3, #4
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e071      	b.n	8004262 <UART_SetConfig+0x34e>
 800417e:	2308      	movs	r3, #8
 8004180:	77fb      	strb	r3, [r7, #31]
 8004182:	e06e      	b.n	8004262 <UART_SetConfig+0x34e>
 8004184:	2310      	movs	r3, #16
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	bf00      	nop
 800418a:	e06a      	b.n	8004262 <UART_SetConfig+0x34e>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a25      	ldr	r2, [pc, #148]	; (8004228 <UART_SetConfig+0x314>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d124      	bne.n	80041e0 <UART_SetConfig+0x2cc>
 8004196:	4b1e      	ldr	r3, [pc, #120]	; (8004210 <UART_SetConfig+0x2fc>)
 8004198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80041a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a4:	d012      	beq.n	80041cc <UART_SetConfig+0x2b8>
 80041a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041aa:	d802      	bhi.n	80041b2 <UART_SetConfig+0x29e>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d007      	beq.n	80041c0 <UART_SetConfig+0x2ac>
 80041b0:	e012      	b.n	80041d8 <UART_SetConfig+0x2c4>
 80041b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b6:	d006      	beq.n	80041c6 <UART_SetConfig+0x2b2>
 80041b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041bc:	d009      	beq.n	80041d2 <UART_SetConfig+0x2be>
 80041be:	e00b      	b.n	80041d8 <UART_SetConfig+0x2c4>
 80041c0:	2300      	movs	r3, #0
 80041c2:	77fb      	strb	r3, [r7, #31]
 80041c4:	e04d      	b.n	8004262 <UART_SetConfig+0x34e>
 80041c6:	2302      	movs	r3, #2
 80041c8:	77fb      	strb	r3, [r7, #31]
 80041ca:	e04a      	b.n	8004262 <UART_SetConfig+0x34e>
 80041cc:	2304      	movs	r3, #4
 80041ce:	77fb      	strb	r3, [r7, #31]
 80041d0:	e047      	b.n	8004262 <UART_SetConfig+0x34e>
 80041d2:	2308      	movs	r3, #8
 80041d4:	77fb      	strb	r3, [r7, #31]
 80041d6:	e044      	b.n	8004262 <UART_SetConfig+0x34e>
 80041d8:	2310      	movs	r3, #16
 80041da:	77fb      	strb	r3, [r7, #31]
 80041dc:	bf00      	nop
 80041de:	e040      	b.n	8004262 <UART_SetConfig+0x34e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a11      	ldr	r2, [pc, #68]	; (800422c <UART_SetConfig+0x318>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d139      	bne.n	800425e <UART_SetConfig+0x34a>
 80041ea:	4b09      	ldr	r3, [pc, #36]	; (8004210 <UART_SetConfig+0x2fc>)
 80041ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041f8:	d027      	beq.n	800424a <UART_SetConfig+0x336>
 80041fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041fe:	d817      	bhi.n	8004230 <UART_SetConfig+0x31c>
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01c      	beq.n	800423e <UART_SetConfig+0x32a>
 8004204:	e027      	b.n	8004256 <UART_SetConfig+0x342>
 8004206:	bf00      	nop
 8004208:	efff69f3 	.word	0xefff69f3
 800420c:	40011000 	.word	0x40011000
 8004210:	40023800 	.word	0x40023800
 8004214:	40004400 	.word	0x40004400
 8004218:	40004800 	.word	0x40004800
 800421c:	40004c00 	.word	0x40004c00
 8004220:	40005000 	.word	0x40005000
 8004224:	40011400 	.word	0x40011400
 8004228:	40007800 	.word	0x40007800
 800422c:	40007c00 	.word	0x40007c00
 8004230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004234:	d006      	beq.n	8004244 <UART_SetConfig+0x330>
 8004236:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800423a:	d009      	beq.n	8004250 <UART_SetConfig+0x33c>
 800423c:	e00b      	b.n	8004256 <UART_SetConfig+0x342>
 800423e:	2300      	movs	r3, #0
 8004240:	77fb      	strb	r3, [r7, #31]
 8004242:	e00e      	b.n	8004262 <UART_SetConfig+0x34e>
 8004244:	2302      	movs	r3, #2
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e00b      	b.n	8004262 <UART_SetConfig+0x34e>
 800424a:	2304      	movs	r3, #4
 800424c:	77fb      	strb	r3, [r7, #31]
 800424e:	e008      	b.n	8004262 <UART_SetConfig+0x34e>
 8004250:	2308      	movs	r3, #8
 8004252:	77fb      	strb	r3, [r7, #31]
 8004254:	e005      	b.n	8004262 <UART_SetConfig+0x34e>
 8004256:	2310      	movs	r3, #16
 8004258:	77fb      	strb	r3, [r7, #31]
 800425a:	bf00      	nop
 800425c:	e001      	b.n	8004262 <UART_SetConfig+0x34e>
 800425e:	2310      	movs	r3, #16
 8004260:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800426a:	d17c      	bne.n	8004366 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800426c:	7ffb      	ldrb	r3, [r7, #31]
 800426e:	2b08      	cmp	r3, #8
 8004270:	d859      	bhi.n	8004326 <UART_SetConfig+0x412>
 8004272:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <UART_SetConfig+0x364>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	0800429d 	.word	0x0800429d
 800427c:	080042bb 	.word	0x080042bb
 8004280:	080042d9 	.word	0x080042d9
 8004284:	08004327 	.word	0x08004327
 8004288:	080042f1 	.word	0x080042f1
 800428c:	08004327 	.word	0x08004327
 8004290:	08004327 	.word	0x08004327
 8004294:	08004327 	.word	0x08004327
 8004298:	0800430f 	.word	0x0800430f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800429c:	f7fd ffe2 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 80042a0:	4603      	mov	r3, r0
 80042a2:	005a      	lsls	r2, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	085b      	lsrs	r3, r3, #1
 80042aa:	441a      	add	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	61bb      	str	r3, [r7, #24]
        break;
 80042b8:	e038      	b.n	800432c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80042ba:	f7fd ffe7 	bl	800228c <HAL_RCC_GetPCLK2Freq>
 80042be:	4603      	mov	r3, r0
 80042c0:	005a      	lsls	r2, r3, #1
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	085b      	lsrs	r3, r3, #1
 80042c8:	441a      	add	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	61bb      	str	r3, [r7, #24]
        break;
 80042d6:	e029      	b.n	800432c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	085a      	lsrs	r2, r3, #1
 80042de:	4b5d      	ldr	r3, [pc, #372]	; (8004454 <UART_SetConfig+0x540>)
 80042e0:	4413      	add	r3, r2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6852      	ldr	r2, [r2, #4]
 80042e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	61bb      	str	r3, [r7, #24]
        break;
 80042ee:	e01d      	b.n	800432c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80042f0:	f7fd fed4 	bl	800209c <HAL_RCC_GetSysClockFreq>
 80042f4:	4603      	mov	r3, r0
 80042f6:	005a      	lsls	r2, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	085b      	lsrs	r3, r3, #1
 80042fe:	441a      	add	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	fbb2 f3f3 	udiv	r3, r2, r3
 8004308:	b29b      	uxth	r3, r3
 800430a:	61bb      	str	r3, [r7, #24]
        break;
 800430c:	e00e      	b.n	800432c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	085b      	lsrs	r3, r3, #1
 8004314:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004320:	b29b      	uxth	r3, r3
 8004322:	61bb      	str	r3, [r7, #24]
        break;
 8004324:	e002      	b.n	800432c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	75fb      	strb	r3, [r7, #23]
        break;
 800432a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	2b0f      	cmp	r3, #15
 8004330:	d916      	bls.n	8004360 <UART_SetConfig+0x44c>
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004338:	d212      	bcs.n	8004360 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	b29b      	uxth	r3, r3
 800433e:	f023 030f 	bic.w	r3, r3, #15
 8004342:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	085b      	lsrs	r3, r3, #1
 8004348:	b29b      	uxth	r3, r3
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	b29a      	uxth	r2, r3
 8004350:	89fb      	ldrh	r3, [r7, #14]
 8004352:	4313      	orrs	r3, r2
 8004354:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	89fa      	ldrh	r2, [r7, #14]
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	e06e      	b.n	800443e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	75fb      	strb	r3, [r7, #23]
 8004364:	e06b      	b.n	800443e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8004366:	7ffb      	ldrb	r3, [r7, #31]
 8004368:	2b08      	cmp	r3, #8
 800436a:	d857      	bhi.n	800441c <UART_SetConfig+0x508>
 800436c:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <UART_SetConfig+0x460>)
 800436e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004372:	bf00      	nop
 8004374:	08004399 	.word	0x08004399
 8004378:	080043b5 	.word	0x080043b5
 800437c:	080043d1 	.word	0x080043d1
 8004380:	0800441d 	.word	0x0800441d
 8004384:	080043e9 	.word	0x080043e9
 8004388:	0800441d 	.word	0x0800441d
 800438c:	0800441d 	.word	0x0800441d
 8004390:	0800441d 	.word	0x0800441d
 8004394:	08004405 	.word	0x08004405
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004398:	f7fd ff64 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 800439c:	4602      	mov	r2, r0
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	085b      	lsrs	r3, r3, #1
 80043a4:	441a      	add	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	61bb      	str	r3, [r7, #24]
        break;
 80043b2:	e036      	b.n	8004422 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80043b4:	f7fd ff6a 	bl	800228c <HAL_RCC_GetPCLK2Freq>
 80043b8:	4602      	mov	r2, r0
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	441a      	add	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	61bb      	str	r3, [r7, #24]
        break;
 80043ce:	e028      	b.n	8004422 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	085a      	lsrs	r2, r3, #1
 80043d6:	4b20      	ldr	r3, [pc, #128]	; (8004458 <UART_SetConfig+0x544>)
 80043d8:	4413      	add	r3, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6852      	ldr	r2, [r2, #4]
 80043de:	fbb3 f3f2 	udiv	r3, r3, r2
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	61bb      	str	r3, [r7, #24]
        break;
 80043e6:	e01c      	b.n	8004422 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80043e8:	f7fd fe58 	bl	800209c <HAL_RCC_GetSysClockFreq>
 80043ec:	4602      	mov	r2, r0
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	441a      	add	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fe:	b29b      	uxth	r3, r3
 8004400:	61bb      	str	r3, [r7, #24]
        break;
 8004402:	e00e      	b.n	8004422 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	085b      	lsrs	r3, r3, #1
 800440a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	fbb2 f3f3 	udiv	r3, r2, r3
 8004416:	b29b      	uxth	r3, r3
 8004418:	61bb      	str	r3, [r7, #24]
        break;
 800441a:	e002      	b.n	8004422 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	75fb      	strb	r3, [r7, #23]
        break;
 8004420:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b0f      	cmp	r3, #15
 8004426:	d908      	bls.n	800443a <UART_SetConfig+0x526>
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800442e:	d204      	bcs.n	800443a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	60da      	str	r2, [r3, #12]
 8004438:	e001      	b.n	800443e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800444a:	7dfb      	ldrb	r3, [r7, #23]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3720      	adds	r7, #32
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	01e84800 	.word	0x01e84800
 8004458:	00f42400 	.word	0x00f42400

0800445c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	f003 0310 	and.w	r3, r3, #16
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01a      	beq.n	8004572 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800455a:	d10a      	bne.n	8004572 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	605a      	str	r2, [r3, #4]
  }
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80045ae:	f7fc f887 	bl	80006c0 <HAL_GetTick>
 80045b2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d10e      	bne.n	80045e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f814 	bl	80045fe <UART_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e00a      	b.n	80045f6 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	603b      	str	r3, [r7, #0]
 800460a:	4613      	mov	r3, r2
 800460c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800460e:	e02a      	b.n	8004666 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004616:	d026      	beq.n	8004666 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004618:	f7fc f852 	bl	80006c0 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	429a      	cmp	r2, r3
 8004626:	d302      	bcc.n	800462e <UART_WaitOnFlagUntilTimeout+0x30>
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d11b      	bne.n	8004666 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800463c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0201 	bic.w	r2, r2, #1
 800464c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2220      	movs	r2, #32
 8004652:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e00f      	b.n	8004686 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4013      	ands	r3, r2
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	429a      	cmp	r2, r3
 8004674:	bf0c      	ite	eq
 8004676:	2301      	moveq	r3, #1
 8004678:	2300      	movne	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	429a      	cmp	r2, r3
 8004682:	d0c5      	beq.n	8004610 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046a4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0201 	bic.w	r2, r2, #1
 80046b4:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f7ff fc07 	bl	8003f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046f2:	bf00      	nop
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004710:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2220      	movs	r2, #32
 8004716:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff fbe4 	bl	8003eec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004724:	bf00      	nop
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800473a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004740:	2b22      	cmp	r3, #34	; 0x22
 8004742:	d13a      	bne.n	80047ba <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800474c:	89bb      	ldrh	r3, [r7, #12]
 800474e:	b2d9      	uxtb	r1, r3
 8004750:	89fb      	ldrh	r3, [r7, #14]
 8004752:	b2da      	uxtb	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004758:	400a      	ands	r2, r1
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d121      	bne.n	80047ca <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004794:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0201 	bic.w	r2, r2, #1
 80047a4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2220      	movs	r2, #32
 80047aa:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f001 f916 	bl	80059e4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047b8:	e007      	b.n	80047ca <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699a      	ldr	r2, [r3, #24]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0208 	orr.w	r2, r2, #8
 80047c8:	619a      	str	r2, [r3, #24]
}
 80047ca:	bf00      	nop
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047e0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047e6:	2b22      	cmp	r3, #34	; 0x22
 80047e8:	d13a      	bne.n	8004860 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80047f8:	89ba      	ldrh	r2, [r7, #12]
 80047fa:	89fb      	ldrh	r3, [r7, #14]
 80047fc:	4013      	ands	r3, r2
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004808:	1c9a      	adds	r2, r3, #2
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004814:	b29b      	uxth	r3, r3
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004826:	b29b      	uxth	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	d121      	bne.n	8004870 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800483a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0201 	bic.w	r2, r2, #1
 800484a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f001 f8c3 	bl	80059e4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800485e:	e007      	b.n	8004870 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0208 	orr.w	r2, r2, #8
 800486e:	619a      	str	r2, [r3, #24]
}
 8004870:	bf00      	nop
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004878:	b084      	sub	sp, #16
 800487a:	b580      	push	{r7, lr}
 800487c:	b084      	sub	sp, #16
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	f107 001c 	add.w	r0, r7, #28
 8004886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	2b01      	cmp	r3, #1
 800488e:	d120      	bne.n	80048d2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	4b20      	ldr	r3, [pc, #128]	; (8004924 <USB_CoreInit+0xac>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80048b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d105      	bne.n	80048c6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fa60 	bl	8004d8c <USB_CoreReset>
 80048cc:	4603      	mov	r3, r0
 80048ce:	73fb      	strb	r3, [r7, #15]
 80048d0:	e010      	b.n	80048f4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fa54 	bl	8004d8c <USB_CoreReset>
 80048e4:	4603      	mov	r3, r0
 80048e6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d10b      	bne.n	8004912 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f043 0206 	orr.w	r2, r3, #6
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f043 0220 	orr.w	r2, r3, #32
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004912:	7bfb      	ldrb	r3, [r7, #15]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800491e:	b004      	add	sp, #16
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	ffbdffbf 	.word	0xffbdffbf

08004928 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f023 0201 	bic.w	r2, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	460b      	mov	r3, r1
 8004954:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d106      	bne.n	8004976 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	60da      	str	r2, [r3, #12]
 8004974:	e00b      	b.n	800498e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004976:	78fb      	ldrb	r3, [r7, #3]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	60da      	str	r2, [r3, #12]
 8004988:	e001      	b.n	800498e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e003      	b.n	8004996 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800498e:	2032      	movs	r0, #50	; 0x32
 8004990:	f7fb fea2 	bl	80006d8 <HAL_Delay>

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049a0:	b084      	sub	sp, #16
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b086      	sub	sp, #24
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80049ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049ba:	2300      	movs	r3, #0
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	e009      	b.n	80049d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	3340      	adds	r3, #64	; 0x40
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	2200      	movs	r2, #0
 80049cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	3301      	adds	r3, #1
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2b0e      	cmp	r3, #14
 80049d8:	d9f2      	bls.n	80049c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d112      	bne.n	8004a06 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	e005      	b.n	8004a12 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a24:	4619      	mov	r1, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	680b      	ldr	r3, [r1, #0]
 8004a30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d10c      	bne.n	8004a52 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d104      	bne.n	8004a48 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a3e:	2100      	movs	r1, #0
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f971 	bl	8004d28 <USB_SetDevSpeed>
 8004a46:	e018      	b.n	8004a7a <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a48:	2101      	movs	r1, #1
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f96c 	bl	8004d28 <USB_SetDevSpeed>
 8004a50:	e013      	b.n	8004a7a <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	d10c      	bne.n	8004a72 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d104      	bne.n	8004a68 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a5e:	2100      	movs	r1, #0
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f961 	bl	8004d28 <USB_SetDevSpeed>
 8004a66:	e008      	b.n	8004a7a <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a68:	2101      	movs	r1, #1
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f95c 	bl	8004d28 <USB_SetDevSpeed>
 8004a70:	e003      	b.n	8004a7a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a72:	2103      	movs	r1, #3
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f957 	bl	8004d28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a7a:	2110      	movs	r1, #16
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f90b 	bl	8004c98 <USB_FlushTxFifo>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f929 	bl	8004ce4 <USB_FlushRxFifo>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aae:	461a      	mov	r2, r3
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aba:	461a      	mov	r2, r3
 8004abc:	2300      	movs	r3, #0
 8004abe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	e043      	b.n	8004b4e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004adc:	d118      	bne.n	8004b10 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10a      	bne.n	8004afa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af0:	461a      	mov	r2, r3
 8004af2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	e013      	b.n	8004b22 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b06:	461a      	mov	r2, r3
 8004b08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e008      	b.n	8004b22 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	2300      	movs	r3, #0
 8004b20:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2e:	461a      	mov	r2, r3
 8004b30:	2300      	movs	r3, #0
 8004b32:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b40:	461a      	mov	r2, r3
 8004b42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d3b7      	bcc.n	8004ac6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b56:	2300      	movs	r3, #0
 8004b58:	613b      	str	r3, [r7, #16]
 8004b5a:	e043      	b.n	8004be4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b72:	d118      	bne.n	8004ba6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10a      	bne.n	8004b90 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b86:	461a      	mov	r2, r3
 8004b88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	e013      	b.n	8004bb8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	e008      	b.n	8004bb8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bdc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	3301      	adds	r3, #1
 8004be2:	613b      	str	r3, [r7, #16]
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d3b7      	bcc.n	8004b5c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bfe:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d110      	bne.n	8004c28 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4b1e      	ldr	r3, [pc, #120]	; (8004c88 <USB_DevInit+0x2e8>)
 8004c10:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c20:	4619      	mov	r1, r3
 8004c22:	4b1a      	ldr	r3, [pc, #104]	; (8004c8c <USB_DevInit+0x2ec>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c34:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d105      	bne.n	8004c48 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	f043 0210 	orr.w	r2, r3, #16
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699a      	ldr	r2, [r3, #24]
 8004c4c:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <USB_DevInit+0x2f0>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d005      	beq.n	8004c66 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	f043 0208 	orr.w	r2, r3, #8
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d105      	bne.n	8004c78 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699a      	ldr	r2, [r3, #24]
 8004c70:	4b08      	ldr	r3, [pc, #32]	; (8004c94 <USB_DevInit+0x2f4>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c84:	b004      	add	sp, #16
 8004c86:	4770      	bx	lr
 8004c88:	00800100 	.word	0x00800100
 8004c8c:	00010003 	.word	0x00010003
 8004c90:	803c3800 	.word	0x803c3800
 8004c94:	40000004 	.word	0x40000004

08004c98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	019b      	lsls	r3, r3, #6
 8004caa:	f043 0220 	orr.w	r2, r3, #32
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4a09      	ldr	r2, [pc, #36]	; (8004ce0 <USB_FlushTxFifo+0x48>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d901      	bls.n	8004cc4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e006      	b.n	8004cd2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d0f0      	beq.n	8004cb2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	00030d40 	.word	0x00030d40

08004ce4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2210      	movs	r2, #16
 8004cf4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4a09      	ldr	r2, [pc, #36]	; (8004d24 <USB_FlushRxFifo+0x40>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d901      	bls.n	8004d08 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e006      	b.n	8004d16 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b10      	cmp	r3, #16
 8004d12:	d0f0      	beq.n	8004cf6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	00030d40 	.word	0x00030d40

08004d28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	460b      	mov	r3, r1
 8004d32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	68f9      	ldr	r1, [r7, #12]
 8004d44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d74:	f043 0302 	orr.w	r3, r3, #2
 8004d78:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004d7a:	2003      	movs	r0, #3
 8004d7c:	f7fb fcac 	bl	80006d8 <HAL_Delay>

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	4a13      	ldr	r2, [pc, #76]	; (8004df0 <USB_CoreReset+0x64>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d901      	bls.n	8004daa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e01b      	b.n	8004de2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	daf2      	bge.n	8004d98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f043 0201 	orr.w	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4a09      	ldr	r2, [pc, #36]	; (8004df0 <USB_CoreReset+0x64>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d901      	bls.n	8004dd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e006      	b.n	8004de2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d0f0      	beq.n	8004dc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	00030d40 	.word	0x00030d40

08004df4 <ZmierzLUX>:
 *  @brief Ta funkcja odczytuje natezenie swiatla z czujnika BH1750, nie przyjmuje zadnych argumentow

 *  @retval Wartosc natezenia wyrazona w LUX
 */
void ZmierzLUX(uint16_t *WartoscOdczytu)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
	float Pomiar_f;
	BH1750_ReadLight(&Pomiar_f); //ODCZYT WARTOSCI DO PRZEKAZANEJ ZMIENNEJ
 8004dfc:	f107 030c 	add.w	r3, r7, #12
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 f965 	bl	80050d0 <BH1750_ReadLight>
	//int lol = Pomiar_f;
	*WartoscOdczytu = Pomiar_f;
 8004e06:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e0e:	ee17 3a90 	vmov	r3, s15
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	801a      	strh	r2, [r3, #0]
}
 8004e18:	bf00      	nop
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <MakeLCDgreatAgain>:
 *  @param WartoscOdczytu Drugi argument typu int bedacy wartoscia odczytana z czujnika z zakresu 0-99999999
 *
 *  @retval brak
 */
void MakeLCDgreatAgain(uint16_t WartoscWejsciowa, uint16_t WartoscOdczytu)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b088      	sub	sp, #32
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	460a      	mov	r2, r1
 8004e2a:	80fb      	strh	r3, [r7, #6]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	80bb      	strh	r3, [r7, #4]
	uint8_t size;
	lcd_clear();
 8004e30:	f000 fb4e 	bl	80054d0 <lcd_clear>
	lcd_put_cur(0, 0); // od tego miejsca zaczynamy wprowadzac znaki
 8004e34:	2100      	movs	r1, #0
 8004e36:	2000      	movs	r0, #0
 8004e38:	f000 fb60 	bl	80054fc <lcd_put_cur>

	char WiadomoscDoWyswietlenia[16];

	size = sprintf(&WiadomoscDoWyswietlenia, "Zadana: %d", WartoscWejsciowa);
 8004e3c:	88fa      	ldrh	r2, [r7, #6]
 8004e3e:	f107 030c 	add.w	r3, r7, #12
 8004e42:	4917      	ldr	r1, [pc, #92]	; (8004ea0 <MakeLCDgreatAgain+0x80>)
 8004e44:	4618      	mov	r0, r3
 8004e46:	f001 fa05 	bl	8006254 <siprintf>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	77fb      	strb	r3, [r7, #31]

	if(size > 15) lcd_send_string("Wiadomosc zbyt dluga");
 8004e4e:	7ffb      	ldrb	r3, [r7, #31]
 8004e50:	2b0f      	cmp	r3, #15
 8004e52:	d903      	bls.n	8004e5c <MakeLCDgreatAgain+0x3c>
 8004e54:	4813      	ldr	r0, [pc, #76]	; (8004ea4 <MakeLCDgreatAgain+0x84>)
 8004e56:	f000 fbac 	bl	80055b2 <lcd_send_string>
 8004e5a:	e004      	b.n	8004e66 <MakeLCDgreatAgain+0x46>
	else lcd_send_string(WiadomoscDoWyswietlenia); // wysylanie wiadomosci
 8004e5c:	f107 030c 	add.w	r3, r7, #12
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fba6 	bl	80055b2 <lcd_send_string>

	lcd_put_cur(1, 0); // zmiana miejsca wpisywania tekstu na druga linie
 8004e66:	2100      	movs	r1, #0
 8004e68:	2001      	movs	r0, #1
 8004e6a:	f000 fb47 	bl	80054fc <lcd_put_cur>
	size = sprintf(&WiadomoscDoWyswietlenia, "Odczyt: %d", WartoscOdczytu);
 8004e6e:	88ba      	ldrh	r2, [r7, #4]
 8004e70:	f107 030c 	add.w	r3, r7, #12
 8004e74:	490c      	ldr	r1, [pc, #48]	; (8004ea8 <MakeLCDgreatAgain+0x88>)
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 f9ec 	bl	8006254 <siprintf>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	77fb      	strb	r3, [r7, #31]

	if(size > 15) lcd_send_string("Wiadomosc zbyt dluga");
 8004e80:	7ffb      	ldrb	r3, [r7, #31]
 8004e82:	2b0f      	cmp	r3, #15
 8004e84:	d903      	bls.n	8004e8e <MakeLCDgreatAgain+0x6e>
 8004e86:	4807      	ldr	r0, [pc, #28]	; (8004ea4 <MakeLCDgreatAgain+0x84>)
 8004e88:	f000 fb93 	bl	80055b2 <lcd_send_string>
	else lcd_send_string(WiadomoscDoWyswietlenia); // wysylanie wiadomosci

}
 8004e8c:	e004      	b.n	8004e98 <MakeLCDgreatAgain+0x78>
	else lcd_send_string(WiadomoscDoWyswietlenia); // wysylanie wiadomosci
 8004e8e:	f107 030c 	add.w	r3, r7, #12
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fb8d 	bl	80055b2 <lcd_send_string>
}
 8004e98:	bf00      	nop
 8004e9a:	3720      	adds	r7, #32
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	08006be4 	.word	0x08006be4
 8004ea4:	08006bf0 	.word	0x08006bf0
 8004ea8:	08006c08 	.word	0x08006c08

08004eac <ZadajPWM>:
 *  @param Regulator wskaznik na regulator
 *
 *  @retval brak
 */
void ZadajPWM(uint16_t WartoscWejsciowa, uint16_t WartoscOdczytu, arm_pid_instance_f32 * Regulator)
{	uint16_t x = WartoscWejsciowa;
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	603a      	str	r2, [r7, #0]
 8004eb6:	80fb      	strh	r3, [r7, #6]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	80bb      	strh	r3, [r7, #4]
 8004ebc:	88fb      	ldrh	r3, [r7, #6]
 8004ebe:	82fb      	strh	r3, [r7, #22]
	if(WartoscWejsciowa > MAX_zadana) x = MAX_zadana;
 8004ec0:	88fb      	ldrh	r3, [r7, #6]
 8004ec2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8004ec6:	d902      	bls.n	8004ece <ZadajPWM+0x22>
 8004ec8:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8004ecc:	82fb      	strh	r3, [r7, #22]
	else if(WartoscWejsciowa < MIN_zadana) x = MIN_zadana;
	uint16_t PWM;
	PWM = arm_pid_f32(Regulator, x - WartoscOdczytu); //obliczanie wypelnienia dzieki funkcji z biblioteki cmsis
 8004ece:	8afa      	ldrh	r2, [r7, #22]
 8004ed0:	88bb      	ldrh	r3, [r7, #4]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	ee07 3a90 	vmov	s15, r3
 8004ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	edc7 7a03 	vstr	s15, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	ed93 7a00 	vldr	s14, [r3]
 8004eea:	edd7 7a03 	vldr	s15, [r7, #12]
 8004eee:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	edd3 6a01 	vldr	s13, [r3, #4]
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	edd3 7a03 	vldr	s15, [r3, #12]
 8004efe:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8004f02:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	edd3 6a02 	vldr	s13, [r3, #8]
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004f12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8004f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f24:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8004f3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f44:	ee17 3a90 	vmov	r3, s15
 8004f48:	82bb      	strh	r3, [r7, #20]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM); //Zadaje wypelnienie PWM
 8004f4a:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <ZadajPWM+0xb4>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	8aba      	ldrh	r2, [r7, #20]
 8004f50:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004f52:	bf00      	nop
 8004f54:	371c      	adds	r7, #28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	20000318 	.word	0x20000318

08004f64 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8004f6c:	4a0a      	ldr	r2, [pc, #40]	; (8004f98 <BH1750_Init+0x34>)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8004f72:	f000 f813 	bl	8004f9c <BH1750_Reset>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d107      	bne.n	8004f8c <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8004f7c:	2045      	movs	r0, #69	; 0x45
 8004f7e:	f000 f859 	bl	8005034 <BH1750_SetMtreg>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <BH1750_Init+0x28>
			return BH1750_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e000      	b.n	8004f8e <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8004f8c:	2301      	movs	r3, #1
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20000210 	.word	0x20000210

08004f9c <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8004fa2:	2307      	movs	r3, #7
 8004fa4:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8004fa6:	4b09      	ldr	r3, [pc, #36]	; (8004fcc <BH1750_Reset+0x30>)
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	1dfa      	adds	r2, r7, #7
 8004fac:	230a      	movs	r3, #10
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	2146      	movs	r1, #70	; 0x46
 8004fb4:	f7fb ff6c 	bl	8000e90 <HAL_I2C_Master_Transmit>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <BH1750_Reset+0x26>
		return BH1750_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	e000      	b.n	8004fc4 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 8004fc2:	2301      	movs	r3, #1
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20000210 	.word	0x20000210

08004fd0 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8004fda:	79fb      	ldrb	r3, [r7, #7]
 8004fdc:	091b      	lsrs	r3, r3, #4
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d106      	bne.n	8004ff2 <BH1750_SetMode+0x22>
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <BH1750_SetMode+0x22>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e018      	b.n	8005024 <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	f003 030f 	and.w	r3, r3, #15
 8004ff8:	2b03      	cmp	r3, #3
 8004ffa:	dd01      	ble.n	8005000 <BH1750_SetMode+0x30>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e011      	b.n	8005024 <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 8005000:	79fa      	ldrb	r2, [r7, #7]
 8005002:	4b0a      	ldr	r3, [pc, #40]	; (800502c <BH1750_SetMode+0x5c>)
 8005004:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8005006:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <BH1750_SetMode+0x60>)
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	1dfa      	adds	r2, r7, #7
 800500c:	230a      	movs	r3, #10
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	2301      	movs	r3, #1
 8005012:	2146      	movs	r1, #70	; 0x46
 8005014:	f7fb ff3c 	bl	8000e90 <HAL_I2C_Master_Transmit>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <BH1750_SetMode+0x52>
		return BH1750_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	e000      	b.n	8005024 <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 8005022:	2301      	movs	r3, #1
}
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	2000020c 	.word	0x2000020c
 8005030:	20000210 	.word	0x20000210

08005034 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af02      	add	r7, sp, #8
 800503a:	4603      	mov	r3, r0
 800503c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 800503e:	79fb      	ldrb	r3, [r7, #7]
 8005040:	2b1e      	cmp	r3, #30
 8005042:	d902      	bls.n	800504a <BH1750_SetMtreg+0x16>
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	2bff      	cmp	r3, #255	; 0xff
 8005048:	d101      	bne.n	800504e <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e037      	b.n	80050be <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 800504e:	4a1e      	ldr	r2, [pc, #120]	; (80050c8 <BH1750_SetMtreg+0x94>)
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8005054:	79fb      	ldrb	r3, [r7, #7]
 8005056:	095b      	lsrs	r3, r3, #5
 8005058:	b2db      	uxtb	r3, r3
 800505a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800505e:	b2db      	uxtb	r3, r3
 8005060:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8005062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005066:	f003 031f 	and.w	r3, r3, #31
 800506a:	b25b      	sxtb	r3, r3
 800506c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005070:	b25b      	sxtb	r3, r3
 8005072:	b2db      	uxtb	r3, r3
 8005074:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8005076:	4b15      	ldr	r3, [pc, #84]	; (80050cc <BH1750_SetMtreg+0x98>)
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	f107 020c 	add.w	r2, r7, #12
 800507e:	230a      	movs	r3, #10
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	2301      	movs	r3, #1
 8005084:	2146      	movs	r1, #70	; 0x46
 8005086:	f7fb ff03 	bl	8000e90 <HAL_I2C_Master_Transmit>
 800508a:	4603      	mov	r3, r0
 800508c:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 800508e:	7bfb      	ldrb	r3, [r7, #15]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e012      	b.n	80050be <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8005098:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <BH1750_SetMtreg+0x98>)
 800509a:	6818      	ldr	r0, [r3, #0]
 800509c:	f107 030c 	add.w	r3, r7, #12
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	230a      	movs	r3, #10
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	2301      	movs	r3, #1
 80050a8:	2146      	movs	r1, #70	; 0x46
 80050aa:	f7fb fef1 	bl	8000e90 <HAL_I2C_Master_Transmit>
 80050ae:	4603      	mov	r3, r0
 80050b0:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	e000      	b.n	80050be <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 80050bc:	2301      	movs	r3, #1
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000214 	.word	0x20000214
 80050cc:	20000210 	.word	0x20000210

080050d0 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 80050d8:	4b25      	ldr	r3, [pc, #148]	; (8005170 <BH1750_ReadLight+0xa0>)
 80050da:	6818      	ldr	r0, [r3, #0]
 80050dc:	f107 0208 	add.w	r2, r7, #8
 80050e0:	230a      	movs	r3, #10
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	2302      	movs	r3, #2
 80050e6:	2146      	movs	r1, #70	; 0x46
 80050e8:	f7fb ffc6 	bl	8001078 <HAL_I2C_Master_Receive>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d138      	bne.n	8005164 <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 80050f2:	7a3b      	ldrb	r3, [r7, #8]
 80050f4:	021b      	lsls	r3, r3, #8
 80050f6:	7a7a      	ldrb	r2, [r7, #9]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005102:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8005106:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <BH1750_ReadLight+0xa4>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b45      	cmp	r3, #69	; 0x45
 800510c:	d00f      	beq.n	800512e <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 800510e:	4b19      	ldr	r3, [pc, #100]	; (8005174 <BH1750_ReadLight+0xa4>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800511a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8005178 <BH1750_ReadLight+0xa8>
 800511e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005122:	ed97 7a03 	vldr	s14, [r7, #12]
 8005126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800512a:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 800512e:	4b13      	ldr	r3, [pc, #76]	; (800517c <BH1750_ReadLight+0xac>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b21      	cmp	r3, #33	; 0x21
 8005134:	d003      	beq.n	800513e <BH1750_ReadLight+0x6e>
 8005136:	4b11      	ldr	r3, [pc, #68]	; (800517c <BH1750_ReadLight+0xac>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b11      	cmp	r3, #17
 800513c:	d107      	bne.n	800514e <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 800513e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005142:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800514a:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 800514e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005152:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8005180 <BH1750_ReadLight+0xb0>
 8005156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8005160:	2300      	movs	r3, #0
 8005162:	e000      	b.n	8005166 <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 8005164:	2301      	movs	r3, #1
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000210 	.word	0x20000210
 8005174:	20000214 	.word	0x20000214
 8005178:	428a0000 	.word	0x428a0000
 800517c:	2000020c 	.word	0x2000020c
 8005180:	3f99999a 	.word	0x3f99999a

08005184 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08c      	sub	sp, #48	; 0x30
 8005188:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800518a:	f107 031c 	add.w	r3, r7, #28
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	605a      	str	r2, [r3, #4]
 8005194:	609a      	str	r2, [r3, #8]
 8005196:	60da      	str	r2, [r3, #12]
 8005198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800519a:	4b95      	ldr	r3, [pc, #596]	; (80053f0 <MX_GPIO_Init+0x26c>)
 800519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519e:	4a94      	ldr	r2, [pc, #592]	; (80053f0 <MX_GPIO_Init+0x26c>)
 80051a0:	f043 0304 	orr.w	r3, r3, #4
 80051a4:	6313      	str	r3, [r2, #48]	; 0x30
 80051a6:	4b92      	ldr	r3, [pc, #584]	; (80053f0 <MX_GPIO_Init+0x26c>)
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	61bb      	str	r3, [r7, #24]
 80051b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80051b2:	4b8f      	ldr	r3, [pc, #572]	; (80053f0 <MX_GPIO_Init+0x26c>)
 80051b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b6:	4a8e      	ldr	r2, [pc, #568]	; (80053f0 <MX_GPIO_Init+0x26c>)
 80051b8:	f043 0320 	orr.w	r3, r3, #32
 80051bc:	6313      	str	r3, [r2, #48]	; 0x30
 80051be:	4b8c      	ldr	r3, [pc, #560]	; (80053f0 <MX_GPIO_Init+0x26c>)
 80051c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c2:	f003 0320 	and.w	r3, r3, #32
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80051ca:	4b89      	ldr	r3, [pc, #548]	; (80053f0 <MX_GPIO_Init+0x26c>)
 80051cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ce:	4a88      	ldr	r2, [pc, #544]	; (80053f0 <MX_GPIO_Init+0x26c>)
 80051d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d4:	6313      	str	r3, [r2, #48]	; 0x30
 80051d6:	4b86      	ldr	r3, [pc, #536]	; (80053f0 <MX_GPIO_Init+0x26c>)
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051de:	613b      	str	r3, [r7, #16]
 80051e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80051e2:	4b83      	ldr	r3, [pc, #524]	; (80053f0 <MX_GPIO_Init+0x26c>)
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	4a82      	ldr	r2, [pc, #520]	; (80053f0 <MX_GPIO_Init+0x26c>)
 80051e8:	f043 0301 	orr.w	r3, r3, #1
 80051ec:	6313      	str	r3, [r2, #48]	; 0x30
 80051ee:	4b80      	ldr	r3, [pc, #512]	; (80053f0 <MX_GPIO_Init+0x26c>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80051fa:	4b7d      	ldr	r3, [pc, #500]	; (80053f0 <MX_GPIO_Init+0x26c>)
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	4a7c      	ldr	r2, [pc, #496]	; (80053f0 <MX_GPIO_Init+0x26c>)
 8005200:	f043 0302 	orr.w	r3, r3, #2
 8005204:	6313      	str	r3, [r2, #48]	; 0x30
 8005206:	4b7a      	ldr	r3, [pc, #488]	; (80053f0 <MX_GPIO_Init+0x26c>)
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	60bb      	str	r3, [r7, #8]
 8005210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005212:	4b77      	ldr	r3, [pc, #476]	; (80053f0 <MX_GPIO_Init+0x26c>)
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	4a76      	ldr	r2, [pc, #472]	; (80053f0 <MX_GPIO_Init+0x26c>)
 8005218:	f043 0308 	orr.w	r3, r3, #8
 800521c:	6313      	str	r3, [r2, #48]	; 0x30
 800521e:	4b74      	ldr	r3, [pc, #464]	; (80053f0 <MX_GPIO_Init+0x26c>)
 8005220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005222:	f003 0308 	and.w	r3, r3, #8
 8005226:	607b      	str	r3, [r7, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800522a:	4b71      	ldr	r3, [pc, #452]	; (80053f0 <MX_GPIO_Init+0x26c>)
 800522c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522e:	4a70      	ldr	r2, [pc, #448]	; (80053f0 <MX_GPIO_Init+0x26c>)
 8005230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005234:	6313      	str	r3, [r2, #48]	; 0x30
 8005236:	4b6e      	ldr	r3, [pc, #440]	; (80053f0 <MX_GPIO_Init+0x26c>)
 8005238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523e:	603b      	str	r3, [r7, #0]
 8005240:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_LED1_GPIO_Port, EXT_LED1_Pin, GPIO_PIN_RESET);
 8005242:	2200      	movs	r2, #0
 8005244:	2108      	movs	r1, #8
 8005246:	486b      	ldr	r0, [pc, #428]	; (80053f4 <MX_GPIO_Init+0x270>)
 8005248:	f7fb fd46 	bl	8000cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800524c:	2200      	movs	r2, #0
 800524e:	f244 0181 	movw	r1, #16513	; 0x4081
 8005252:	4869      	ldr	r0, [pc, #420]	; (80053f8 <MX_GPIO_Init+0x274>)
 8005254:	f7fb fd40 	bl	8000cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005258:	2200      	movs	r2, #0
 800525a:	2140      	movs	r1, #64	; 0x40
 800525c:	4867      	ldr	r0, [pc, #412]	; (80053fc <MX_GPIO_Init+0x278>)
 800525e:	f7fb fd3b 	bl	8000cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin|EXT_BTN2_Pin;
 8005262:	f242 0308 	movw	r3, #8200	; 0x2008
 8005266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005268:	4b65      	ldr	r3, [pc, #404]	; (8005400 <MX_GPIO_Init+0x27c>)
 800526a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526c:	2300      	movs	r3, #0
 800526e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005270:	f107 031c 	add.w	r3, r7, #28
 8005274:	4619      	mov	r1, r3
 8005276:	4863      	ldr	r0, [pc, #396]	; (8005404 <MX_GPIO_Init+0x280>)
 8005278:	f7fb fb84 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER_DT_Pin;
 800527c:	2320      	movs	r3, #32
 800527e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005280:	2300      	movs	r3, #0
 8005282:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005284:	2300      	movs	r3, #0
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENCODER_DT_GPIO_Port, &GPIO_InitStruct);
 8005288:	f107 031c 	add.w	r3, r7, #28
 800528c:	4619      	mov	r1, r3
 800528e:	485e      	ldr	r0, [pc, #376]	; (8005408 <MX_GPIO_Init+0x284>)
 8005290:	f7fb fb78 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER_CLK_Pin;
 8005294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800529a:	4b59      	ldr	r3, [pc, #356]	; (8005400 <MX_GPIO_Init+0x27c>)
 800529c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800529e:	2300      	movs	r3, #0
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENCODER_CLK_GPIO_Port, &GPIO_InitStruct);
 80052a2:	f107 031c 	add.w	r3, r7, #28
 80052a6:	4619      	mov	r1, r3
 80052a8:	4857      	ldr	r0, [pc, #348]	; (8005408 <MX_GPIO_Init+0x284>)
 80052aa:	f7fb fb6b 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT_BTN1_Pin;
 80052ae:	2301      	movs	r3, #1
 80052b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80052b2:	4b56      	ldr	r3, [pc, #344]	; (800540c <MX_GPIO_Init+0x288>)
 80052b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EXT_BTN1_GPIO_Port, &GPIO_InitStruct);
 80052ba:	f107 031c 	add.w	r3, r7, #28
 80052be:	4619      	mov	r1, r3
 80052c0:	4850      	ldr	r0, [pc, #320]	; (8005404 <MX_GPIO_Init+0x280>)
 80052c2:	f7fb fb5f 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80052c6:	2332      	movs	r3, #50	; 0x32
 80052c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ca:	2302      	movs	r3, #2
 80052cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052d2:	2303      	movs	r3, #3
 80052d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80052d6:	230b      	movs	r3, #11
 80052d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052da:	f107 031c 	add.w	r3, r7, #28
 80052de:	4619      	mov	r1, r3
 80052e0:	4848      	ldr	r0, [pc, #288]	; (8005404 <MX_GPIO_Init+0x280>)
 80052e2:	f7fb fb4f 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80052e6:	2386      	movs	r3, #134	; 0x86
 80052e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ea:	2302      	movs	r3, #2
 80052ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052f2:	2303      	movs	r3, #3
 80052f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80052f6:	230b      	movs	r3, #11
 80052f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052fa:	f107 031c 	add.w	r3, r7, #28
 80052fe:	4619      	mov	r1, r3
 8005300:	483c      	ldr	r0, [pc, #240]	; (80053f4 <MX_GPIO_Init+0x270>)
 8005302:	f7fb fb3f 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT_LED1_Pin;
 8005306:	2308      	movs	r3, #8
 8005308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800530a:	2301      	movs	r3, #1
 800530c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530e:	2300      	movs	r3, #0
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005312:	2300      	movs	r3, #0
 8005314:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(EXT_LED1_GPIO_Port, &GPIO_InitStruct);
 8005316:	f107 031c 	add.w	r3, r7, #28
 800531a:	4619      	mov	r1, r3
 800531c:	4835      	ldr	r0, [pc, #212]	; (80053f4 <MX_GPIO_Init+0x270>)
 800531e:	f7fb fb31 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8005322:	f244 0381 	movw	r3, #16513	; 0x4081
 8005326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005328:	2301      	movs	r3, #1
 800532a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800532c:	2300      	movs	r3, #0
 800532e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005330:	2300      	movs	r3, #0
 8005332:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005334:	f107 031c 	add.w	r3, r7, #28
 8005338:	4619      	mov	r1, r3
 800533a:	482f      	ldr	r0, [pc, #188]	; (80053f8 <MX_GPIO_Init+0x274>)
 800533c:	f7fb fb22 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005346:	2302      	movs	r3, #2
 8005348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800534a:	2300      	movs	r3, #0
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800534e:	2303      	movs	r3, #3
 8005350:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005352:	230b      	movs	r3, #11
 8005354:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005356:	f107 031c 	add.w	r3, r7, #28
 800535a:	4619      	mov	r1, r3
 800535c:	4826      	ldr	r0, [pc, #152]	; (80053f8 <MX_GPIO_Init+0x274>)
 800535e:	f7fb fb11 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005362:	2340      	movs	r3, #64	; 0x40
 8005364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005366:	2301      	movs	r3, #1
 8005368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800536a:	2300      	movs	r3, #0
 800536c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800536e:	2300      	movs	r3, #0
 8005370:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005372:	f107 031c 	add.w	r3, r7, #28
 8005376:	4619      	mov	r1, r3
 8005378:	4820      	ldr	r0, [pc, #128]	; (80053fc <MX_GPIO_Init+0x278>)
 800537a:	f7fb fb03 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800537e:	2380      	movs	r3, #128	; 0x80
 8005380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005382:	2300      	movs	r3, #0
 8005384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005386:	2300      	movs	r3, #0
 8005388:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800538a:	f107 031c 	add.w	r3, r7, #28
 800538e:	4619      	mov	r1, r3
 8005390:	481a      	ldr	r0, [pc, #104]	; (80053fc <MX_GPIO_Init+0x278>)
 8005392:	f7fb faf7 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005396:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800539a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800539c:	2302      	movs	r3, #2
 800539e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053a4:	2303      	movs	r3, #3
 80053a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053a8:	230b      	movs	r3, #11
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80053ac:	f107 031c 	add.w	r3, r7, #28
 80053b0:	4619      	mov	r1, r3
 80053b2:	4812      	ldr	r0, [pc, #72]	; (80053fc <MX_GPIO_Init+0x278>)
 80053b4:	f7fb fae6 	bl	8000984 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80053b8:	2200      	movs	r2, #0
 80053ba:	2100      	movs	r1, #0
 80053bc:	2006      	movs	r0, #6
 80053be:	f7fb fa88 	bl	80008d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80053c2:	2006      	movs	r0, #6
 80053c4:	f7fb faa1 	bl	800090a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80053c8:	2200      	movs	r2, #0
 80053ca:	2100      	movs	r1, #0
 80053cc:	2009      	movs	r0, #9
 80053ce:	f7fb fa80 	bl	80008d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80053d2:	2009      	movs	r0, #9
 80053d4:	f7fb fa99 	bl	800090a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80053d8:	2200      	movs	r2, #0
 80053da:	2100      	movs	r1, #0
 80053dc:	2028      	movs	r0, #40	; 0x28
 80053de:	f7fb fa78 	bl	80008d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80053e2:	2028      	movs	r0, #40	; 0x28
 80053e4:	f7fb fa91 	bl	800090a <HAL_NVIC_EnableIRQ>

}
 80053e8:	bf00      	nop
 80053ea:	3730      	adds	r7, #48	; 0x30
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	40023800 	.word	0x40023800
 80053f4:	40020000 	.word	0x40020000
 80053f8:	40020400 	.word	0x40020400
 80053fc:	40021800 	.word	0x40021800
 8005400:	10110000 	.word	0x10110000
 8005404:	40020800 	.word	0x40020800
 8005408:	40021400 	.word	0x40021400
 800540c:	10210000 	.word	0x10210000

08005410 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af02      	add	r7, sp, #8
 8005416:	4603      	mov	r3, r0
 8005418:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800541a:	79fb      	ldrb	r3, [r7, #7]
 800541c:	f023 030f 	bic.w	r3, r3, #15
 8005420:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8005428:	7bfb      	ldrb	r3, [r7, #15]
 800542a:	f043 030c 	orr.w	r3, r3, #12
 800542e:	b2db      	uxtb	r3, r3
 8005430:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8005432:	7bfb      	ldrb	r3, [r7, #15]
 8005434:	f043 0308 	orr.w	r3, r3, #8
 8005438:	b2db      	uxtb	r3, r3
 800543a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800543c:	7bbb      	ldrb	r3, [r7, #14]
 800543e:	f043 030c 	orr.w	r3, r3, #12
 8005442:	b2db      	uxtb	r3, r3
 8005444:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8005446:	7bbb      	ldrb	r3, [r7, #14]
 8005448:	f043 0308 	orr.w	r3, r3, #8
 800544c:	b2db      	uxtb	r3, r3
 800544e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8005450:	f107 0208 	add.w	r2, r7, #8
 8005454:	2364      	movs	r3, #100	; 0x64
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	2304      	movs	r3, #4
 800545a:	214e      	movs	r1, #78	; 0x4e
 800545c:	4803      	ldr	r0, [pc, #12]	; (800546c <lcd_send_cmd+0x5c>)
 800545e:	f7fb fd17 	bl	8000e90 <HAL_I2C_Master_Transmit>
}
 8005462:	bf00      	nop
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20000264 	.word	0x20000264

08005470 <lcd_send_data>:

void lcd_send_data (char data)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af02      	add	r7, sp, #8
 8005476:	4603      	mov	r3, r0
 8005478:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	f023 030f 	bic.w	r3, r3, #15
 8005480:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8005482:	79fb      	ldrb	r3, [r7, #7]
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	f043 030d 	orr.w	r3, r3, #13
 800548e:	b2db      	uxtb	r3, r3
 8005490:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	f043 0309 	orr.w	r3, r3, #9
 8005498:	b2db      	uxtb	r3, r3
 800549a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800549c:	7bbb      	ldrb	r3, [r7, #14]
 800549e:	f043 030d 	orr.w	r3, r3, #13
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80054a6:	7bbb      	ldrb	r3, [r7, #14]
 80054a8:	f043 0309 	orr.w	r3, r3, #9
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80054b0:	f107 0208 	add.w	r2, r7, #8
 80054b4:	2364      	movs	r3, #100	; 0x64
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	2304      	movs	r3, #4
 80054ba:	214e      	movs	r1, #78	; 0x4e
 80054bc:	4803      	ldr	r0, [pc, #12]	; (80054cc <lcd_send_data+0x5c>)
 80054be:	f7fb fce7 	bl	8000e90 <HAL_I2C_Master_Transmit>
}
 80054c2:	bf00      	nop
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	20000264 	.word	0x20000264

080054d0 <lcd_clear>:

void lcd_clear (void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80054d6:	2080      	movs	r0, #128	; 0x80
 80054d8:	f7ff ff9a 	bl	8005410 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80054dc:	2300      	movs	r3, #0
 80054de:	607b      	str	r3, [r7, #4]
 80054e0:	e005      	b.n	80054ee <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80054e2:	2020      	movs	r0, #32
 80054e4:	f7ff ffc4 	bl	8005470 <lcd_send_data>
	for (int i=0; i<70; i++)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3301      	adds	r3, #1
 80054ec:	607b      	str	r3, [r7, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b45      	cmp	r3, #69	; 0x45
 80054f2:	ddf6      	ble.n	80054e2 <lcd_clear+0x12>
	}
}
 80054f4:	bf00      	nop
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
    switch (row)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <lcd_put_cur+0x16>
 800550c:	2b01      	cmp	r3, #1
 800550e:	d005      	beq.n	800551c <lcd_put_cur+0x20>
 8005510:	e009      	b.n	8005526 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005518:	603b      	str	r3, [r7, #0]
            break;
 800551a:	e004      	b.n	8005526 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005522:	603b      	str	r3, [r7, #0]
            break;
 8005524:	bf00      	nop
    }

    lcd_send_cmd (col);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	b2db      	uxtb	r3, r3
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff ff70 	bl	8005410 <lcd_send_cmd>
}
 8005530:	bf00      	nop
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <lcd_init>:


void lcd_init (void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800553c:	2032      	movs	r0, #50	; 0x32
 800553e:	f7fb f8cb 	bl	80006d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8005542:	2030      	movs	r0, #48	; 0x30
 8005544:	f7ff ff64 	bl	8005410 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8005548:	2005      	movs	r0, #5
 800554a:	f7fb f8c5 	bl	80006d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800554e:	2030      	movs	r0, #48	; 0x30
 8005550:	f7ff ff5e 	bl	8005410 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8005554:	2001      	movs	r0, #1
 8005556:	f7fb f8bf 	bl	80006d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800555a:	2030      	movs	r0, #48	; 0x30
 800555c:	f7ff ff58 	bl	8005410 <lcd_send_cmd>
	HAL_Delay(10);
 8005560:	200a      	movs	r0, #10
 8005562:	f7fb f8b9 	bl	80006d8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8005566:	2020      	movs	r0, #32
 8005568:	f7ff ff52 	bl	8005410 <lcd_send_cmd>
	HAL_Delay(10);
 800556c:	200a      	movs	r0, #10
 800556e:	f7fb f8b3 	bl	80006d8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8005572:	2028      	movs	r0, #40	; 0x28
 8005574:	f7ff ff4c 	bl	8005410 <lcd_send_cmd>
	HAL_Delay(1);
 8005578:	2001      	movs	r0, #1
 800557a:	f7fb f8ad 	bl	80006d8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800557e:	2008      	movs	r0, #8
 8005580:	f7ff ff46 	bl	8005410 <lcd_send_cmd>
	HAL_Delay(1);
 8005584:	2001      	movs	r0, #1
 8005586:	f7fb f8a7 	bl	80006d8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800558a:	2001      	movs	r0, #1
 800558c:	f7ff ff40 	bl	8005410 <lcd_send_cmd>
	HAL_Delay(1);
 8005590:	2001      	movs	r0, #1
 8005592:	f7fb f8a1 	bl	80006d8 <HAL_Delay>
	HAL_Delay(1);
 8005596:	2001      	movs	r0, #1
 8005598:	f7fb f89e 	bl	80006d8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800559c:	2006      	movs	r0, #6
 800559e:	f7ff ff37 	bl	8005410 <lcd_send_cmd>
	HAL_Delay(1);
 80055a2:	2001      	movs	r0, #1
 80055a4:	f7fb f898 	bl	80006d8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80055a8:	200c      	movs	r0, #12
 80055aa:	f7ff ff31 	bl	8005410 <lcd_send_cmd>
}
 80055ae:	bf00      	nop
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b082      	sub	sp, #8
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80055ba:	e006      	b.n	80055ca <lcd_send_string+0x18>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	607a      	str	r2, [r7, #4]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff ff53 	bl	8005470 <lcd_send_data>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1f4      	bne.n	80055bc <lcd_send_string+0xa>
}
 80055d2:	bf00      	nop
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80055e0:	4b1b      	ldr	r3, [pc, #108]	; (8005650 <MX_I2C1_Init+0x74>)
 80055e2:	4a1c      	ldr	r2, [pc, #112]	; (8005654 <MX_I2C1_Init+0x78>)
 80055e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80055e6:	4b1a      	ldr	r3, [pc, #104]	; (8005650 <MX_I2C1_Init+0x74>)
 80055e8:	4a1b      	ldr	r2, [pc, #108]	; (8005658 <MX_I2C1_Init+0x7c>)
 80055ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80055ec:	4b18      	ldr	r3, [pc, #96]	; (8005650 <MX_I2C1_Init+0x74>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80055f2:	4b17      	ldr	r3, [pc, #92]	; (8005650 <MX_I2C1_Init+0x74>)
 80055f4:	2201      	movs	r2, #1
 80055f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80055f8:	4b15      	ldr	r3, [pc, #84]	; (8005650 <MX_I2C1_Init+0x74>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80055fe:	4b14      	ldr	r3, [pc, #80]	; (8005650 <MX_I2C1_Init+0x74>)
 8005600:	2200      	movs	r2, #0
 8005602:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005604:	4b12      	ldr	r3, [pc, #72]	; (8005650 <MX_I2C1_Init+0x74>)
 8005606:	2200      	movs	r2, #0
 8005608:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800560a:	4b11      	ldr	r3, [pc, #68]	; (8005650 <MX_I2C1_Init+0x74>)
 800560c:	2200      	movs	r2, #0
 800560e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005610:	4b0f      	ldr	r3, [pc, #60]	; (8005650 <MX_I2C1_Init+0x74>)
 8005612:	2200      	movs	r2, #0
 8005614:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005616:	480e      	ldr	r0, [pc, #56]	; (8005650 <MX_I2C1_Init+0x74>)
 8005618:	f7fb fbaa 	bl	8000d70 <HAL_I2C_Init>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005622:	f000 fa05 	bl	8005a30 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005626:	2100      	movs	r1, #0
 8005628:	4809      	ldr	r0, [pc, #36]	; (8005650 <MX_I2C1_Init+0x74>)
 800562a:	f7fb fffb 	bl	8001624 <HAL_I2CEx_ConfigAnalogFilter>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005634:	f000 f9fc 	bl	8005a30 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005638:	2100      	movs	r1, #0
 800563a:	4805      	ldr	r0, [pc, #20]	; (8005650 <MX_I2C1_Init+0x74>)
 800563c:	f7fc f83d 	bl	80016ba <HAL_I2CEx_ConfigDigitalFilter>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005646:	f000 f9f3 	bl	8005a30 <Error_Handler>
  }

}
 800564a:	bf00      	nop
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20000218 	.word	0x20000218
 8005654:	40005400 	.word	0x40005400
 8005658:	00808cd2 	.word	0x00808cd2

0800565c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8005660:	4b1b      	ldr	r3, [pc, #108]	; (80056d0 <MX_I2C2_Init+0x74>)
 8005662:	4a1c      	ldr	r2, [pc, #112]	; (80056d4 <MX_I2C2_Init+0x78>)
 8005664:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8005666:	4b1a      	ldr	r3, [pc, #104]	; (80056d0 <MX_I2C2_Init+0x74>)
 8005668:	4a1b      	ldr	r2, [pc, #108]	; (80056d8 <MX_I2C2_Init+0x7c>)
 800566a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800566c:	4b18      	ldr	r3, [pc, #96]	; (80056d0 <MX_I2C2_Init+0x74>)
 800566e:	2200      	movs	r2, #0
 8005670:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005672:	4b17      	ldr	r3, [pc, #92]	; (80056d0 <MX_I2C2_Init+0x74>)
 8005674:	2201      	movs	r2, #1
 8005676:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005678:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <MX_I2C2_Init+0x74>)
 800567a:	2200      	movs	r2, #0
 800567c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800567e:	4b14      	ldr	r3, [pc, #80]	; (80056d0 <MX_I2C2_Init+0x74>)
 8005680:	2200      	movs	r2, #0
 8005682:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005684:	4b12      	ldr	r3, [pc, #72]	; (80056d0 <MX_I2C2_Init+0x74>)
 8005686:	2200      	movs	r2, #0
 8005688:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800568a:	4b11      	ldr	r3, [pc, #68]	; (80056d0 <MX_I2C2_Init+0x74>)
 800568c:	2200      	movs	r2, #0
 800568e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005690:	4b0f      	ldr	r3, [pc, #60]	; (80056d0 <MX_I2C2_Init+0x74>)
 8005692:	2200      	movs	r2, #0
 8005694:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005696:	480e      	ldr	r0, [pc, #56]	; (80056d0 <MX_I2C2_Init+0x74>)
 8005698:	f7fb fb6a 	bl	8000d70 <HAL_I2C_Init>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80056a2:	f000 f9c5 	bl	8005a30 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80056a6:	2100      	movs	r1, #0
 80056a8:	4809      	ldr	r0, [pc, #36]	; (80056d0 <MX_I2C2_Init+0x74>)
 80056aa:	f7fb ffbb 	bl	8001624 <HAL_I2CEx_ConfigAnalogFilter>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80056b4:	f000 f9bc 	bl	8005a30 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80056b8:	2100      	movs	r1, #0
 80056ba:	4805      	ldr	r0, [pc, #20]	; (80056d0 <MX_I2C2_Init+0x74>)
 80056bc:	f7fb fffd 	bl	80016ba <HAL_I2CEx_ConfigDigitalFilter>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80056c6:	f000 f9b3 	bl	8005a30 <Error_Handler>
  }

}
 80056ca:	bf00      	nop
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	20000264 	.word	0x20000264
 80056d4:	40005800 	.word	0x40005800
 80056d8:	00808cd2 	.word	0x00808cd2

080056dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08c      	sub	sp, #48	; 0x30
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056e4:	f107 031c 	add.w	r3, r7, #28
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	605a      	str	r2, [r3, #4]
 80056ee:	609a      	str	r2, [r3, #8]
 80056f0:	60da      	str	r2, [r3, #12]
 80056f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a2e      	ldr	r2, [pc, #184]	; (80057b4 <HAL_I2C_MspInit+0xd8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d129      	bne.n	8005752 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056fe:	4b2e      	ldr	r3, [pc, #184]	; (80057b8 <HAL_I2C_MspInit+0xdc>)
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	4a2d      	ldr	r2, [pc, #180]	; (80057b8 <HAL_I2C_MspInit+0xdc>)
 8005704:	f043 0302 	orr.w	r3, r3, #2
 8005708:	6313      	str	r3, [r2, #48]	; 0x30
 800570a:	4b2b      	ldr	r3, [pc, #172]	; (80057b8 <HAL_I2C_MspInit+0xdc>)
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	61bb      	str	r3, [r7, #24]
 8005714:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8005716:	f44f 7310 	mov.w	r3, #576	; 0x240
 800571a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800571c:	2312      	movs	r3, #18
 800571e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005720:	2301      	movs	r3, #1
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005724:	2303      	movs	r3, #3
 8005726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005728:	2304      	movs	r3, #4
 800572a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800572c:	f107 031c 	add.w	r3, r7, #28
 8005730:	4619      	mov	r1, r3
 8005732:	4822      	ldr	r0, [pc, #136]	; (80057bc <HAL_I2C_MspInit+0xe0>)
 8005734:	f7fb f926 	bl	8000984 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005738:	4b1f      	ldr	r3, [pc, #124]	; (80057b8 <HAL_I2C_MspInit+0xdc>)
 800573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573c:	4a1e      	ldr	r2, [pc, #120]	; (80057b8 <HAL_I2C_MspInit+0xdc>)
 800573e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005742:	6413      	str	r3, [r2, #64]	; 0x40
 8005744:	4b1c      	ldr	r3, [pc, #112]	; (80057b8 <HAL_I2C_MspInit+0xdc>)
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005750:	e02c      	b.n	80057ac <HAL_I2C_MspInit+0xd0>
  else if(i2cHandle->Instance==I2C2)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a1a      	ldr	r2, [pc, #104]	; (80057c0 <HAL_I2C_MspInit+0xe4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d127      	bne.n	80057ac <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800575c:	4b16      	ldr	r3, [pc, #88]	; (80057b8 <HAL_I2C_MspInit+0xdc>)
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <HAL_I2C_MspInit+0xdc>)
 8005762:	f043 0320 	orr.w	r3, r3, #32
 8005766:	6313      	str	r3, [r2, #48]	; 0x30
 8005768:	4b13      	ldr	r3, [pc, #76]	; (80057b8 <HAL_I2C_MspInit+0xdc>)
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	f003 0320 	and.w	r3, r3, #32
 8005770:	613b      	str	r3, [r7, #16]
 8005772:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005774:	2303      	movs	r3, #3
 8005776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005778:	2312      	movs	r3, #18
 800577a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800577c:	2301      	movs	r3, #1
 800577e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005780:	2303      	movs	r3, #3
 8005782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005784:	2304      	movs	r3, #4
 8005786:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005788:	f107 031c 	add.w	r3, r7, #28
 800578c:	4619      	mov	r1, r3
 800578e:	480d      	ldr	r0, [pc, #52]	; (80057c4 <HAL_I2C_MspInit+0xe8>)
 8005790:	f7fb f8f8 	bl	8000984 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005794:	4b08      	ldr	r3, [pc, #32]	; (80057b8 <HAL_I2C_MspInit+0xdc>)
 8005796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005798:	4a07      	ldr	r2, [pc, #28]	; (80057b8 <HAL_I2C_MspInit+0xdc>)
 800579a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800579e:	6413      	str	r3, [r2, #64]	; 0x40
 80057a0:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <HAL_I2C_MspInit+0xdc>)
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	68fb      	ldr	r3, [r7, #12]
}
 80057ac:	bf00      	nop
 80057ae:	3730      	adds	r7, #48	; 0x30
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	40005400 	.word	0x40005400
 80057b8:	40023800 	.word	0x40023800
 80057bc:	40020400 	.word	0x40020400
 80057c0:	40005800 	.word	0x40005800
 80057c4:	40021400 	.word	0x40021400

080057c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  // nadanie wartosci wzmocnien regulatora
  REG_PID.Kp = KP;
 80057cc:	4b22      	ldr	r3, [pc, #136]	; (8005858 <main+0x90>)
 80057ce:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80057d2:	619a      	str	r2, [r3, #24]
  REG_PID.Ki = KI;
 80057d4:	4b20      	ldr	r3, [pc, #128]	; (8005858 <main+0x90>)
 80057d6:	4a21      	ldr	r2, [pc, #132]	; (800585c <main+0x94>)
 80057d8:	61da      	str	r2, [r3, #28]
  REG_PID.Kd = KD;
 80057da:	4b1f      	ldr	r3, [pc, #124]	; (8005858 <main+0x90>)
 80057dc:	4a20      	ldr	r2, [pc, #128]	; (8005860 <main+0x98>)
 80057de:	621a      	str	r2, [r3, #32]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80057e0:	f7fa ff1c 	bl	800061c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80057e4:	f000 f84c 	bl	8005880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80057e8:	f7ff fccc 	bl	8005184 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 80057ec:	f000 fc48 	bl	8006080 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80057f0:	f7ff fef4 	bl	80055dc <MX_I2C1_Init>
  MX_I2C2_Init();
 80057f4:	f7ff ff32 	bl	800565c <MX_I2C2_Init>
  MX_TIM3_Init();
 80057f8:	f000 fa24 	bl	8005c44 <MX_TIM3_Init>
  MX_TIM4_Init();
 80057fc:	f000 fa9a 	bl	8005d34 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8005800:	f000 fb62 	bl	8005ec8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8005804:	f000 fb90 	bl	8005f28 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  BH1750_Init(&hi2c1);
 8005808:	4816      	ldr	r0, [pc, #88]	; (8005864 <main+0x9c>)
 800580a:	f7ff fbab 	bl	8004f64 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 800580e:	2011      	movs	r0, #17
 8005810:	f7ff fbde 	bl	8004fd0 <BH1750_SetMode>
  lcd_init();
 8005814:	f7ff fe90 	bl	8005538 <lcd_init>
  arm_pid_init_f32(&REG_PID, 1);
 8005818:	2101      	movs	r1, #1
 800581a:	480f      	ldr	r0, [pc, #60]	; (8005858 <main+0x90>)
 800581c:	f7fa fec8 	bl	80005b0 <arm_pid_init_f32>


  HAL_TIM_Base_Start_IT(&htim4);
 8005820:	4811      	ldr	r0, [pc, #68]	; (8005868 <main+0xa0>)
 8005822:	f7fd f961 	bl	8002ae8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005826:	2100      	movs	r1, #0
 8005828:	4810      	ldr	r0, [pc, #64]	; (800586c <main+0xa4>)
 800582a:	f7fd f9bd 	bl	8002ba8 <HAL_TIM_PWM_Start>


  HAL_UART_Receive_IT(&huart3, &OdebranaWiadomosc, 4);
 800582e:	2204      	movs	r2, #4
 8005830:	490f      	ldr	r1, [pc, #60]	; (8005870 <main+0xa8>)
 8005832:	4810      	ldr	r0, [pc, #64]	; (8005874 <main+0xac>)
 8005834:	f7fe f99c 	bl	8003b70 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  	  	ZmierzLUX(&OdczytLUX);
 8005838:	480f      	ldr	r0, [pc, #60]	; (8005878 <main+0xb0>)
 800583a:	f7ff fadb 	bl	8004df4 <ZmierzLUX>
	  	  	  	ZadajPWM(WartoscZadana, OdczytLUX, &REG_PID);
 800583e:	4b0f      	ldr	r3, [pc, #60]	; (800587c <main+0xb4>)
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <main+0xb0>)
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	4a03      	ldr	r2, [pc, #12]	; (8005858 <main+0x90>)
 800584a:	4619      	mov	r1, r3
 800584c:	f7ff fb2e 	bl	8004eac <ZadajPWM>
	  	  	  	HAL_Delay(100);
 8005850:	2064      	movs	r0, #100	; 0x64
 8005852:	f7fa ff41 	bl	80006d8 <HAL_Delay>
  {
 8005856:	e7ef      	b.n	8005838 <main+0x70>
 8005858:	200002b4 	.word	0x200002b4
 800585c:	3d4ccccd 	.word	0x3d4ccccd
 8005860:	38d1b717 	.word	0x38d1b717
 8005864:	20000218 	.word	0x20000218
 8005868:	200002d8 	.word	0x200002d8
 800586c:	20000318 	.word	0x20000318
 8005870:	200002b0 	.word	0x200002b0
 8005874:	20000358 	.word	0x20000358
 8005878:	200001f8 	.word	0x200001f8
 800587c:	200001fa 	.word	0x200001fa

08005880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b0b4      	sub	sp, #208	; 0xd0
 8005884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005886:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800588a:	2230      	movs	r2, #48	; 0x30
 800588c:	2100      	movs	r1, #0
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fcd8 	bl	8006244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005894:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	605a      	str	r2, [r3, #4]
 800589e:	609a      	str	r2, [r3, #8]
 80058a0:	60da      	str	r2, [r3, #12]
 80058a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80058a4:	f107 0308 	add.w	r3, r7, #8
 80058a8:	2284      	movs	r2, #132	; 0x84
 80058aa:	2100      	movs	r1, #0
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 fcc9 	bl	8006244 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80058b2:	f7fc f88b 	bl	80019cc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80058b6:	4b3a      	ldr	r3, [pc, #232]	; (80059a0 <SystemClock_Config+0x120>)
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	4a39      	ldr	r2, [pc, #228]	; (80059a0 <SystemClock_Config+0x120>)
 80058bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c0:	6413      	str	r3, [r2, #64]	; 0x40
 80058c2:	4b37      	ldr	r3, [pc, #220]	; (80059a0 <SystemClock_Config+0x120>)
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ca:	607b      	str	r3, [r7, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80058ce:	4b35      	ldr	r3, [pc, #212]	; (80059a4 <SystemClock_Config+0x124>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80058d6:	4a33      	ldr	r2, [pc, #204]	; (80059a4 <SystemClock_Config+0x124>)
 80058d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058dc:	6013      	str	r3, [r2, #0]
 80058de:	4b31      	ldr	r3, [pc, #196]	; (80059a4 <SystemClock_Config+0x124>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80058e6:	603b      	str	r3, [r7, #0]
 80058e8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80058ea:	2301      	movs	r3, #1
 80058ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80058f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80058f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80058f8:	2302      	movs	r3, #2
 80058fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80058fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005902:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005906:	2304      	movs	r3, #4
 8005908:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 800590c:	2348      	movs	r3, #72	; 0x48
 800590e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005912:	2302      	movs	r3, #2
 8005914:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8005918:	2303      	movs	r3, #3
 800591a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800591e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005922:	4618      	mov	r0, r3
 8005924:	f7fc f862 	bl	80019ec <HAL_RCC_OscConfig>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800592e:	f000 f87f 	bl	8005a30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005932:	230f      	movs	r3, #15
 8005934:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005938:	2302      	movs	r3, #2
 800593a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800593e:	2300      	movs	r3, #0
 8005940:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005948:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800594c:	2300      	movs	r3, #0
 800594e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005952:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005956:	2102      	movs	r1, #2
 8005958:	4618      	mov	r0, r3
 800595a:	f7fc fab7 	bl	8001ecc <HAL_RCC_ClockConfig>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8005964:	f000 f864 	bl	8005a30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8005968:	4b0f      	ldr	r3, [pc, #60]	; (80059a8 <SystemClock_Config+0x128>)
 800596a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800596c:	2300      	movs	r3, #0
 800596e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005970:	2300      	movs	r3, #0
 8005972:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005974:	2300      	movs	r3, #0
 8005976:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8005978:	2300      	movs	r3, #0
 800597a:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800597c:	2300      	movs	r3, #0
 800597e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005982:	f107 0308 	add.w	r3, r7, #8
 8005986:	4618      	mov	r0, r3
 8005988:	f7fc fc94 	bl	80022b4 <HAL_RCCEx_PeriphCLKConfig>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8005992:	f000 f84d 	bl	8005a30 <Error_Handler>
  }
}
 8005996:	bf00      	nop
 8005998:	37d0      	adds	r7, #208	; 0xd0
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	40023800 	.word	0x40023800
 80059a4:	40007000 	.word	0x40007000
 80059a8:	0020c180 	.word	0x0020c180

080059ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a07      	ldr	r2, [pc, #28]	; (80059d8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d108      	bne.n	80059d0 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		MakeLCDgreatAgain(WartoscZadana, OdczytLUX);
 80059be:	4b07      	ldr	r3, [pc, #28]	; (80059dc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	4619      	mov	r1, r3
 80059ca:	4610      	mov	r0, r2
 80059cc:	f7ff fa28 	bl	8004e20 <MakeLCDgreatAgain>
	}
}
 80059d0:	bf00      	nop
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40000800 	.word	0x40000800
 80059dc:	200001fa 	.word	0x200001fa
 80059e0:	200001f8 	.word	0x200001f8

080059e4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
	//WartoscZadana = atoi(OdebranaWiadomosc);
	WartoscZadana = atoi(OdebranaWiadomosc);
 80059ec:	4807      	ldr	r0, [pc, #28]	; (8005a0c <HAL_UART_RxCpltCallback+0x28>)
 80059ee:	f000 fbfa 	bl	80061e6 <atoi>
 80059f2:	4603      	mov	r3, r0
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <HAL_UART_RxCpltCallback+0x2c>)
 80059f8:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart3, &OdebranaWiadomosc, 4);
 80059fa:	2204      	movs	r2, #4
 80059fc:	4903      	ldr	r1, [pc, #12]	; (8005a0c <HAL_UART_RxCpltCallback+0x28>)
 80059fe:	4805      	ldr	r0, [pc, #20]	; (8005a14 <HAL_UART_RxCpltCallback+0x30>)
 8005a00:	f7fe f8b6 	bl	8003b70 <HAL_UART_Receive_IT>
}
 8005a04:	bf00      	nop
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	200002b0 	.word	0x200002b0
 8005a10:	200001fa 	.word	0x200001fa
 8005a14:	20000358 	.word	0x20000358

08005a18 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	4603      	mov	r3, r0
 8005a20:	80fb      	strh	r3, [r7, #6]

}
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
	...

08005a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8005a34:	2200      	movs	r2, #0
 8005a36:	2101      	movs	r1, #1
 8005a38:	480b      	ldr	r0, [pc, #44]	; (8005a68 <Error_Handler+0x38>)
 8005a3a:	f7fb f94d 	bl	8000cd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8005a3e:	2200      	movs	r2, #0
 8005a40:	2180      	movs	r1, #128	; 0x80
 8005a42:	4809      	ldr	r0, [pc, #36]	; (8005a68 <Error_Handler+0x38>)
 8005a44:	f7fb f948 	bl	8000cd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a4e:	4806      	ldr	r0, [pc, #24]	; (8005a68 <Error_Handler+0x38>)
 8005a50:	f7fb f942 	bl	8000cd8 <HAL_GPIO_WritePin>
  while(1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8005a54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a58:	4803      	ldr	r0, [pc, #12]	; (8005a68 <Error_Handler+0x38>)
 8005a5a:	f7fb f956 	bl	8000d0a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8005a5e:	2064      	movs	r0, #100	; 0x64
 8005a60:	f7fa fe3a 	bl	80006d8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8005a64:	e7f6      	b.n	8005a54 <Error_Handler+0x24>
 8005a66:	bf00      	nop
 8005a68:	40020400 	.word	0x40020400

08005a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005a72:	4b0f      	ldr	r3, [pc, #60]	; (8005ab0 <HAL_MspInit+0x44>)
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	4a0e      	ldr	r2, [pc, #56]	; (8005ab0 <HAL_MspInit+0x44>)
 8005a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a7e:	4b0c      	ldr	r3, [pc, #48]	; (8005ab0 <HAL_MspInit+0x44>)
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a86:	607b      	str	r3, [r7, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a8a:	4b09      	ldr	r3, [pc, #36]	; (8005ab0 <HAL_MspInit+0x44>)
 8005a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8e:	4a08      	ldr	r2, [pc, #32]	; (8005ab0 <HAL_MspInit+0x44>)
 8005a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a94:	6453      	str	r3, [r2, #68]	; 0x44
 8005a96:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <HAL_MspInit+0x44>)
 8005a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40023800 	.word	0x40023800

08005ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005ab8:	bf00      	nop
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ac6:	e7fe      	b.n	8005ac6 <HardFault_Handler+0x4>

08005ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005acc:	e7fe      	b.n	8005acc <MemManage_Handler+0x4>

08005ace <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ad2:	e7fe      	b.n	8005ad2 <BusFault_Handler+0x4>

08005ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ad8:	e7fe      	b.n	8005ad8 <UsageFault_Handler+0x4>

08005ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ada:	b480      	push	{r7}
 8005adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ade:	bf00      	nop
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005aec:	bf00      	nop
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005af6:	b480      	push	{r7}
 8005af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005afa:	bf00      	nop
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b08:	f7fa fdc6 	bl	8000698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b0c:	bf00      	nop
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005b14:	2001      	movs	r0, #1
 8005b16:	f7fb f913 	bl	8000d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005b1a:	bf00      	nop
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005b22:	2008      	movs	r0, #8
 8005b24:	f7fb f90c 	bl	8000d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005b28:	bf00      	nop
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005b30:	4802      	ldr	r0, [pc, #8]	; (8005b3c <TIM3_IRQHandler+0x10>)
 8005b32:	f7fd f87d 	bl	8002c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005b36:	bf00      	nop
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20000318 	.word	0x20000318

08005b40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005b44:	4802      	ldr	r0, [pc, #8]	; (8005b50 <TIM4_IRQHandler+0x10>)
 8005b46:	f7fd f873 	bl	8002c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005b4a:	bf00      	nop
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	200002d8 	.word	0x200002d8

08005b54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005b58:	4802      	ldr	r0, [pc, #8]	; (8005b64 <USART3_IRQHandler+0x10>)
 8005b5a:	f7fe f8ab 	bl	8003cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005b5e:	bf00      	nop
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	20000358 	.word	0x20000358

08005b68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005b6c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005b70:	f7fb f8e6 	bl	8000d40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005b74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005b78:	f7fb f8e2 	bl	8000d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005b7c:	bf00      	nop
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005b88:	4b11      	ldr	r3, [pc, #68]	; (8005bd0 <_sbrk+0x50>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d102      	bne.n	8005b96 <_sbrk+0x16>
		heap_end = &end;
 8005b90:	4b0f      	ldr	r3, [pc, #60]	; (8005bd0 <_sbrk+0x50>)
 8005b92:	4a10      	ldr	r2, [pc, #64]	; (8005bd4 <_sbrk+0x54>)
 8005b94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005b96:	4b0e      	ldr	r3, [pc, #56]	; (8005bd0 <_sbrk+0x50>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	; (8005bd0 <_sbrk+0x50>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	466a      	mov	r2, sp
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d907      	bls.n	8005bba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005baa:	f000 fb21 	bl	80061f0 <__errno>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	230c      	movs	r3, #12
 8005bb2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb8:	e006      	b.n	8005bc8 <_sbrk+0x48>
	}

	heap_end += incr;
 8005bba:	4b05      	ldr	r3, [pc, #20]	; (8005bd0 <_sbrk+0x50>)
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	4a03      	ldr	r2, [pc, #12]	; (8005bd0 <_sbrk+0x50>)
 8005bc4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	200001fc 	.word	0x200001fc
 8005bd4:	20000860 	.word	0x20000860

08005bd8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005bdc:	4b15      	ldr	r3, [pc, #84]	; (8005c34 <SystemInit+0x5c>)
 8005bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be2:	4a14      	ldr	r2, [pc, #80]	; (8005c34 <SystemInit+0x5c>)
 8005be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005bec:	4b12      	ldr	r3, [pc, #72]	; (8005c38 <SystemInit+0x60>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a11      	ldr	r2, [pc, #68]	; (8005c38 <SystemInit+0x60>)
 8005bf2:	f043 0301 	orr.w	r3, r3, #1
 8005bf6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005bf8:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <SystemInit+0x60>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005bfe:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <SystemInit+0x60>)
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	490d      	ldr	r1, [pc, #52]	; (8005c38 <SystemInit+0x60>)
 8005c04:	4b0d      	ldr	r3, [pc, #52]	; (8005c3c <SystemInit+0x64>)
 8005c06:	4013      	ands	r3, r2
 8005c08:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005c0a:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <SystemInit+0x60>)
 8005c0c:	4a0c      	ldr	r2, [pc, #48]	; (8005c40 <SystemInit+0x68>)
 8005c0e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005c10:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <SystemInit+0x60>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a08      	ldr	r2, [pc, #32]	; (8005c38 <SystemInit+0x60>)
 8005c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005c1c:	4b06      	ldr	r3, [pc, #24]	; (8005c38 <SystemInit+0x60>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005c22:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <SystemInit+0x5c>)
 8005c24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c28:	609a      	str	r2, [r3, #8]
#endif
}
 8005c2a:	bf00      	nop
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	e000ed00 	.word	0xe000ed00
 8005c38:	40023800 	.word	0x40023800
 8005c3c:	fef6ffff 	.word	0xfef6ffff
 8005c40:	24003010 	.word	0x24003010

08005c44 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08e      	sub	sp, #56	; 0x38
 8005c48:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	605a      	str	r2, [r3, #4]
 8005c54:	609a      	str	r2, [r3, #8]
 8005c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c58:	f107 031c 	add.w	r3, r7, #28
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	605a      	str	r2, [r3, #4]
 8005c62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c64:	463b      	mov	r3, r7
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	605a      	str	r2, [r3, #4]
 8005c6c:	609a      	str	r2, [r3, #8]
 8005c6e:	60da      	str	r2, [r3, #12]
 8005c70:	611a      	str	r2, [r3, #16]
 8005c72:	615a      	str	r2, [r3, #20]
 8005c74:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8005c76:	4b2d      	ldr	r3, [pc, #180]	; (8005d2c <MX_TIM3_Init+0xe8>)
 8005c78:	4a2d      	ldr	r2, [pc, #180]	; (8005d30 <MX_TIM3_Init+0xec>)
 8005c7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8005c7c:	4b2b      	ldr	r3, [pc, #172]	; (8005d2c <MX_TIM3_Init+0xe8>)
 8005c7e:	2247      	movs	r2, #71	; 0x47
 8005c80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c82:	4b2a      	ldr	r3, [pc, #168]	; (8005d2c <MX_TIM3_Init+0xe8>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8005c88:	4b28      	ldr	r3, [pc, #160]	; (8005d2c <MX_TIM3_Init+0xe8>)
 8005c8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005c8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c90:	4b26      	ldr	r3, [pc, #152]	; (8005d2c <MX_TIM3_Init+0xe8>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c96:	4b25      	ldr	r3, [pc, #148]	; (8005d2c <MX_TIM3_Init+0xe8>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005c9c:	4823      	ldr	r0, [pc, #140]	; (8005d2c <MX_TIM3_Init+0xe8>)
 8005c9e:	f7fc fef7 	bl	8002a90 <HAL_TIM_Base_Init>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005ca8:	f7ff fec2 	bl	8005a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005cb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	481c      	ldr	r0, [pc, #112]	; (8005d2c <MX_TIM3_Init+0xe8>)
 8005cba:	f7fd f9f1 	bl	80030a0 <HAL_TIM_ConfigClockSource>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005cc4:	f7ff feb4 	bl	8005a30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005cc8:	4818      	ldr	r0, [pc, #96]	; (8005d2c <MX_TIM3_Init+0xe8>)
 8005cca:	f7fc ff37 	bl	8002b3c <HAL_TIM_PWM_Init>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005cd4:	f7ff feac 	bl	8005a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005ce0:	f107 031c 	add.w	r3, r7, #28
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4811      	ldr	r0, [pc, #68]	; (8005d2c <MX_TIM3_Init+0xe8>)
 8005ce8:	f7fd fe7a 	bl	80039e0 <HAL_TIMEx_MasterConfigSynchronization>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005cf2:	f7ff fe9d 	bl	8005a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005cf6:	2360      	movs	r3, #96	; 0x60
 8005cf8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005d06:	463b      	mov	r3, r7
 8005d08:	2200      	movs	r2, #0
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4807      	ldr	r0, [pc, #28]	; (8005d2c <MX_TIM3_Init+0xe8>)
 8005d0e:	f7fd f8af 	bl	8002e70 <HAL_TIM_PWM_ConfigChannel>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8005d18:	f7ff fe8a 	bl	8005a30 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8005d1c:	4803      	ldr	r0, [pc, #12]	; (8005d2c <MX_TIM3_Init+0xe8>)
 8005d1e:	f000 f89b 	bl	8005e58 <HAL_TIM_MspPostInit>

}
 8005d22:	bf00      	nop
 8005d24:	3738      	adds	r7, #56	; 0x38
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000318 	.word	0x20000318
 8005d30:	40000400 	.word	0x40000400

08005d34 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d3a:	f107 0310 	add.w	r3, r7, #16
 8005d3e:	2200      	movs	r2, #0
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	605a      	str	r2, [r3, #4]
 8005d44:	609a      	str	r2, [r3, #8]
 8005d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d48:	1d3b      	adds	r3, r7, #4
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	605a      	str	r2, [r3, #4]
 8005d50:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8005d52:	4b1e      	ldr	r3, [pc, #120]	; (8005dcc <MX_TIM4_Init+0x98>)
 8005d54:	4a1e      	ldr	r2, [pc, #120]	; (8005dd0 <MX_TIM4_Init+0x9c>)
 8005d56:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8005d58:	4b1c      	ldr	r3, [pc, #112]	; (8005dcc <MX_TIM4_Init+0x98>)
 8005d5a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8005d5e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d60:	4b1a      	ldr	r3, [pc, #104]	; (8005dcc <MX_TIM4_Init+0x98>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 8005d66:	4b19      	ldr	r3, [pc, #100]	; (8005dcc <MX_TIM4_Init+0x98>)
 8005d68:	f241 3287 	movw	r2, #4999	; 0x1387
 8005d6c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d6e:	4b17      	ldr	r3, [pc, #92]	; (8005dcc <MX_TIM4_Init+0x98>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d74:	4b15      	ldr	r3, [pc, #84]	; (8005dcc <MX_TIM4_Init+0x98>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005d7a:	4814      	ldr	r0, [pc, #80]	; (8005dcc <MX_TIM4_Init+0x98>)
 8005d7c:	f7fc fe88 	bl	8002a90 <HAL_TIM_Base_Init>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8005d86:	f7ff fe53 	bl	8005a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005d90:	f107 0310 	add.w	r3, r7, #16
 8005d94:	4619      	mov	r1, r3
 8005d96:	480d      	ldr	r0, [pc, #52]	; (8005dcc <MX_TIM4_Init+0x98>)
 8005d98:	f7fd f982 	bl	80030a0 <HAL_TIM_ConfigClockSource>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8005da2:	f7ff fe45 	bl	8005a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005da6:	2300      	movs	r3, #0
 8005da8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005daa:	2300      	movs	r3, #0
 8005dac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005dae:	1d3b      	adds	r3, r7, #4
 8005db0:	4619      	mov	r1, r3
 8005db2:	4806      	ldr	r0, [pc, #24]	; (8005dcc <MX_TIM4_Init+0x98>)
 8005db4:	f7fd fe14 	bl	80039e0 <HAL_TIMEx_MasterConfigSynchronization>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8005dbe:	f7ff fe37 	bl	8005a30 <Error_Handler>
  }

}
 8005dc2:	bf00      	nop
 8005dc4:	3720      	adds	r7, #32
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	200002d8 	.word	0x200002d8
 8005dd0:	40000800 	.word	0x40000800

08005dd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1a      	ldr	r2, [pc, #104]	; (8005e4c <HAL_TIM_Base_MspInit+0x78>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d114      	bne.n	8005e10 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005de6:	4b1a      	ldr	r3, [pc, #104]	; (8005e50 <HAL_TIM_Base_MspInit+0x7c>)
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	4a19      	ldr	r2, [pc, #100]	; (8005e50 <HAL_TIM_Base_MspInit+0x7c>)
 8005dec:	f043 0302 	orr.w	r3, r3, #2
 8005df0:	6413      	str	r3, [r2, #64]	; 0x40
 8005df2:	4b17      	ldr	r3, [pc, #92]	; (8005e50 <HAL_TIM_Base_MspInit+0x7c>)
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2100      	movs	r1, #0
 8005e02:	201d      	movs	r0, #29
 8005e04:	f7fa fd65 	bl	80008d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005e08:	201d      	movs	r0, #29
 8005e0a:	f7fa fd7e 	bl	800090a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005e0e:	e018      	b.n	8005e42 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a0f      	ldr	r2, [pc, #60]	; (8005e54 <HAL_TIM_Base_MspInit+0x80>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d113      	bne.n	8005e42 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005e1a:	4b0d      	ldr	r3, [pc, #52]	; (8005e50 <HAL_TIM_Base_MspInit+0x7c>)
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	4a0c      	ldr	r2, [pc, #48]	; (8005e50 <HAL_TIM_Base_MspInit+0x7c>)
 8005e20:	f043 0304 	orr.w	r3, r3, #4
 8005e24:	6413      	str	r3, [r2, #64]	; 0x40
 8005e26:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <HAL_TIM_Base_MspInit+0x7c>)
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	60bb      	str	r3, [r7, #8]
 8005e30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005e32:	2200      	movs	r2, #0
 8005e34:	2100      	movs	r1, #0
 8005e36:	201e      	movs	r0, #30
 8005e38:	f7fa fd4b 	bl	80008d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005e3c:	201e      	movs	r0, #30
 8005e3e:	f7fa fd64 	bl	800090a <HAL_NVIC_EnableIRQ>
}
 8005e42:	bf00      	nop
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	40000400 	.word	0x40000400
 8005e50:	40023800 	.word	0x40023800
 8005e54:	40000800 	.word	0x40000800

08005e58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e60:	f107 030c 	add.w	r3, r7, #12
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	605a      	str	r2, [r3, #4]
 8005e6a:	609a      	str	r2, [r3, #8]
 8005e6c:	60da      	str	r2, [r3, #12]
 8005e6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a11      	ldr	r2, [pc, #68]	; (8005ebc <HAL_TIM_MspPostInit+0x64>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d11b      	bne.n	8005eb2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e7a:	4b11      	ldr	r3, [pc, #68]	; (8005ec0 <HAL_TIM_MspPostInit+0x68>)
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	4a10      	ldr	r2, [pc, #64]	; (8005ec0 <HAL_TIM_MspPostInit+0x68>)
 8005e80:	f043 0301 	orr.w	r3, r3, #1
 8005e84:	6313      	str	r3, [r2, #48]	; 0x30
 8005e86:	4b0e      	ldr	r3, [pc, #56]	; (8005ec0 <HAL_TIM_MspPostInit+0x68>)
 8005e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	60bb      	str	r3, [r7, #8]
 8005e90:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005e92:	2340      	movs	r3, #64	; 0x40
 8005e94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e96:	2302      	movs	r3, #2
 8005e98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ea6:	f107 030c 	add.w	r3, r7, #12
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4805      	ldr	r0, [pc, #20]	; (8005ec4 <HAL_TIM_MspPostInit+0x6c>)
 8005eae:	f7fa fd69 	bl	8000984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005eb2:	bf00      	nop
 8005eb4:	3720      	adds	r7, #32
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	40000400 	.word	0x40000400
 8005ec0:	40023800 	.word	0x40023800
 8005ec4:	40020000 	.word	0x40020000

08005ec8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8005ecc:	4b14      	ldr	r3, [pc, #80]	; (8005f20 <MX_USART2_UART_Init+0x58>)
 8005ece:	4a15      	ldr	r2, [pc, #84]	; (8005f24 <MX_USART2_UART_Init+0x5c>)
 8005ed0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005ed2:	4b13      	ldr	r3, [pc, #76]	; (8005f20 <MX_USART2_UART_Init+0x58>)
 8005ed4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005ed8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005eda:	4b11      	ldr	r3, [pc, #68]	; (8005f20 <MX_USART2_UART_Init+0x58>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005ee0:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <MX_USART2_UART_Init+0x58>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005ee6:	4b0e      	ldr	r3, [pc, #56]	; (8005f20 <MX_USART2_UART_Init+0x58>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005eec:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <MX_USART2_UART_Init+0x58>)
 8005eee:	220c      	movs	r2, #12
 8005ef0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ef2:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <MX_USART2_UART_Init+0x58>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ef8:	4b09      	ldr	r3, [pc, #36]	; (8005f20 <MX_USART2_UART_Init+0x58>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005efe:	4b08      	ldr	r3, [pc, #32]	; (8005f20 <MX_USART2_UART_Init+0x58>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <MX_USART2_UART_Init+0x58>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005f0a:	4805      	ldr	r0, [pc, #20]	; (8005f20 <MX_USART2_UART_Init+0x58>)
 8005f0c:	f7fd fde2 	bl	8003ad4 <HAL_UART_Init>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005f16:	f7ff fd8b 	bl	8005a30 <Error_Handler>
  }

}
 8005f1a:	bf00      	nop
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	200003d8 	.word	0x200003d8
 8005f24:	40004400 	.word	0x40004400

08005f28 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8005f2c:	4b14      	ldr	r3, [pc, #80]	; (8005f80 <MX_USART3_UART_Init+0x58>)
 8005f2e:	4a15      	ldr	r2, [pc, #84]	; (8005f84 <MX_USART3_UART_Init+0x5c>)
 8005f30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8005f32:	4b13      	ldr	r3, [pc, #76]	; (8005f80 <MX_USART3_UART_Init+0x58>)
 8005f34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005f38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005f3a:	4b11      	ldr	r3, [pc, #68]	; (8005f80 <MX_USART3_UART_Init+0x58>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005f40:	4b0f      	ldr	r3, [pc, #60]	; (8005f80 <MX_USART3_UART_Init+0x58>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005f46:	4b0e      	ldr	r3, [pc, #56]	; (8005f80 <MX_USART3_UART_Init+0x58>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005f4c:	4b0c      	ldr	r3, [pc, #48]	; (8005f80 <MX_USART3_UART_Init+0x58>)
 8005f4e:	220c      	movs	r2, #12
 8005f50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f52:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <MX_USART3_UART_Init+0x58>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f58:	4b09      	ldr	r3, [pc, #36]	; (8005f80 <MX_USART3_UART_Init+0x58>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f5e:	4b08      	ldr	r3, [pc, #32]	; (8005f80 <MX_USART3_UART_Init+0x58>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f64:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <MX_USART3_UART_Init+0x58>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005f6a:	4805      	ldr	r0, [pc, #20]	; (8005f80 <MX_USART3_UART_Init+0x58>)
 8005f6c:	f7fd fdb2 	bl	8003ad4 <HAL_UART_Init>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005f76:	f7ff fd5b 	bl	8005a30 <Error_Handler>
  }

}
 8005f7a:	bf00      	nop
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000358 	.word	0x20000358
 8005f84:	40004800 	.word	0x40004800

08005f88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08c      	sub	sp, #48	; 0x30
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f90:	f107 031c 	add.w	r3, r7, #28
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	605a      	str	r2, [r3, #4]
 8005f9a:	609a      	str	r2, [r3, #8]
 8005f9c:	60da      	str	r2, [r3, #12]
 8005f9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a32      	ldr	r2, [pc, #200]	; (8006070 <HAL_UART_MspInit+0xe8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d128      	bne.n	8005ffc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005faa:	4b32      	ldr	r3, [pc, #200]	; (8006074 <HAL_UART_MspInit+0xec>)
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	4a31      	ldr	r2, [pc, #196]	; (8006074 <HAL_UART_MspInit+0xec>)
 8005fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fb6:	4b2f      	ldr	r3, [pc, #188]	; (8006074 <HAL_UART_MspInit+0xec>)
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fbe:	61bb      	str	r3, [r7, #24]
 8005fc0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fc2:	4b2c      	ldr	r3, [pc, #176]	; (8006074 <HAL_UART_MspInit+0xec>)
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc6:	4a2b      	ldr	r2, [pc, #172]	; (8006074 <HAL_UART_MspInit+0xec>)
 8005fc8:	f043 0308 	orr.w	r3, r3, #8
 8005fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8005fce:	4b29      	ldr	r3, [pc, #164]	; (8006074 <HAL_UART_MspInit+0xec>)
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005fda:	2360      	movs	r3, #96	; 0x60
 8005fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fde:	2302      	movs	r3, #2
 8005fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005fea:	2307      	movs	r3, #7
 8005fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005fee:	f107 031c 	add.w	r3, r7, #28
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4820      	ldr	r0, [pc, #128]	; (8006078 <HAL_UART_MspInit+0xf0>)
 8005ff6:	f7fa fcc5 	bl	8000984 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005ffa:	e035      	b.n	8006068 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a1e      	ldr	r2, [pc, #120]	; (800607c <HAL_UART_MspInit+0xf4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d130      	bne.n	8006068 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006006:	4b1b      	ldr	r3, [pc, #108]	; (8006074 <HAL_UART_MspInit+0xec>)
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	4a1a      	ldr	r2, [pc, #104]	; (8006074 <HAL_UART_MspInit+0xec>)
 800600c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006010:	6413      	str	r3, [r2, #64]	; 0x40
 8006012:	4b18      	ldr	r3, [pc, #96]	; (8006074 <HAL_UART_MspInit+0xec>)
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800601a:	613b      	str	r3, [r7, #16]
 800601c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800601e:	4b15      	ldr	r3, [pc, #84]	; (8006074 <HAL_UART_MspInit+0xec>)
 8006020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006022:	4a14      	ldr	r2, [pc, #80]	; (8006074 <HAL_UART_MspInit+0xec>)
 8006024:	f043 0308 	orr.w	r3, r3, #8
 8006028:	6313      	str	r3, [r2, #48]	; 0x30
 800602a:	4b12      	ldr	r3, [pc, #72]	; (8006074 <HAL_UART_MspInit+0xec>)
 800602c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006036:	f44f 7340 	mov.w	r3, #768	; 0x300
 800603a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800603c:	2302      	movs	r3, #2
 800603e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006040:	2300      	movs	r3, #0
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006044:	2303      	movs	r3, #3
 8006046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006048:	2307      	movs	r3, #7
 800604a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800604c:	f107 031c 	add.w	r3, r7, #28
 8006050:	4619      	mov	r1, r3
 8006052:	4809      	ldr	r0, [pc, #36]	; (8006078 <HAL_UART_MspInit+0xf0>)
 8006054:	f7fa fc96 	bl	8000984 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006058:	2200      	movs	r2, #0
 800605a:	2100      	movs	r1, #0
 800605c:	2027      	movs	r0, #39	; 0x27
 800605e:	f7fa fc38 	bl	80008d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006062:	2027      	movs	r0, #39	; 0x27
 8006064:	f7fa fc51 	bl	800090a <HAL_NVIC_EnableIRQ>
}
 8006068:	bf00      	nop
 800606a:	3730      	adds	r7, #48	; 0x30
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	40004400 	.word	0x40004400
 8006074:	40023800 	.word	0x40023800
 8006078:	40020c00 	.word	0x40020c00
 800607c:	40004800 	.word	0x40004800

08006080 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006084:	4b14      	ldr	r3, [pc, #80]	; (80060d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006086:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800608a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800608c:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800608e:	2206      	movs	r2, #6
 8006090:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006092:	4b11      	ldr	r3, [pc, #68]	; (80060d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006094:	2202      	movs	r2, #2
 8006096:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006098:	4b0f      	ldr	r3, [pc, #60]	; (80060d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800609a:	2200      	movs	r2, #0
 800609c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800609e:	4b0e      	ldr	r3, [pc, #56]	; (80060d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80060a0:	2202      	movs	r2, #2
 80060a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80060a4:	4b0c      	ldr	r3, [pc, #48]	; (80060d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80060a6:	2201      	movs	r2, #1
 80060a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80060aa:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80060b0:	4b09      	ldr	r3, [pc, #36]	; (80060d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80060b6:	4b08      	ldr	r3, [pc, #32]	; (80060d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80060b8:	2201      	movs	r2, #1
 80060ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80060bc:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80060be:	2200      	movs	r2, #0
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80060c2:	4805      	ldr	r0, [pc, #20]	; (80060d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80060c4:	f7fb fb45 	bl	8001752 <HAL_PCD_Init>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80060ce:	f7ff fcaf 	bl	8005a30 <Error_Handler>
  }

}
 80060d2:	bf00      	nop
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20000458 	.word	0x20000458

080060dc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b08a      	sub	sp, #40	; 0x28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060e4:	f107 0314 	add.w	r3, r7, #20
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	605a      	str	r2, [r3, #4]
 80060ee:	609a      	str	r2, [r3, #8]
 80060f0:	60da      	str	r2, [r3, #12]
 80060f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060fc:	d141      	bne.n	8006182 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060fe:	4b23      	ldr	r3, [pc, #140]	; (800618c <HAL_PCD_MspInit+0xb0>)
 8006100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006102:	4a22      	ldr	r2, [pc, #136]	; (800618c <HAL_PCD_MspInit+0xb0>)
 8006104:	f043 0301 	orr.w	r3, r3, #1
 8006108:	6313      	str	r3, [r2, #48]	; 0x30
 800610a:	4b20      	ldr	r3, [pc, #128]	; (800618c <HAL_PCD_MspInit+0xb0>)
 800610c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006116:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800611a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800611c:	2302      	movs	r3, #2
 800611e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006120:	2300      	movs	r3, #0
 8006122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006124:	2303      	movs	r3, #3
 8006126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006128:	230a      	movs	r3, #10
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800612c:	f107 0314 	add.w	r3, r7, #20
 8006130:	4619      	mov	r1, r3
 8006132:	4817      	ldr	r0, [pc, #92]	; (8006190 <HAL_PCD_MspInit+0xb4>)
 8006134:	f7fa fc26 	bl	8000984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800613c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800613e:	2300      	movs	r3, #0
 8006140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006142:	2300      	movs	r3, #0
 8006144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006146:	f107 0314 	add.w	r3, r7, #20
 800614a:	4619      	mov	r1, r3
 800614c:	4810      	ldr	r0, [pc, #64]	; (8006190 <HAL_PCD_MspInit+0xb4>)
 800614e:	f7fa fc19 	bl	8000984 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006152:	4b0e      	ldr	r3, [pc, #56]	; (800618c <HAL_PCD_MspInit+0xb0>)
 8006154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006156:	4a0d      	ldr	r2, [pc, #52]	; (800618c <HAL_PCD_MspInit+0xb0>)
 8006158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615c:	6353      	str	r3, [r2, #52]	; 0x34
 800615e:	4b0b      	ldr	r3, [pc, #44]	; (800618c <HAL_PCD_MspInit+0xb0>)
 8006160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4b08      	ldr	r3, [pc, #32]	; (800618c <HAL_PCD_MspInit+0xb0>)
 800616c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616e:	4a07      	ldr	r2, [pc, #28]	; (800618c <HAL_PCD_MspInit+0xb0>)
 8006170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006174:	6453      	str	r3, [r2, #68]	; 0x44
 8006176:	4b05      	ldr	r3, [pc, #20]	; (800618c <HAL_PCD_MspInit+0xb0>)
 8006178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800617e:	60bb      	str	r3, [r7, #8]
 8006180:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006182:	bf00      	nop
 8006184:	3728      	adds	r7, #40	; 0x28
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	40023800 	.word	0x40023800
 8006190:	40020000 	.word	0x40020000

08006194 <Reset_Handler>:
 8006194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80061cc <LoopFillZerobss+0x14>
 8006198:	2100      	movs	r1, #0
 800619a:	e003      	b.n	80061a4 <LoopCopyDataInit>

0800619c <CopyDataInit>:
 800619c:	4b0c      	ldr	r3, [pc, #48]	; (80061d0 <LoopFillZerobss+0x18>)
 800619e:	585b      	ldr	r3, [r3, r1]
 80061a0:	5043      	str	r3, [r0, r1]
 80061a2:	3104      	adds	r1, #4

080061a4 <LoopCopyDataInit>:
 80061a4:	480b      	ldr	r0, [pc, #44]	; (80061d4 <LoopFillZerobss+0x1c>)
 80061a6:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <LoopFillZerobss+0x20>)
 80061a8:	1842      	adds	r2, r0, r1
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d3f6      	bcc.n	800619c <CopyDataInit>
 80061ae:	4a0b      	ldr	r2, [pc, #44]	; (80061dc <LoopFillZerobss+0x24>)
 80061b0:	e002      	b.n	80061b8 <LoopFillZerobss>

080061b2 <FillZerobss>:
 80061b2:	2300      	movs	r3, #0
 80061b4:	f842 3b04 	str.w	r3, [r2], #4

080061b8 <LoopFillZerobss>:
 80061b8:	4b09      	ldr	r3, [pc, #36]	; (80061e0 <LoopFillZerobss+0x28>)
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d3f9      	bcc.n	80061b2 <FillZerobss>
 80061be:	f7ff fd0b 	bl	8005bd8 <SystemInit>
 80061c2:	f000 f81b 	bl	80061fc <__libc_init_array>
 80061c6:	f7ff faff 	bl	80057c8 <main>
 80061ca:	4770      	bx	lr
 80061cc:	20050000 	.word	0x20050000
 80061d0:	08006d7c 	.word	0x08006d7c
 80061d4:	20000000 	.word	0x20000000
 80061d8:	200001dc 	.word	0x200001dc
 80061dc:	200001dc 	.word	0x200001dc
 80061e0:	20000860 	.word	0x20000860

080061e4 <ADC_IRQHandler>:
 80061e4:	e7fe      	b.n	80061e4 <ADC_IRQHandler>

080061e6 <atoi>:
 80061e6:	220a      	movs	r2, #10
 80061e8:	2100      	movs	r1, #0
 80061ea:	f000 b8cf 	b.w	800638c <strtol>
	...

080061f0 <__errno>:
 80061f0:	4b01      	ldr	r3, [pc, #4]	; (80061f8 <__errno+0x8>)
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	2000000c 	.word	0x2000000c

080061fc <__libc_init_array>:
 80061fc:	b570      	push	{r4, r5, r6, lr}
 80061fe:	4e0d      	ldr	r6, [pc, #52]	; (8006234 <__libc_init_array+0x38>)
 8006200:	4c0d      	ldr	r4, [pc, #52]	; (8006238 <__libc_init_array+0x3c>)
 8006202:	1ba4      	subs	r4, r4, r6
 8006204:	10a4      	asrs	r4, r4, #2
 8006206:	2500      	movs	r5, #0
 8006208:	42a5      	cmp	r5, r4
 800620a:	d109      	bne.n	8006220 <__libc_init_array+0x24>
 800620c:	4e0b      	ldr	r6, [pc, #44]	; (800623c <__libc_init_array+0x40>)
 800620e:	4c0c      	ldr	r4, [pc, #48]	; (8006240 <__libc_init_array+0x44>)
 8006210:	f000 fcdc 	bl	8006bcc <_init>
 8006214:	1ba4      	subs	r4, r4, r6
 8006216:	10a4      	asrs	r4, r4, #2
 8006218:	2500      	movs	r5, #0
 800621a:	42a5      	cmp	r5, r4
 800621c:	d105      	bne.n	800622a <__libc_init_array+0x2e>
 800621e:	bd70      	pop	{r4, r5, r6, pc}
 8006220:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006224:	4798      	blx	r3
 8006226:	3501      	adds	r5, #1
 8006228:	e7ee      	b.n	8006208 <__libc_init_array+0xc>
 800622a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800622e:	4798      	blx	r3
 8006230:	3501      	adds	r5, #1
 8006232:	e7f2      	b.n	800621a <__libc_init_array+0x1e>
 8006234:	08006d74 	.word	0x08006d74
 8006238:	08006d74 	.word	0x08006d74
 800623c:	08006d74 	.word	0x08006d74
 8006240:	08006d78 	.word	0x08006d78

08006244 <memset>:
 8006244:	4402      	add	r2, r0
 8006246:	4603      	mov	r3, r0
 8006248:	4293      	cmp	r3, r2
 800624a:	d100      	bne.n	800624e <memset+0xa>
 800624c:	4770      	bx	lr
 800624e:	f803 1b01 	strb.w	r1, [r3], #1
 8006252:	e7f9      	b.n	8006248 <memset+0x4>

08006254 <siprintf>:
 8006254:	b40e      	push	{r1, r2, r3}
 8006256:	b500      	push	{lr}
 8006258:	b09c      	sub	sp, #112	; 0x70
 800625a:	ab1d      	add	r3, sp, #116	; 0x74
 800625c:	9002      	str	r0, [sp, #8]
 800625e:	9006      	str	r0, [sp, #24]
 8006260:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006264:	4809      	ldr	r0, [pc, #36]	; (800628c <siprintf+0x38>)
 8006266:	9107      	str	r1, [sp, #28]
 8006268:	9104      	str	r1, [sp, #16]
 800626a:	4909      	ldr	r1, [pc, #36]	; (8006290 <siprintf+0x3c>)
 800626c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006270:	9105      	str	r1, [sp, #20]
 8006272:	6800      	ldr	r0, [r0, #0]
 8006274:	9301      	str	r3, [sp, #4]
 8006276:	a902      	add	r1, sp, #8
 8006278:	f000 f90e 	bl	8006498 <_svfiprintf_r>
 800627c:	9b02      	ldr	r3, [sp, #8]
 800627e:	2200      	movs	r2, #0
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	b01c      	add	sp, #112	; 0x70
 8006284:	f85d eb04 	ldr.w	lr, [sp], #4
 8006288:	b003      	add	sp, #12
 800628a:	4770      	bx	lr
 800628c:	2000000c 	.word	0x2000000c
 8006290:	ffff0208 	.word	0xffff0208

08006294 <_strtol_l.isra.0>:
 8006294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006298:	4680      	mov	r8, r0
 800629a:	4689      	mov	r9, r1
 800629c:	4692      	mov	sl, r2
 800629e:	461e      	mov	r6, r3
 80062a0:	460f      	mov	r7, r1
 80062a2:	463d      	mov	r5, r7
 80062a4:	9808      	ldr	r0, [sp, #32]
 80062a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062aa:	f000 f885 	bl	80063b8 <__locale_ctype_ptr_l>
 80062ae:	4420      	add	r0, r4
 80062b0:	7843      	ldrb	r3, [r0, #1]
 80062b2:	f013 0308 	ands.w	r3, r3, #8
 80062b6:	d132      	bne.n	800631e <_strtol_l.isra.0+0x8a>
 80062b8:	2c2d      	cmp	r4, #45	; 0x2d
 80062ba:	d132      	bne.n	8006322 <_strtol_l.isra.0+0x8e>
 80062bc:	787c      	ldrb	r4, [r7, #1]
 80062be:	1cbd      	adds	r5, r7, #2
 80062c0:	2201      	movs	r2, #1
 80062c2:	2e00      	cmp	r6, #0
 80062c4:	d05d      	beq.n	8006382 <_strtol_l.isra.0+0xee>
 80062c6:	2e10      	cmp	r6, #16
 80062c8:	d109      	bne.n	80062de <_strtol_l.isra.0+0x4a>
 80062ca:	2c30      	cmp	r4, #48	; 0x30
 80062cc:	d107      	bne.n	80062de <_strtol_l.isra.0+0x4a>
 80062ce:	782b      	ldrb	r3, [r5, #0]
 80062d0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80062d4:	2b58      	cmp	r3, #88	; 0x58
 80062d6:	d14f      	bne.n	8006378 <_strtol_l.isra.0+0xe4>
 80062d8:	786c      	ldrb	r4, [r5, #1]
 80062da:	2610      	movs	r6, #16
 80062dc:	3502      	adds	r5, #2
 80062de:	2a00      	cmp	r2, #0
 80062e0:	bf14      	ite	ne
 80062e2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80062e6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80062ea:	2700      	movs	r7, #0
 80062ec:	fbb1 fcf6 	udiv	ip, r1, r6
 80062f0:	4638      	mov	r0, r7
 80062f2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80062f6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80062fa:	2b09      	cmp	r3, #9
 80062fc:	d817      	bhi.n	800632e <_strtol_l.isra.0+0x9a>
 80062fe:	461c      	mov	r4, r3
 8006300:	42a6      	cmp	r6, r4
 8006302:	dd23      	ble.n	800634c <_strtol_l.isra.0+0xb8>
 8006304:	1c7b      	adds	r3, r7, #1
 8006306:	d007      	beq.n	8006318 <_strtol_l.isra.0+0x84>
 8006308:	4584      	cmp	ip, r0
 800630a:	d31c      	bcc.n	8006346 <_strtol_l.isra.0+0xb2>
 800630c:	d101      	bne.n	8006312 <_strtol_l.isra.0+0x7e>
 800630e:	45a6      	cmp	lr, r4
 8006310:	db19      	blt.n	8006346 <_strtol_l.isra.0+0xb2>
 8006312:	fb00 4006 	mla	r0, r0, r6, r4
 8006316:	2701      	movs	r7, #1
 8006318:	f815 4b01 	ldrb.w	r4, [r5], #1
 800631c:	e7eb      	b.n	80062f6 <_strtol_l.isra.0+0x62>
 800631e:	462f      	mov	r7, r5
 8006320:	e7bf      	b.n	80062a2 <_strtol_l.isra.0+0xe>
 8006322:	2c2b      	cmp	r4, #43	; 0x2b
 8006324:	bf04      	itt	eq
 8006326:	1cbd      	addeq	r5, r7, #2
 8006328:	787c      	ldrbeq	r4, [r7, #1]
 800632a:	461a      	mov	r2, r3
 800632c:	e7c9      	b.n	80062c2 <_strtol_l.isra.0+0x2e>
 800632e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006332:	2b19      	cmp	r3, #25
 8006334:	d801      	bhi.n	800633a <_strtol_l.isra.0+0xa6>
 8006336:	3c37      	subs	r4, #55	; 0x37
 8006338:	e7e2      	b.n	8006300 <_strtol_l.isra.0+0x6c>
 800633a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800633e:	2b19      	cmp	r3, #25
 8006340:	d804      	bhi.n	800634c <_strtol_l.isra.0+0xb8>
 8006342:	3c57      	subs	r4, #87	; 0x57
 8006344:	e7dc      	b.n	8006300 <_strtol_l.isra.0+0x6c>
 8006346:	f04f 37ff 	mov.w	r7, #4294967295
 800634a:	e7e5      	b.n	8006318 <_strtol_l.isra.0+0x84>
 800634c:	1c7b      	adds	r3, r7, #1
 800634e:	d108      	bne.n	8006362 <_strtol_l.isra.0+0xce>
 8006350:	2322      	movs	r3, #34	; 0x22
 8006352:	f8c8 3000 	str.w	r3, [r8]
 8006356:	4608      	mov	r0, r1
 8006358:	f1ba 0f00 	cmp.w	sl, #0
 800635c:	d107      	bne.n	800636e <_strtol_l.isra.0+0xda>
 800635e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006362:	b102      	cbz	r2, 8006366 <_strtol_l.isra.0+0xd2>
 8006364:	4240      	negs	r0, r0
 8006366:	f1ba 0f00 	cmp.w	sl, #0
 800636a:	d0f8      	beq.n	800635e <_strtol_l.isra.0+0xca>
 800636c:	b10f      	cbz	r7, 8006372 <_strtol_l.isra.0+0xde>
 800636e:	f105 39ff 	add.w	r9, r5, #4294967295
 8006372:	f8ca 9000 	str.w	r9, [sl]
 8006376:	e7f2      	b.n	800635e <_strtol_l.isra.0+0xca>
 8006378:	2430      	movs	r4, #48	; 0x30
 800637a:	2e00      	cmp	r6, #0
 800637c:	d1af      	bne.n	80062de <_strtol_l.isra.0+0x4a>
 800637e:	2608      	movs	r6, #8
 8006380:	e7ad      	b.n	80062de <_strtol_l.isra.0+0x4a>
 8006382:	2c30      	cmp	r4, #48	; 0x30
 8006384:	d0a3      	beq.n	80062ce <_strtol_l.isra.0+0x3a>
 8006386:	260a      	movs	r6, #10
 8006388:	e7a9      	b.n	80062de <_strtol_l.isra.0+0x4a>
	...

0800638c <strtol>:
 800638c:	4b08      	ldr	r3, [pc, #32]	; (80063b0 <strtol+0x24>)
 800638e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006390:	681c      	ldr	r4, [r3, #0]
 8006392:	4d08      	ldr	r5, [pc, #32]	; (80063b4 <strtol+0x28>)
 8006394:	6a23      	ldr	r3, [r4, #32]
 8006396:	2b00      	cmp	r3, #0
 8006398:	bf08      	it	eq
 800639a:	462b      	moveq	r3, r5
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	4613      	mov	r3, r2
 80063a0:	460a      	mov	r2, r1
 80063a2:	4601      	mov	r1, r0
 80063a4:	4620      	mov	r0, r4
 80063a6:	f7ff ff75 	bl	8006294 <_strtol_l.isra.0>
 80063aa:	b003      	add	sp, #12
 80063ac:	bd30      	pop	{r4, r5, pc}
 80063ae:	bf00      	nop
 80063b0:	2000000c 	.word	0x2000000c
 80063b4:	20000070 	.word	0x20000070

080063b8 <__locale_ctype_ptr_l>:
 80063b8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80063bc:	4770      	bx	lr

080063be <__ascii_mbtowc>:
 80063be:	b082      	sub	sp, #8
 80063c0:	b901      	cbnz	r1, 80063c4 <__ascii_mbtowc+0x6>
 80063c2:	a901      	add	r1, sp, #4
 80063c4:	b142      	cbz	r2, 80063d8 <__ascii_mbtowc+0x1a>
 80063c6:	b14b      	cbz	r3, 80063dc <__ascii_mbtowc+0x1e>
 80063c8:	7813      	ldrb	r3, [r2, #0]
 80063ca:	600b      	str	r3, [r1, #0]
 80063cc:	7812      	ldrb	r2, [r2, #0]
 80063ce:	1c10      	adds	r0, r2, #0
 80063d0:	bf18      	it	ne
 80063d2:	2001      	movne	r0, #1
 80063d4:	b002      	add	sp, #8
 80063d6:	4770      	bx	lr
 80063d8:	4610      	mov	r0, r2
 80063da:	e7fb      	b.n	80063d4 <__ascii_mbtowc+0x16>
 80063dc:	f06f 0001 	mvn.w	r0, #1
 80063e0:	e7f8      	b.n	80063d4 <__ascii_mbtowc+0x16>

080063e2 <__ssputs_r>:
 80063e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e6:	688e      	ldr	r6, [r1, #8]
 80063e8:	429e      	cmp	r6, r3
 80063ea:	4682      	mov	sl, r0
 80063ec:	460c      	mov	r4, r1
 80063ee:	4690      	mov	r8, r2
 80063f0:	4699      	mov	r9, r3
 80063f2:	d837      	bhi.n	8006464 <__ssputs_r+0x82>
 80063f4:	898a      	ldrh	r2, [r1, #12]
 80063f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063fa:	d031      	beq.n	8006460 <__ssputs_r+0x7e>
 80063fc:	6825      	ldr	r5, [r4, #0]
 80063fe:	6909      	ldr	r1, [r1, #16]
 8006400:	1a6f      	subs	r7, r5, r1
 8006402:	6965      	ldr	r5, [r4, #20]
 8006404:	2302      	movs	r3, #2
 8006406:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800640a:	fb95 f5f3 	sdiv	r5, r5, r3
 800640e:	f109 0301 	add.w	r3, r9, #1
 8006412:	443b      	add	r3, r7
 8006414:	429d      	cmp	r5, r3
 8006416:	bf38      	it	cc
 8006418:	461d      	movcc	r5, r3
 800641a:	0553      	lsls	r3, r2, #21
 800641c:	d530      	bpl.n	8006480 <__ssputs_r+0x9e>
 800641e:	4629      	mov	r1, r5
 8006420:	f000 fb3a 	bl	8006a98 <_malloc_r>
 8006424:	4606      	mov	r6, r0
 8006426:	b950      	cbnz	r0, 800643e <__ssputs_r+0x5c>
 8006428:	230c      	movs	r3, #12
 800642a:	f8ca 3000 	str.w	r3, [sl]
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006434:	81a3      	strh	r3, [r4, #12]
 8006436:	f04f 30ff 	mov.w	r0, #4294967295
 800643a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800643e:	463a      	mov	r2, r7
 8006440:	6921      	ldr	r1, [r4, #16]
 8006442:	f000 fab6 	bl	80069b2 <memcpy>
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800644c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006450:	81a3      	strh	r3, [r4, #12]
 8006452:	6126      	str	r6, [r4, #16]
 8006454:	6165      	str	r5, [r4, #20]
 8006456:	443e      	add	r6, r7
 8006458:	1bed      	subs	r5, r5, r7
 800645a:	6026      	str	r6, [r4, #0]
 800645c:	60a5      	str	r5, [r4, #8]
 800645e:	464e      	mov	r6, r9
 8006460:	454e      	cmp	r6, r9
 8006462:	d900      	bls.n	8006466 <__ssputs_r+0x84>
 8006464:	464e      	mov	r6, r9
 8006466:	4632      	mov	r2, r6
 8006468:	4641      	mov	r1, r8
 800646a:	6820      	ldr	r0, [r4, #0]
 800646c:	f000 faac 	bl	80069c8 <memmove>
 8006470:	68a3      	ldr	r3, [r4, #8]
 8006472:	1b9b      	subs	r3, r3, r6
 8006474:	60a3      	str	r3, [r4, #8]
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	441e      	add	r6, r3
 800647a:	6026      	str	r6, [r4, #0]
 800647c:	2000      	movs	r0, #0
 800647e:	e7dc      	b.n	800643a <__ssputs_r+0x58>
 8006480:	462a      	mov	r2, r5
 8006482:	f000 fb63 	bl	8006b4c <_realloc_r>
 8006486:	4606      	mov	r6, r0
 8006488:	2800      	cmp	r0, #0
 800648a:	d1e2      	bne.n	8006452 <__ssputs_r+0x70>
 800648c:	6921      	ldr	r1, [r4, #16]
 800648e:	4650      	mov	r0, sl
 8006490:	f000 fab4 	bl	80069fc <_free_r>
 8006494:	e7c8      	b.n	8006428 <__ssputs_r+0x46>
	...

08006498 <_svfiprintf_r>:
 8006498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649c:	461d      	mov	r5, r3
 800649e:	898b      	ldrh	r3, [r1, #12]
 80064a0:	061f      	lsls	r7, r3, #24
 80064a2:	b09d      	sub	sp, #116	; 0x74
 80064a4:	4680      	mov	r8, r0
 80064a6:	460c      	mov	r4, r1
 80064a8:	4616      	mov	r6, r2
 80064aa:	d50f      	bpl.n	80064cc <_svfiprintf_r+0x34>
 80064ac:	690b      	ldr	r3, [r1, #16]
 80064ae:	b96b      	cbnz	r3, 80064cc <_svfiprintf_r+0x34>
 80064b0:	2140      	movs	r1, #64	; 0x40
 80064b2:	f000 faf1 	bl	8006a98 <_malloc_r>
 80064b6:	6020      	str	r0, [r4, #0]
 80064b8:	6120      	str	r0, [r4, #16]
 80064ba:	b928      	cbnz	r0, 80064c8 <_svfiprintf_r+0x30>
 80064bc:	230c      	movs	r3, #12
 80064be:	f8c8 3000 	str.w	r3, [r8]
 80064c2:	f04f 30ff 	mov.w	r0, #4294967295
 80064c6:	e0c8      	b.n	800665a <_svfiprintf_r+0x1c2>
 80064c8:	2340      	movs	r3, #64	; 0x40
 80064ca:	6163      	str	r3, [r4, #20]
 80064cc:	2300      	movs	r3, #0
 80064ce:	9309      	str	r3, [sp, #36]	; 0x24
 80064d0:	2320      	movs	r3, #32
 80064d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064d6:	2330      	movs	r3, #48	; 0x30
 80064d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064dc:	9503      	str	r5, [sp, #12]
 80064de:	f04f 0b01 	mov.w	fp, #1
 80064e2:	4637      	mov	r7, r6
 80064e4:	463d      	mov	r5, r7
 80064e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80064ea:	b10b      	cbz	r3, 80064f0 <_svfiprintf_r+0x58>
 80064ec:	2b25      	cmp	r3, #37	; 0x25
 80064ee:	d13e      	bne.n	800656e <_svfiprintf_r+0xd6>
 80064f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80064f4:	d00b      	beq.n	800650e <_svfiprintf_r+0x76>
 80064f6:	4653      	mov	r3, sl
 80064f8:	4632      	mov	r2, r6
 80064fa:	4621      	mov	r1, r4
 80064fc:	4640      	mov	r0, r8
 80064fe:	f7ff ff70 	bl	80063e2 <__ssputs_r>
 8006502:	3001      	adds	r0, #1
 8006504:	f000 80a4 	beq.w	8006650 <_svfiprintf_r+0x1b8>
 8006508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650a:	4453      	add	r3, sl
 800650c:	9309      	str	r3, [sp, #36]	; 0x24
 800650e:	783b      	ldrb	r3, [r7, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 809d 	beq.w	8006650 <_svfiprintf_r+0x1b8>
 8006516:	2300      	movs	r3, #0
 8006518:	f04f 32ff 	mov.w	r2, #4294967295
 800651c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006520:	9304      	str	r3, [sp, #16]
 8006522:	9307      	str	r3, [sp, #28]
 8006524:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006528:	931a      	str	r3, [sp, #104]	; 0x68
 800652a:	462f      	mov	r7, r5
 800652c:	2205      	movs	r2, #5
 800652e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006532:	4850      	ldr	r0, [pc, #320]	; (8006674 <_svfiprintf_r+0x1dc>)
 8006534:	f7f9 fe6c 	bl	8000210 <memchr>
 8006538:	9b04      	ldr	r3, [sp, #16]
 800653a:	b9d0      	cbnz	r0, 8006572 <_svfiprintf_r+0xda>
 800653c:	06d9      	lsls	r1, r3, #27
 800653e:	bf44      	itt	mi
 8006540:	2220      	movmi	r2, #32
 8006542:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006546:	071a      	lsls	r2, r3, #28
 8006548:	bf44      	itt	mi
 800654a:	222b      	movmi	r2, #43	; 0x2b
 800654c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006550:	782a      	ldrb	r2, [r5, #0]
 8006552:	2a2a      	cmp	r2, #42	; 0x2a
 8006554:	d015      	beq.n	8006582 <_svfiprintf_r+0xea>
 8006556:	9a07      	ldr	r2, [sp, #28]
 8006558:	462f      	mov	r7, r5
 800655a:	2000      	movs	r0, #0
 800655c:	250a      	movs	r5, #10
 800655e:	4639      	mov	r1, r7
 8006560:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006564:	3b30      	subs	r3, #48	; 0x30
 8006566:	2b09      	cmp	r3, #9
 8006568:	d94d      	bls.n	8006606 <_svfiprintf_r+0x16e>
 800656a:	b1b8      	cbz	r0, 800659c <_svfiprintf_r+0x104>
 800656c:	e00f      	b.n	800658e <_svfiprintf_r+0xf6>
 800656e:	462f      	mov	r7, r5
 8006570:	e7b8      	b.n	80064e4 <_svfiprintf_r+0x4c>
 8006572:	4a40      	ldr	r2, [pc, #256]	; (8006674 <_svfiprintf_r+0x1dc>)
 8006574:	1a80      	subs	r0, r0, r2
 8006576:	fa0b f000 	lsl.w	r0, fp, r0
 800657a:	4318      	orrs	r0, r3
 800657c:	9004      	str	r0, [sp, #16]
 800657e:	463d      	mov	r5, r7
 8006580:	e7d3      	b.n	800652a <_svfiprintf_r+0x92>
 8006582:	9a03      	ldr	r2, [sp, #12]
 8006584:	1d11      	adds	r1, r2, #4
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	9103      	str	r1, [sp, #12]
 800658a:	2a00      	cmp	r2, #0
 800658c:	db01      	blt.n	8006592 <_svfiprintf_r+0xfa>
 800658e:	9207      	str	r2, [sp, #28]
 8006590:	e004      	b.n	800659c <_svfiprintf_r+0x104>
 8006592:	4252      	negs	r2, r2
 8006594:	f043 0302 	orr.w	r3, r3, #2
 8006598:	9207      	str	r2, [sp, #28]
 800659a:	9304      	str	r3, [sp, #16]
 800659c:	783b      	ldrb	r3, [r7, #0]
 800659e:	2b2e      	cmp	r3, #46	; 0x2e
 80065a0:	d10c      	bne.n	80065bc <_svfiprintf_r+0x124>
 80065a2:	787b      	ldrb	r3, [r7, #1]
 80065a4:	2b2a      	cmp	r3, #42	; 0x2a
 80065a6:	d133      	bne.n	8006610 <_svfiprintf_r+0x178>
 80065a8:	9b03      	ldr	r3, [sp, #12]
 80065aa:	1d1a      	adds	r2, r3, #4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	9203      	str	r2, [sp, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	bfb8      	it	lt
 80065b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80065b8:	3702      	adds	r7, #2
 80065ba:	9305      	str	r3, [sp, #20]
 80065bc:	4d2e      	ldr	r5, [pc, #184]	; (8006678 <_svfiprintf_r+0x1e0>)
 80065be:	7839      	ldrb	r1, [r7, #0]
 80065c0:	2203      	movs	r2, #3
 80065c2:	4628      	mov	r0, r5
 80065c4:	f7f9 fe24 	bl	8000210 <memchr>
 80065c8:	b138      	cbz	r0, 80065da <_svfiprintf_r+0x142>
 80065ca:	2340      	movs	r3, #64	; 0x40
 80065cc:	1b40      	subs	r0, r0, r5
 80065ce:	fa03 f000 	lsl.w	r0, r3, r0
 80065d2:	9b04      	ldr	r3, [sp, #16]
 80065d4:	4303      	orrs	r3, r0
 80065d6:	3701      	adds	r7, #1
 80065d8:	9304      	str	r3, [sp, #16]
 80065da:	7839      	ldrb	r1, [r7, #0]
 80065dc:	4827      	ldr	r0, [pc, #156]	; (800667c <_svfiprintf_r+0x1e4>)
 80065de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065e2:	2206      	movs	r2, #6
 80065e4:	1c7e      	adds	r6, r7, #1
 80065e6:	f7f9 fe13 	bl	8000210 <memchr>
 80065ea:	2800      	cmp	r0, #0
 80065ec:	d038      	beq.n	8006660 <_svfiprintf_r+0x1c8>
 80065ee:	4b24      	ldr	r3, [pc, #144]	; (8006680 <_svfiprintf_r+0x1e8>)
 80065f0:	bb13      	cbnz	r3, 8006638 <_svfiprintf_r+0x1a0>
 80065f2:	9b03      	ldr	r3, [sp, #12]
 80065f4:	3307      	adds	r3, #7
 80065f6:	f023 0307 	bic.w	r3, r3, #7
 80065fa:	3308      	adds	r3, #8
 80065fc:	9303      	str	r3, [sp, #12]
 80065fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006600:	444b      	add	r3, r9
 8006602:	9309      	str	r3, [sp, #36]	; 0x24
 8006604:	e76d      	b.n	80064e2 <_svfiprintf_r+0x4a>
 8006606:	fb05 3202 	mla	r2, r5, r2, r3
 800660a:	2001      	movs	r0, #1
 800660c:	460f      	mov	r7, r1
 800660e:	e7a6      	b.n	800655e <_svfiprintf_r+0xc6>
 8006610:	2300      	movs	r3, #0
 8006612:	3701      	adds	r7, #1
 8006614:	9305      	str	r3, [sp, #20]
 8006616:	4619      	mov	r1, r3
 8006618:	250a      	movs	r5, #10
 800661a:	4638      	mov	r0, r7
 800661c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006620:	3a30      	subs	r2, #48	; 0x30
 8006622:	2a09      	cmp	r2, #9
 8006624:	d903      	bls.n	800662e <_svfiprintf_r+0x196>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0c8      	beq.n	80065bc <_svfiprintf_r+0x124>
 800662a:	9105      	str	r1, [sp, #20]
 800662c:	e7c6      	b.n	80065bc <_svfiprintf_r+0x124>
 800662e:	fb05 2101 	mla	r1, r5, r1, r2
 8006632:	2301      	movs	r3, #1
 8006634:	4607      	mov	r7, r0
 8006636:	e7f0      	b.n	800661a <_svfiprintf_r+0x182>
 8006638:	ab03      	add	r3, sp, #12
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	4622      	mov	r2, r4
 800663e:	4b11      	ldr	r3, [pc, #68]	; (8006684 <_svfiprintf_r+0x1ec>)
 8006640:	a904      	add	r1, sp, #16
 8006642:	4640      	mov	r0, r8
 8006644:	f3af 8000 	nop.w
 8006648:	f1b0 3fff 	cmp.w	r0, #4294967295
 800664c:	4681      	mov	r9, r0
 800664e:	d1d6      	bne.n	80065fe <_svfiprintf_r+0x166>
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	065b      	lsls	r3, r3, #25
 8006654:	f53f af35 	bmi.w	80064c2 <_svfiprintf_r+0x2a>
 8006658:	9809      	ldr	r0, [sp, #36]	; 0x24
 800665a:	b01d      	add	sp, #116	; 0x74
 800665c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006660:	ab03      	add	r3, sp, #12
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	4622      	mov	r2, r4
 8006666:	4b07      	ldr	r3, [pc, #28]	; (8006684 <_svfiprintf_r+0x1ec>)
 8006668:	a904      	add	r1, sp, #16
 800666a:	4640      	mov	r0, r8
 800666c:	f000 f882 	bl	8006774 <_printf_i>
 8006670:	e7ea      	b.n	8006648 <_svfiprintf_r+0x1b0>
 8006672:	bf00      	nop
 8006674:	08006c36 	.word	0x08006c36
 8006678:	08006c3c 	.word	0x08006c3c
 800667c:	08006c40 	.word	0x08006c40
 8006680:	00000000 	.word	0x00000000
 8006684:	080063e3 	.word	0x080063e3

08006688 <_printf_common>:
 8006688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800668c:	4691      	mov	r9, r2
 800668e:	461f      	mov	r7, r3
 8006690:	688a      	ldr	r2, [r1, #8]
 8006692:	690b      	ldr	r3, [r1, #16]
 8006694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006698:	4293      	cmp	r3, r2
 800669a:	bfb8      	it	lt
 800669c:	4613      	movlt	r3, r2
 800669e:	f8c9 3000 	str.w	r3, [r9]
 80066a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066a6:	4606      	mov	r6, r0
 80066a8:	460c      	mov	r4, r1
 80066aa:	b112      	cbz	r2, 80066b2 <_printf_common+0x2a>
 80066ac:	3301      	adds	r3, #1
 80066ae:	f8c9 3000 	str.w	r3, [r9]
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	0699      	lsls	r1, r3, #26
 80066b6:	bf42      	ittt	mi
 80066b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80066bc:	3302      	addmi	r3, #2
 80066be:	f8c9 3000 	strmi.w	r3, [r9]
 80066c2:	6825      	ldr	r5, [r4, #0]
 80066c4:	f015 0506 	ands.w	r5, r5, #6
 80066c8:	d107      	bne.n	80066da <_printf_common+0x52>
 80066ca:	f104 0a19 	add.w	sl, r4, #25
 80066ce:	68e3      	ldr	r3, [r4, #12]
 80066d0:	f8d9 2000 	ldr.w	r2, [r9]
 80066d4:	1a9b      	subs	r3, r3, r2
 80066d6:	42ab      	cmp	r3, r5
 80066d8:	dc28      	bgt.n	800672c <_printf_common+0xa4>
 80066da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80066de:	6822      	ldr	r2, [r4, #0]
 80066e0:	3300      	adds	r3, #0
 80066e2:	bf18      	it	ne
 80066e4:	2301      	movne	r3, #1
 80066e6:	0692      	lsls	r2, r2, #26
 80066e8:	d42d      	bmi.n	8006746 <_printf_common+0xbe>
 80066ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066ee:	4639      	mov	r1, r7
 80066f0:	4630      	mov	r0, r6
 80066f2:	47c0      	blx	r8
 80066f4:	3001      	adds	r0, #1
 80066f6:	d020      	beq.n	800673a <_printf_common+0xb2>
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	68e5      	ldr	r5, [r4, #12]
 80066fc:	f8d9 2000 	ldr.w	r2, [r9]
 8006700:	f003 0306 	and.w	r3, r3, #6
 8006704:	2b04      	cmp	r3, #4
 8006706:	bf08      	it	eq
 8006708:	1aad      	subeq	r5, r5, r2
 800670a:	68a3      	ldr	r3, [r4, #8]
 800670c:	6922      	ldr	r2, [r4, #16]
 800670e:	bf0c      	ite	eq
 8006710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006714:	2500      	movne	r5, #0
 8006716:	4293      	cmp	r3, r2
 8006718:	bfc4      	itt	gt
 800671a:	1a9b      	subgt	r3, r3, r2
 800671c:	18ed      	addgt	r5, r5, r3
 800671e:	f04f 0900 	mov.w	r9, #0
 8006722:	341a      	adds	r4, #26
 8006724:	454d      	cmp	r5, r9
 8006726:	d11a      	bne.n	800675e <_printf_common+0xd6>
 8006728:	2000      	movs	r0, #0
 800672a:	e008      	b.n	800673e <_printf_common+0xb6>
 800672c:	2301      	movs	r3, #1
 800672e:	4652      	mov	r2, sl
 8006730:	4639      	mov	r1, r7
 8006732:	4630      	mov	r0, r6
 8006734:	47c0      	blx	r8
 8006736:	3001      	adds	r0, #1
 8006738:	d103      	bne.n	8006742 <_printf_common+0xba>
 800673a:	f04f 30ff 	mov.w	r0, #4294967295
 800673e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006742:	3501      	adds	r5, #1
 8006744:	e7c3      	b.n	80066ce <_printf_common+0x46>
 8006746:	18e1      	adds	r1, r4, r3
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	2030      	movs	r0, #48	; 0x30
 800674c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006750:	4422      	add	r2, r4
 8006752:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006756:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800675a:	3302      	adds	r3, #2
 800675c:	e7c5      	b.n	80066ea <_printf_common+0x62>
 800675e:	2301      	movs	r3, #1
 8006760:	4622      	mov	r2, r4
 8006762:	4639      	mov	r1, r7
 8006764:	4630      	mov	r0, r6
 8006766:	47c0      	blx	r8
 8006768:	3001      	adds	r0, #1
 800676a:	d0e6      	beq.n	800673a <_printf_common+0xb2>
 800676c:	f109 0901 	add.w	r9, r9, #1
 8006770:	e7d8      	b.n	8006724 <_printf_common+0x9c>
	...

08006774 <_printf_i>:
 8006774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006778:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800677c:	460c      	mov	r4, r1
 800677e:	7e09      	ldrb	r1, [r1, #24]
 8006780:	b085      	sub	sp, #20
 8006782:	296e      	cmp	r1, #110	; 0x6e
 8006784:	4617      	mov	r7, r2
 8006786:	4606      	mov	r6, r0
 8006788:	4698      	mov	r8, r3
 800678a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800678c:	f000 80b3 	beq.w	80068f6 <_printf_i+0x182>
 8006790:	d822      	bhi.n	80067d8 <_printf_i+0x64>
 8006792:	2963      	cmp	r1, #99	; 0x63
 8006794:	d036      	beq.n	8006804 <_printf_i+0x90>
 8006796:	d80a      	bhi.n	80067ae <_printf_i+0x3a>
 8006798:	2900      	cmp	r1, #0
 800679a:	f000 80b9 	beq.w	8006910 <_printf_i+0x19c>
 800679e:	2958      	cmp	r1, #88	; 0x58
 80067a0:	f000 8083 	beq.w	80068aa <_printf_i+0x136>
 80067a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80067ac:	e032      	b.n	8006814 <_printf_i+0xa0>
 80067ae:	2964      	cmp	r1, #100	; 0x64
 80067b0:	d001      	beq.n	80067b6 <_printf_i+0x42>
 80067b2:	2969      	cmp	r1, #105	; 0x69
 80067b4:	d1f6      	bne.n	80067a4 <_printf_i+0x30>
 80067b6:	6820      	ldr	r0, [r4, #0]
 80067b8:	6813      	ldr	r3, [r2, #0]
 80067ba:	0605      	lsls	r5, r0, #24
 80067bc:	f103 0104 	add.w	r1, r3, #4
 80067c0:	d52a      	bpl.n	8006818 <_printf_i+0xa4>
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6011      	str	r1, [r2, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	da03      	bge.n	80067d2 <_printf_i+0x5e>
 80067ca:	222d      	movs	r2, #45	; 0x2d
 80067cc:	425b      	negs	r3, r3
 80067ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80067d2:	486f      	ldr	r0, [pc, #444]	; (8006990 <_printf_i+0x21c>)
 80067d4:	220a      	movs	r2, #10
 80067d6:	e039      	b.n	800684c <_printf_i+0xd8>
 80067d8:	2973      	cmp	r1, #115	; 0x73
 80067da:	f000 809d 	beq.w	8006918 <_printf_i+0x1a4>
 80067de:	d808      	bhi.n	80067f2 <_printf_i+0x7e>
 80067e0:	296f      	cmp	r1, #111	; 0x6f
 80067e2:	d020      	beq.n	8006826 <_printf_i+0xb2>
 80067e4:	2970      	cmp	r1, #112	; 0x70
 80067e6:	d1dd      	bne.n	80067a4 <_printf_i+0x30>
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	f043 0320 	orr.w	r3, r3, #32
 80067ee:	6023      	str	r3, [r4, #0]
 80067f0:	e003      	b.n	80067fa <_printf_i+0x86>
 80067f2:	2975      	cmp	r1, #117	; 0x75
 80067f4:	d017      	beq.n	8006826 <_printf_i+0xb2>
 80067f6:	2978      	cmp	r1, #120	; 0x78
 80067f8:	d1d4      	bne.n	80067a4 <_printf_i+0x30>
 80067fa:	2378      	movs	r3, #120	; 0x78
 80067fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006800:	4864      	ldr	r0, [pc, #400]	; (8006994 <_printf_i+0x220>)
 8006802:	e055      	b.n	80068b0 <_printf_i+0x13c>
 8006804:	6813      	ldr	r3, [r2, #0]
 8006806:	1d19      	adds	r1, r3, #4
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6011      	str	r1, [r2, #0]
 800680c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006814:	2301      	movs	r3, #1
 8006816:	e08c      	b.n	8006932 <_printf_i+0x1be>
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6011      	str	r1, [r2, #0]
 800681c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006820:	bf18      	it	ne
 8006822:	b21b      	sxthne	r3, r3
 8006824:	e7cf      	b.n	80067c6 <_printf_i+0x52>
 8006826:	6813      	ldr	r3, [r2, #0]
 8006828:	6825      	ldr	r5, [r4, #0]
 800682a:	1d18      	adds	r0, r3, #4
 800682c:	6010      	str	r0, [r2, #0]
 800682e:	0628      	lsls	r0, r5, #24
 8006830:	d501      	bpl.n	8006836 <_printf_i+0xc2>
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	e002      	b.n	800683c <_printf_i+0xc8>
 8006836:	0668      	lsls	r0, r5, #25
 8006838:	d5fb      	bpl.n	8006832 <_printf_i+0xbe>
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	4854      	ldr	r0, [pc, #336]	; (8006990 <_printf_i+0x21c>)
 800683e:	296f      	cmp	r1, #111	; 0x6f
 8006840:	bf14      	ite	ne
 8006842:	220a      	movne	r2, #10
 8006844:	2208      	moveq	r2, #8
 8006846:	2100      	movs	r1, #0
 8006848:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800684c:	6865      	ldr	r5, [r4, #4]
 800684e:	60a5      	str	r5, [r4, #8]
 8006850:	2d00      	cmp	r5, #0
 8006852:	f2c0 8095 	blt.w	8006980 <_printf_i+0x20c>
 8006856:	6821      	ldr	r1, [r4, #0]
 8006858:	f021 0104 	bic.w	r1, r1, #4
 800685c:	6021      	str	r1, [r4, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d13d      	bne.n	80068de <_printf_i+0x16a>
 8006862:	2d00      	cmp	r5, #0
 8006864:	f040 808e 	bne.w	8006984 <_printf_i+0x210>
 8006868:	4665      	mov	r5, ip
 800686a:	2a08      	cmp	r2, #8
 800686c:	d10b      	bne.n	8006886 <_printf_i+0x112>
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	07db      	lsls	r3, r3, #31
 8006872:	d508      	bpl.n	8006886 <_printf_i+0x112>
 8006874:	6923      	ldr	r3, [r4, #16]
 8006876:	6862      	ldr	r2, [r4, #4]
 8006878:	429a      	cmp	r2, r3
 800687a:	bfde      	ittt	le
 800687c:	2330      	movle	r3, #48	; 0x30
 800687e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006882:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006886:	ebac 0305 	sub.w	r3, ip, r5
 800688a:	6123      	str	r3, [r4, #16]
 800688c:	f8cd 8000 	str.w	r8, [sp]
 8006890:	463b      	mov	r3, r7
 8006892:	aa03      	add	r2, sp, #12
 8006894:	4621      	mov	r1, r4
 8006896:	4630      	mov	r0, r6
 8006898:	f7ff fef6 	bl	8006688 <_printf_common>
 800689c:	3001      	adds	r0, #1
 800689e:	d14d      	bne.n	800693c <_printf_i+0x1c8>
 80068a0:	f04f 30ff 	mov.w	r0, #4294967295
 80068a4:	b005      	add	sp, #20
 80068a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068aa:	4839      	ldr	r0, [pc, #228]	; (8006990 <_printf_i+0x21c>)
 80068ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80068b0:	6813      	ldr	r3, [r2, #0]
 80068b2:	6821      	ldr	r1, [r4, #0]
 80068b4:	1d1d      	adds	r5, r3, #4
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6015      	str	r5, [r2, #0]
 80068ba:	060a      	lsls	r2, r1, #24
 80068bc:	d50b      	bpl.n	80068d6 <_printf_i+0x162>
 80068be:	07ca      	lsls	r2, r1, #31
 80068c0:	bf44      	itt	mi
 80068c2:	f041 0120 	orrmi.w	r1, r1, #32
 80068c6:	6021      	strmi	r1, [r4, #0]
 80068c8:	b91b      	cbnz	r3, 80068d2 <_printf_i+0x15e>
 80068ca:	6822      	ldr	r2, [r4, #0]
 80068cc:	f022 0220 	bic.w	r2, r2, #32
 80068d0:	6022      	str	r2, [r4, #0]
 80068d2:	2210      	movs	r2, #16
 80068d4:	e7b7      	b.n	8006846 <_printf_i+0xd2>
 80068d6:	064d      	lsls	r5, r1, #25
 80068d8:	bf48      	it	mi
 80068da:	b29b      	uxthmi	r3, r3
 80068dc:	e7ef      	b.n	80068be <_printf_i+0x14a>
 80068de:	4665      	mov	r5, ip
 80068e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80068e4:	fb02 3311 	mls	r3, r2, r1, r3
 80068e8:	5cc3      	ldrb	r3, [r0, r3]
 80068ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80068ee:	460b      	mov	r3, r1
 80068f0:	2900      	cmp	r1, #0
 80068f2:	d1f5      	bne.n	80068e0 <_printf_i+0x16c>
 80068f4:	e7b9      	b.n	800686a <_printf_i+0xf6>
 80068f6:	6813      	ldr	r3, [r2, #0]
 80068f8:	6825      	ldr	r5, [r4, #0]
 80068fa:	6961      	ldr	r1, [r4, #20]
 80068fc:	1d18      	adds	r0, r3, #4
 80068fe:	6010      	str	r0, [r2, #0]
 8006900:	0628      	lsls	r0, r5, #24
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	d501      	bpl.n	800690a <_printf_i+0x196>
 8006906:	6019      	str	r1, [r3, #0]
 8006908:	e002      	b.n	8006910 <_printf_i+0x19c>
 800690a:	066a      	lsls	r2, r5, #25
 800690c:	d5fb      	bpl.n	8006906 <_printf_i+0x192>
 800690e:	8019      	strh	r1, [r3, #0]
 8006910:	2300      	movs	r3, #0
 8006912:	6123      	str	r3, [r4, #16]
 8006914:	4665      	mov	r5, ip
 8006916:	e7b9      	b.n	800688c <_printf_i+0x118>
 8006918:	6813      	ldr	r3, [r2, #0]
 800691a:	1d19      	adds	r1, r3, #4
 800691c:	6011      	str	r1, [r2, #0]
 800691e:	681d      	ldr	r5, [r3, #0]
 8006920:	6862      	ldr	r2, [r4, #4]
 8006922:	2100      	movs	r1, #0
 8006924:	4628      	mov	r0, r5
 8006926:	f7f9 fc73 	bl	8000210 <memchr>
 800692a:	b108      	cbz	r0, 8006930 <_printf_i+0x1bc>
 800692c:	1b40      	subs	r0, r0, r5
 800692e:	6060      	str	r0, [r4, #4]
 8006930:	6863      	ldr	r3, [r4, #4]
 8006932:	6123      	str	r3, [r4, #16]
 8006934:	2300      	movs	r3, #0
 8006936:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800693a:	e7a7      	b.n	800688c <_printf_i+0x118>
 800693c:	6923      	ldr	r3, [r4, #16]
 800693e:	462a      	mov	r2, r5
 8006940:	4639      	mov	r1, r7
 8006942:	4630      	mov	r0, r6
 8006944:	47c0      	blx	r8
 8006946:	3001      	adds	r0, #1
 8006948:	d0aa      	beq.n	80068a0 <_printf_i+0x12c>
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	079b      	lsls	r3, r3, #30
 800694e:	d413      	bmi.n	8006978 <_printf_i+0x204>
 8006950:	68e0      	ldr	r0, [r4, #12]
 8006952:	9b03      	ldr	r3, [sp, #12]
 8006954:	4298      	cmp	r0, r3
 8006956:	bfb8      	it	lt
 8006958:	4618      	movlt	r0, r3
 800695a:	e7a3      	b.n	80068a4 <_printf_i+0x130>
 800695c:	2301      	movs	r3, #1
 800695e:	464a      	mov	r2, r9
 8006960:	4639      	mov	r1, r7
 8006962:	4630      	mov	r0, r6
 8006964:	47c0      	blx	r8
 8006966:	3001      	adds	r0, #1
 8006968:	d09a      	beq.n	80068a0 <_printf_i+0x12c>
 800696a:	3501      	adds	r5, #1
 800696c:	68e3      	ldr	r3, [r4, #12]
 800696e:	9a03      	ldr	r2, [sp, #12]
 8006970:	1a9b      	subs	r3, r3, r2
 8006972:	42ab      	cmp	r3, r5
 8006974:	dcf2      	bgt.n	800695c <_printf_i+0x1e8>
 8006976:	e7eb      	b.n	8006950 <_printf_i+0x1dc>
 8006978:	2500      	movs	r5, #0
 800697a:	f104 0919 	add.w	r9, r4, #25
 800697e:	e7f5      	b.n	800696c <_printf_i+0x1f8>
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1ac      	bne.n	80068de <_printf_i+0x16a>
 8006984:	7803      	ldrb	r3, [r0, #0]
 8006986:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800698a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800698e:	e76c      	b.n	800686a <_printf_i+0xf6>
 8006990:	08006c47 	.word	0x08006c47
 8006994:	08006c58 	.word	0x08006c58

08006998 <__ascii_wctomb>:
 8006998:	b149      	cbz	r1, 80069ae <__ascii_wctomb+0x16>
 800699a:	2aff      	cmp	r2, #255	; 0xff
 800699c:	bf85      	ittet	hi
 800699e:	238a      	movhi	r3, #138	; 0x8a
 80069a0:	6003      	strhi	r3, [r0, #0]
 80069a2:	700a      	strbls	r2, [r1, #0]
 80069a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80069a8:	bf98      	it	ls
 80069aa:	2001      	movls	r0, #1
 80069ac:	4770      	bx	lr
 80069ae:	4608      	mov	r0, r1
 80069b0:	4770      	bx	lr

080069b2 <memcpy>:
 80069b2:	b510      	push	{r4, lr}
 80069b4:	1e43      	subs	r3, r0, #1
 80069b6:	440a      	add	r2, r1
 80069b8:	4291      	cmp	r1, r2
 80069ba:	d100      	bne.n	80069be <memcpy+0xc>
 80069bc:	bd10      	pop	{r4, pc}
 80069be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069c6:	e7f7      	b.n	80069b8 <memcpy+0x6>

080069c8 <memmove>:
 80069c8:	4288      	cmp	r0, r1
 80069ca:	b510      	push	{r4, lr}
 80069cc:	eb01 0302 	add.w	r3, r1, r2
 80069d0:	d807      	bhi.n	80069e2 <memmove+0x1a>
 80069d2:	1e42      	subs	r2, r0, #1
 80069d4:	4299      	cmp	r1, r3
 80069d6:	d00a      	beq.n	80069ee <memmove+0x26>
 80069d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069dc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80069e0:	e7f8      	b.n	80069d4 <memmove+0xc>
 80069e2:	4283      	cmp	r3, r0
 80069e4:	d9f5      	bls.n	80069d2 <memmove+0xa>
 80069e6:	1881      	adds	r1, r0, r2
 80069e8:	1ad2      	subs	r2, r2, r3
 80069ea:	42d3      	cmn	r3, r2
 80069ec:	d100      	bne.n	80069f0 <memmove+0x28>
 80069ee:	bd10      	pop	{r4, pc}
 80069f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069f4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80069f8:	e7f7      	b.n	80069ea <memmove+0x22>
	...

080069fc <_free_r>:
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	4605      	mov	r5, r0
 8006a00:	2900      	cmp	r1, #0
 8006a02:	d045      	beq.n	8006a90 <_free_r+0x94>
 8006a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a08:	1f0c      	subs	r4, r1, #4
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	bfb8      	it	lt
 8006a0e:	18e4      	addlt	r4, r4, r3
 8006a10:	f000 f8d2 	bl	8006bb8 <__malloc_lock>
 8006a14:	4a1f      	ldr	r2, [pc, #124]	; (8006a94 <_free_r+0x98>)
 8006a16:	6813      	ldr	r3, [r2, #0]
 8006a18:	4610      	mov	r0, r2
 8006a1a:	b933      	cbnz	r3, 8006a2a <_free_r+0x2e>
 8006a1c:	6063      	str	r3, [r4, #4]
 8006a1e:	6014      	str	r4, [r2, #0]
 8006a20:	4628      	mov	r0, r5
 8006a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a26:	f000 b8c8 	b.w	8006bba <__malloc_unlock>
 8006a2a:	42a3      	cmp	r3, r4
 8006a2c:	d90c      	bls.n	8006a48 <_free_r+0x4c>
 8006a2e:	6821      	ldr	r1, [r4, #0]
 8006a30:	1862      	adds	r2, r4, r1
 8006a32:	4293      	cmp	r3, r2
 8006a34:	bf04      	itt	eq
 8006a36:	681a      	ldreq	r2, [r3, #0]
 8006a38:	685b      	ldreq	r3, [r3, #4]
 8006a3a:	6063      	str	r3, [r4, #4]
 8006a3c:	bf04      	itt	eq
 8006a3e:	1852      	addeq	r2, r2, r1
 8006a40:	6022      	streq	r2, [r4, #0]
 8006a42:	6004      	str	r4, [r0, #0]
 8006a44:	e7ec      	b.n	8006a20 <_free_r+0x24>
 8006a46:	4613      	mov	r3, r2
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	b10a      	cbz	r2, 8006a50 <_free_r+0x54>
 8006a4c:	42a2      	cmp	r2, r4
 8006a4e:	d9fa      	bls.n	8006a46 <_free_r+0x4a>
 8006a50:	6819      	ldr	r1, [r3, #0]
 8006a52:	1858      	adds	r0, r3, r1
 8006a54:	42a0      	cmp	r0, r4
 8006a56:	d10b      	bne.n	8006a70 <_free_r+0x74>
 8006a58:	6820      	ldr	r0, [r4, #0]
 8006a5a:	4401      	add	r1, r0
 8006a5c:	1858      	adds	r0, r3, r1
 8006a5e:	4282      	cmp	r2, r0
 8006a60:	6019      	str	r1, [r3, #0]
 8006a62:	d1dd      	bne.n	8006a20 <_free_r+0x24>
 8006a64:	6810      	ldr	r0, [r2, #0]
 8006a66:	6852      	ldr	r2, [r2, #4]
 8006a68:	605a      	str	r2, [r3, #4]
 8006a6a:	4401      	add	r1, r0
 8006a6c:	6019      	str	r1, [r3, #0]
 8006a6e:	e7d7      	b.n	8006a20 <_free_r+0x24>
 8006a70:	d902      	bls.n	8006a78 <_free_r+0x7c>
 8006a72:	230c      	movs	r3, #12
 8006a74:	602b      	str	r3, [r5, #0]
 8006a76:	e7d3      	b.n	8006a20 <_free_r+0x24>
 8006a78:	6820      	ldr	r0, [r4, #0]
 8006a7a:	1821      	adds	r1, r4, r0
 8006a7c:	428a      	cmp	r2, r1
 8006a7e:	bf04      	itt	eq
 8006a80:	6811      	ldreq	r1, [r2, #0]
 8006a82:	6852      	ldreq	r2, [r2, #4]
 8006a84:	6062      	str	r2, [r4, #4]
 8006a86:	bf04      	itt	eq
 8006a88:	1809      	addeq	r1, r1, r0
 8006a8a:	6021      	streq	r1, [r4, #0]
 8006a8c:	605c      	str	r4, [r3, #4]
 8006a8e:	e7c7      	b.n	8006a20 <_free_r+0x24>
 8006a90:	bd38      	pop	{r3, r4, r5, pc}
 8006a92:	bf00      	nop
 8006a94:	20000200 	.word	0x20000200

08006a98 <_malloc_r>:
 8006a98:	b570      	push	{r4, r5, r6, lr}
 8006a9a:	1ccd      	adds	r5, r1, #3
 8006a9c:	f025 0503 	bic.w	r5, r5, #3
 8006aa0:	3508      	adds	r5, #8
 8006aa2:	2d0c      	cmp	r5, #12
 8006aa4:	bf38      	it	cc
 8006aa6:	250c      	movcc	r5, #12
 8006aa8:	2d00      	cmp	r5, #0
 8006aaa:	4606      	mov	r6, r0
 8006aac:	db01      	blt.n	8006ab2 <_malloc_r+0x1a>
 8006aae:	42a9      	cmp	r1, r5
 8006ab0:	d903      	bls.n	8006aba <_malloc_r+0x22>
 8006ab2:	230c      	movs	r3, #12
 8006ab4:	6033      	str	r3, [r6, #0]
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	bd70      	pop	{r4, r5, r6, pc}
 8006aba:	f000 f87d 	bl	8006bb8 <__malloc_lock>
 8006abe:	4a21      	ldr	r2, [pc, #132]	; (8006b44 <_malloc_r+0xac>)
 8006ac0:	6814      	ldr	r4, [r2, #0]
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	b991      	cbnz	r1, 8006aec <_malloc_r+0x54>
 8006ac6:	4c20      	ldr	r4, [pc, #128]	; (8006b48 <_malloc_r+0xb0>)
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	b91b      	cbnz	r3, 8006ad4 <_malloc_r+0x3c>
 8006acc:	4630      	mov	r0, r6
 8006ace:	f000 f863 	bl	8006b98 <_sbrk_r>
 8006ad2:	6020      	str	r0, [r4, #0]
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	f000 f85e 	bl	8006b98 <_sbrk_r>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d124      	bne.n	8006b2a <_malloc_r+0x92>
 8006ae0:	230c      	movs	r3, #12
 8006ae2:	6033      	str	r3, [r6, #0]
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	f000 f868 	bl	8006bba <__malloc_unlock>
 8006aea:	e7e4      	b.n	8006ab6 <_malloc_r+0x1e>
 8006aec:	680b      	ldr	r3, [r1, #0]
 8006aee:	1b5b      	subs	r3, r3, r5
 8006af0:	d418      	bmi.n	8006b24 <_malloc_r+0x8c>
 8006af2:	2b0b      	cmp	r3, #11
 8006af4:	d90f      	bls.n	8006b16 <_malloc_r+0x7e>
 8006af6:	600b      	str	r3, [r1, #0]
 8006af8:	50cd      	str	r5, [r1, r3]
 8006afa:	18cc      	adds	r4, r1, r3
 8006afc:	4630      	mov	r0, r6
 8006afe:	f000 f85c 	bl	8006bba <__malloc_unlock>
 8006b02:	f104 000b 	add.w	r0, r4, #11
 8006b06:	1d23      	adds	r3, r4, #4
 8006b08:	f020 0007 	bic.w	r0, r0, #7
 8006b0c:	1ac3      	subs	r3, r0, r3
 8006b0e:	d0d3      	beq.n	8006ab8 <_malloc_r+0x20>
 8006b10:	425a      	negs	r2, r3
 8006b12:	50e2      	str	r2, [r4, r3]
 8006b14:	e7d0      	b.n	8006ab8 <_malloc_r+0x20>
 8006b16:	428c      	cmp	r4, r1
 8006b18:	684b      	ldr	r3, [r1, #4]
 8006b1a:	bf16      	itet	ne
 8006b1c:	6063      	strne	r3, [r4, #4]
 8006b1e:	6013      	streq	r3, [r2, #0]
 8006b20:	460c      	movne	r4, r1
 8006b22:	e7eb      	b.n	8006afc <_malloc_r+0x64>
 8006b24:	460c      	mov	r4, r1
 8006b26:	6849      	ldr	r1, [r1, #4]
 8006b28:	e7cc      	b.n	8006ac4 <_malloc_r+0x2c>
 8006b2a:	1cc4      	adds	r4, r0, #3
 8006b2c:	f024 0403 	bic.w	r4, r4, #3
 8006b30:	42a0      	cmp	r0, r4
 8006b32:	d005      	beq.n	8006b40 <_malloc_r+0xa8>
 8006b34:	1a21      	subs	r1, r4, r0
 8006b36:	4630      	mov	r0, r6
 8006b38:	f000 f82e 	bl	8006b98 <_sbrk_r>
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	d0cf      	beq.n	8006ae0 <_malloc_r+0x48>
 8006b40:	6025      	str	r5, [r4, #0]
 8006b42:	e7db      	b.n	8006afc <_malloc_r+0x64>
 8006b44:	20000200 	.word	0x20000200
 8006b48:	20000204 	.word	0x20000204

08006b4c <_realloc_r>:
 8006b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4e:	4607      	mov	r7, r0
 8006b50:	4614      	mov	r4, r2
 8006b52:	460e      	mov	r6, r1
 8006b54:	b921      	cbnz	r1, 8006b60 <_realloc_r+0x14>
 8006b56:	4611      	mov	r1, r2
 8006b58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b5c:	f7ff bf9c 	b.w	8006a98 <_malloc_r>
 8006b60:	b922      	cbnz	r2, 8006b6c <_realloc_r+0x20>
 8006b62:	f7ff ff4b 	bl	80069fc <_free_r>
 8006b66:	4625      	mov	r5, r4
 8006b68:	4628      	mov	r0, r5
 8006b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b6c:	f000 f826 	bl	8006bbc <_malloc_usable_size_r>
 8006b70:	42a0      	cmp	r0, r4
 8006b72:	d20f      	bcs.n	8006b94 <_realloc_r+0x48>
 8006b74:	4621      	mov	r1, r4
 8006b76:	4638      	mov	r0, r7
 8006b78:	f7ff ff8e 	bl	8006a98 <_malloc_r>
 8006b7c:	4605      	mov	r5, r0
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d0f2      	beq.n	8006b68 <_realloc_r+0x1c>
 8006b82:	4631      	mov	r1, r6
 8006b84:	4622      	mov	r2, r4
 8006b86:	f7ff ff14 	bl	80069b2 <memcpy>
 8006b8a:	4631      	mov	r1, r6
 8006b8c:	4638      	mov	r0, r7
 8006b8e:	f7ff ff35 	bl	80069fc <_free_r>
 8006b92:	e7e9      	b.n	8006b68 <_realloc_r+0x1c>
 8006b94:	4635      	mov	r5, r6
 8006b96:	e7e7      	b.n	8006b68 <_realloc_r+0x1c>

08006b98 <_sbrk_r>:
 8006b98:	b538      	push	{r3, r4, r5, lr}
 8006b9a:	4c06      	ldr	r4, [pc, #24]	; (8006bb4 <_sbrk_r+0x1c>)
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	4605      	mov	r5, r0
 8006ba0:	4608      	mov	r0, r1
 8006ba2:	6023      	str	r3, [r4, #0]
 8006ba4:	f7fe ffec 	bl	8005b80 <_sbrk>
 8006ba8:	1c43      	adds	r3, r0, #1
 8006baa:	d102      	bne.n	8006bb2 <_sbrk_r+0x1a>
 8006bac:	6823      	ldr	r3, [r4, #0]
 8006bae:	b103      	cbz	r3, 8006bb2 <_sbrk_r+0x1a>
 8006bb0:	602b      	str	r3, [r5, #0]
 8006bb2:	bd38      	pop	{r3, r4, r5, pc}
 8006bb4:	2000085c 	.word	0x2000085c

08006bb8 <__malloc_lock>:
 8006bb8:	4770      	bx	lr

08006bba <__malloc_unlock>:
 8006bba:	4770      	bx	lr

08006bbc <_malloc_usable_size_r>:
 8006bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bc0:	1f18      	subs	r0, r3, #4
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	bfbc      	itt	lt
 8006bc6:	580b      	ldrlt	r3, [r1, r0]
 8006bc8:	18c0      	addlt	r0, r0, r3
 8006bca:	4770      	bx	lr

08006bcc <_init>:
 8006bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bce:	bf00      	nop
 8006bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd2:	bc08      	pop	{r3}
 8006bd4:	469e      	mov	lr, r3
 8006bd6:	4770      	bx	lr

08006bd8 <_fini>:
 8006bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bda:	bf00      	nop
 8006bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bde:	bc08      	pop	{r3}
 8006be0:	469e      	mov	lr, r3
 8006be2:	4770      	bx	lr
